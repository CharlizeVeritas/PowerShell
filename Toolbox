<# Agent Toolbox PowerShell Script Written by Charlize Veritas (Version: 1.4.3.2 Last Revision: 12/17/2019) #>

# Check for Parameters
Param([switch]$ErrorLog)

# Load Additional Assemblies
[void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
[void][System.Reflection.Assembly]::LoadWithPartialName('PresentationFramework')
[void][System.Reflection.Assembly]::LoadWithPartialName('WindowsFormsIntegration')

# Enable DEVMODE to prevent updates and Copy Protection
$Script:DEVMODE = $True

# Default Script Settings
$Script:ScriptName = 'Agent Toolbox'
$Script:Version = '1.4.3.2'
$Script:CurrentDir = $(Get-Location).Path
$Script:CurrentTimeZone = (Get-WmiObject win32_timezone).StandardName
$Script:ScriptPath = "$CurrentDir\$ScriptName.exe"
$Script:ScriptsFolder = "$CurrentDir\Scripts"
$Script:FilesFolder = "$CurrentDir\Files"
$Script:DocsFolder = "$CurrentDir\Docs"
$Script:LogsFolder = "$CurrentDir\Logs"
$Script:ComputerFile = "Computer.txt"
$Script:ConfigFile = "config.ini"
$Script:ClipboardFile = "$FilesFolder\clipboard.csv"
$Script:ProgressPreference = "SilentlyContinue"
$script:SearchTimeout = 10
$Script:UpdateChoice = $Null
$Script:UpdateSwitch = $False
$Script:Browser = "C:\Program Files (x86)\Internet Explorer\iexplore.exe"
$Script:OpenLink = "In New Tab"
$Script:WindowStyle = "SingleBorderWindow"
$Script:TextColor = "#FFFFFFFF"
$Script:BackColor = "#FF17479E"
$Script:SafeTextColor = "#FFFFFFFF"
$Script:SafeBackColor = "#FF9B132D"
$Script:MainTheme = "Main Default"
$Script:SafeTheme = "Safe Default"
$Script:SavedMainTheme = "Main Default"
$Script:SavedSafeTheme = "Safe Default"
$Script:Font = "Segoe UI"
$Script:AlwaysOnTop = "Disabled"
$Script:Background = $Null
$Script:Opacity = $Null

# Default Script Variables
$Script:ErrorList = New-Object System.Collections.ArrayList
$Script:SearchList = New-Object System.Collections.ArrayList
$Script:MapList = New-Object System.Collections.ArrayList
$Script:FontList = New-Object System.Collections.ArrayList
$Script:SortedMatrix = New-Object System.Collections.ArrayList
$Script:FixList = New-Object System.Collections.ArrayList
$Script:DriveMapping = $True
$Script:RolePresent = $False
$Script:UserPresent = $False
$Script:SafeMode = $False
$Script:Credentials = $Null
$Script:ServiceCredentials = $Null
$Script:CancelActions = $False
$Script:Menu = $Null
$Script:StartSwitch = $True
$Script:StartNew = $False
$Script:EMSMode = $False

# New Button XML
[xml]$Script:ButtonXml = @"
<Button xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" HorizontalAlignment="Left" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
"@

# Set Window Title to Script Name
$Host.UI.RawUI.WindowTitle = "$ScriptName"

# Capture Security Principal of the Current User
$Script:WindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent()
$WindowsPrincipal = New-Object System.Security.Principal.WindowsPrincipal($WindowsID)

# Capture Security Principal for the Administrator
$AdminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator

# Administrator Rights Check and Self-Elevation
If ($WindowsPrincipal.IsInRole($AdminRole)) {$Host.UI.RawUI.WindowTitle = "Administrator: $ScriptName"}
Else {
    $DEPT_Toolbox = new-object System.Diagnostics.ProcessStartInfo $ScriptPath
    $DEPT_Toolbox.FileName = $ScriptPath
    If ($ErrorLog) {$DEPT_Toolbox.Arguments = $DEPT_Toolbox.Arguments + " -ErrorLog"}
    $DEPT_Toolbox.Verb = "runas";
    Try {[System.Diagnostics.Process]::Start($DEPT_Toolbox) | Out-Null}
    Catch {$Script:ServiceID = Get-Credential -Message "Please provide your Service ID Credentials to continue. You must use the format of DOMAIN\ServiceID." -User "DOMAIN\" -ErrorAction Stop}
    If ($ServiceID) {
        $DEPT_Toolbox.Username = $ServiceID.GetNetworkCredential().username
        $DEPT_Toolbox.Domain = $ServiceID.GetNetworkCredential().Domain
        $DEPT_Toolbox.Password = $ServiceID.Password        
        $DEPT_Toolbox.UseShellExecute = $False
        Try {[System.Diagnostics.Process]::Start($DEPT_Toolbox) | Out-Null}
        Catch {[System.Windows.MessageBox]::Show("Could not Elevate Agent Toolbox with Admin Rights.`n`nException Error: $($_.Exception.Message)`n`nPress OK to exit this script.",'Cannot Elevate Toolbox','OK','Error') | Out-Null
        Exit}
        }
    Exit
    }#>

# Update the Updater
If ($DEVMODE -ne $True) {
    # Update if Updater .new is present
    If (Test-Path -Path "$CurrentDir\Agent Toolbox Updater.new" -ErrorAction SilentlyContinue) {Copy-Item -Path "$CurrentDir\Agent Toolbox Updater.new" -Destination "$CurrentDir\Agent Toolbox Updater.exe" -ErrorAction SilentlyContinue -Recurse -Force}
    # Update Toolbox if .new is present
    If ((Test-Path -Path "$CurrentDir\Agent Toolbox.new" -ErrorAction SilentlyContinue) -or (Test-Path -Path "$FilesFolder\MSTVIEW.NEW" -ErrorAction SilentlyContinue)) {
        Start-Process -FilePath "$CurrentDir\Agent Toolbox Updater.exe" -ErrorAction SilentlyContinue
        exit
        }
    }

# Add Folders to Path
$env:Path += ";$ScriptsFolder;$FilesFolder;$DocsFolder;C:\Program Files (x86)\Microsoft Office\Office14;C:\Program Files (x86)\Microsoft Office\Office15;C:\Program Files (x86)\Microsoft Office\Office16;C:\Program Files (x86)\Microsoft Office\root\Office16;C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader;C:\Program Files (x86)\Adobe\Acrobat 2015\Acrobat"

# XML Form (Form_Load)
[xml]$XML_LOAD = @"
<Window 
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="LoadForm" Height="200" Width="400" WindowStyle="None" AllowsTransparency="True" Background="Transparent" WindowStartupLocation="CenterScreen" ResizeMode="NoResize" Topmost="True" ShowInTaskbar="False">
    <Window.Resources> 
        <Style TargetType="{x:Type Border}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="Black" />
        </Style>           
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            <Setter Property="TextTrimming" Value="None"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
        </Style>
        <Style TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <Border.CacheMode>
                            <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                        </Border.CacheMode>                        
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Name="Load_Grid">
        <Label Name="LoadFormLabel1" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Height="72" Width="372" HorizontalContentAlignment="Center" VerticalContentAlignment="Bottom" ScrollViewer.VerticalScrollBarVisibility="Disabled" Foreground="White" FontSize="15">
            <Label.CacheMode>
                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
            </Label.CacheMode>            
            <Label.Effect>
                <DropShadowEffect ShadowDepth="2" BlurRadius="5"/>
            </Label.Effect>             
            <TextBlock Name="Form_Load_Textblock1" TextWrapping="WrapWithOverflow" Text="Starting the Agent Toolbox" TextAlignment="Center" FontWeight="Bold">
                <TextBlock.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="1" Color="#FF000000"/>
                </TextBlock.Effect>
            </TextBlock>
        </Label>
        <Label Name="LoadFormLabel2" HorizontalAlignment="Left" Margin="10,89,0,0" VerticalAlignment="Top" Height="72" Width="372" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" ScrollViewer.VerticalScrollBarVisibility="Disabled" Foreground="White" FontSize="15">
            <Label.CacheMode>
                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
            </Label.CacheMode>            
            <Label.Effect>
                <DropShadowEffect ShadowDepth="2" BlurRadius="5"/>
            </Label.Effect>             
            <TextBlock Name="Form_Load_Textblock2" TextWrapping="WrapWithOverflow" Text="Please Wait..." TextAlignment="Center" FontWeight="Bold">
                <TextBlock.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="1" Color="#FF000000"/>
                </TextBlock.Effect>
            </TextBlock>
        </Label>
    </Grid>
</Window>
"@

# Create Form from XML (Form_Load)
$Form_Load = [Windows.Markup.XamlReader]::Load($(New-Object System.Xml.XmlNodeReader $XML_LOAD))

# Load XAML Objects (Form_Load)
$XML_LOAD.SelectNodes("//*[@Name]") | %{Set-Variable -Name "$($_.Name)" -Value $Form_Load.FindName($_.Name) -ErrorAction SilentlyContinue}

# Show Loading Form
$Form_Load.Show() | Out-Null

# Verify Install
If ($DEVMODE -ne $True) {
    $Form_Load_Textblock2.Text = "Verifying Install..."
    $Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
    $keymaster = "$env:Computername$version"
    $gatekeeper = Get-ItemProperty -Path "HKLM:\SOFTWARE\WOW6432Node\Agent Toolbox\Installed" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty "HashCode" -ErrorAction SilentlyContinue | ConvertTo-SecureString -key ([System.Convert]::FromBase64String("BWVZxmszHC8PWWnbndVgLnWaT5o33bEzxbkcrADdCAg=")) | ForEach-Object {[Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($_))}
    If ($keymaster -ne $gatekeeper) {
        [System.Windows.MessageBox]::Show("The Agent Toolbox was not installed using the MSI Installer. Please run the MSI Installer to correct this issue.`n`nPress OK to exit this script.",'Incorrect Install','OK','Error') | Out-Null
        Exit}
    }

# Check that Logon is in proper AD Group
$Form_Load_Textblock2.Text = "Validating User Credentials..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
$adGroups = $WindowsID.Groups | Foreach {$_.Translate([Security.Principal.NTAccount])}
If ($adGroups -notcontains "DOMAIN\ALL_WKSTN_ADMINS") {
    [System.Windows.MessageBox]::Show("Agent Toolbox must be open with a Service Account.`n`nPress OK to exit this script.",'Open With Service Account','OK','Error') | Out-Null
    Exit}

# Load advapi32.dll for Impersonation
$Script:logonUserSignature =
@'
[DllImport( "advapi32.dll" )]
public static extern bool LogonUser( String lpszUserName,
                                     String lpszDomain,
                                     String lpszPassword,
                                     int dwLogonType,
                                     int dwLogonProvider,
                                     ref IntPtr phToken );
'@
$Script:AdvApi32 = Add-Type -MemberDefinition $logonUserSignature -Name "AdvApi32" -Namespace "PsInvoke.NativeMethods" -PassThru
# DO NOT INDENT
$Script:closeHandleSignature =
@'
[DllImport( "kernel32.dll", CharSet = CharSet.Auto )]
public static extern bool CloseHandle( IntPtr handle );
'@
$Script:Kernel32 = Add-Type -MemberDefinition $closeHandleSignature -Name "Kernel32" -Namespace "PsInvoke.NativeMethods" -PassThru

# Create Update Function
$Form_Load_Textblock2.Text = "Preparing Autoupdate Function..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Function UpdateToolbox {
    If ($DEVMODE -ne $True) {
        If (Test-Path -Path "$CurrentDir\Agent Toolbox Updater.new" -ErrorAction SilentlyContinue) {
            If (Get-Process -Name "Agent Toolbox Updater" -ErrorAction SilentlyContinue) {Stop-Process -Name "Agent Toolbox Updater" -Force -ErrorAction SilentlyContinue}
            Remove-Item -Path "$CurrentDir\Agent Toolbox Updater.exe" -ErrorAction SilentlyContinue -Force
            Rename-Item -Path "$CurrentDir\Agent Toolbox Updater.new" -NewName "Agent Toolbox Updater.exe"
            Remove-Item -Path "$CurrentDir\Agent Toolbox Updater.new" -ErrorAction SilentlyContinue -Force
            }
        If (Test-Path -Path "$CurrentDir\Agent Toolbox EMS.new" -ErrorAction SilentlyContinue) {
            If (Get-Process -Name "Agent Toolbox EMS" -ErrorAction SilentlyContinue) {Stop-Process -Name "Agent Toolbox EMS" -Force -ErrorAction SilentlyContinue}
            Remove-Item -Path "$CurrentDir\Agent Toolbox EMS.exe" -ErrorAction SilentlyContinue -Force
            Rename-Item -Path "$CurrentDir\Agent Toolbox EMS.new" -NewName "Agent Toolbox EMS.exe"
            Remove-Item -Path "$CurrentDir\Agent Toolbox EMS.new" -ErrorAction SilentlyContinue -Force
            }              
        If (Test-Path -Path "$CurrentDir\Agent Toolbox Updater.exe" -ErrorAction SilentlyContinue) {
            $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo 
            $ProcessInfo.FileName = "$CurrentDir\Agent Toolbox Updater.exe"
            $ProcessInfo.CreateNoWindow = $True
            $Process = New-Object System.Diagnostics.Process 
            $Process.StartInfo = $ProcessInfo 
            $Process.Start() | Out-Null
            }
        Else {[System.Windows.MessageBox]::Show("The Agent Toolbox Updater is missing. Please Reinstall the Agent Toolbox.`n`nPress OK to close this message.",'Update Error','OK','Error') | Out-Null}
        }
    }

# Run UpdateToolbox
$Form_Load_Textblock2.Text = "Checking for Updates..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
UpdateToolbox

# Gather Local Computer Information
$Form_Load_Textblock2.Text = "Gathering Local Computer Information..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Try {$Script:LocalIPAddress = ([System.Net.Dns]::GetHostByName($env:computername).AddressList[0]).IpAddressToString}
Catch {$Script:LocalIPAddress = $Null}

# Get Logged on user first name and last initial
$Form_Load_Textblock2.Text = "Gathering Logged On User Information..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Try {$Script:LocalWMI = Get-WmiObject -Class win32_Computersystem -ErrorAction SilentlyContinue}
Catch {$Script:LocalWMI = $Null}
If ($LocalWMI.Username) {$Script:LocalUser = $LocalWMI.Username.split('\')[1]} Else {$Script:LocalUser = $env:UserName}
$Script:LocalUserAd = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
    Filter = "(&(objectCategory=User)(SAMAccountName=$LocalUser))"
    SearchScope = 'Subtree'
    SearchRoot = 'LDAP://YOURDOMAIN'
    }).FindAll().Properties
If ($LocalUserAd.givenname -eq "FNU") {$Script:Agent = $LocalUserAd.sn}
Else {$Script:Agent = $LocalUserAd.givenname.replace(" ","") + " " + $LocalUserAd.sn.replace(" ","").SubString(0,1) + "."}

# Create Log Folder if it doesn't exist
If (!(Test-Path $LogsFolder)) {New-Item -Path $LogsFolder -ItemType directory -Force | Out-Null}
# Create Logfile Variable from LogFolder and LocalUser
$Script:LogFile = "$LogsFolder\$LocalUser - $((Get-Date).ToString("yyyyMMddHHmmss")).csv"

# Configure SQL Connection to LCM
$Form_Load_Textblock2.Text = "Creating SQL Connection to LCM..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
# Create LCM Credential
$LCMcredential = New-Object System.Management.Automation.PsCredential("SvcCtr",(ConvertTo-SecureString -String $(Get-Content "$FilesFolder\file.ini") -Key ([System.Convert]::FromBase64String("PASSWORD="))))
$LCMcredential.Password.MakeReadOnly();
# Create SQL Connection to LCM
$SqlConnectionLCM = New-Object System.Data.SqlClient.SqlConnection
$SqlConnectionLCM.Credential = New-Object System.Data.SqlClient.SqlCredential($LCMcredential.UserName, $LCMcredential.Password)
$SqlConnectionLCM.ConnectionString = “Server=YOURSERVER; Database=YOURDATABASE;”
# Create SQL Command 
$SqlCmdLCM = New-Object System.Data.SqlClient.SqlCommand
$SqlCmdLCM.Connection = $SqlConnectionLCM
# Create SQL Adapter
$SqlAdapterLCM = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapterLCM.SelectCommand = $SqlCmdLCM
# Create SQL Dataset
$SqlDataSetLCM = New-Object System.Data.DataSet
# Close SQL Connection until needed
#$SqlConnectionLCM.Close()

# Create Log Credential
$LogCredential = New-Object System.Management.Automation.PsCredential("DEPTToolbox",(ConvertTo-SecureString -String $(Get-Content "$FilesFolder\file.ini") -Key ([System.Convert]::FromBase64String("PASSWORD="))))
$LogCredential.Password.MakeReadOnly();
# Create SQL Connection to DEPT Metrics
$SqlConnectionLOG = New-Object System.Data.SqlClient.SqlConnection
$SqlConnectionLOG.Credential = New-Object System.Data.SqlClient.SqlCredential($LogCredential.UserName, $LogCredential.Password)
$SqlConnectionLOG.ConnectionString = “Server=YOURSERVER; Database=YOURDATABASE;”
# Create SQL Command 
$SqlCmdLOG = New-Object System.Data.SqlClient.SqlCommand
$SqlCmdLOG.Connection = $SqlConnectionLOG
# Create SQL Adapter
$SqlAdapterLOG = New-Object System.Data.SqlClient.SqlDataAdapter
$SqlAdapterLOG.SelectCommand = $SqlCmdLOG
# Create SQL Dataset
$SqlDataSetLOG = New-Object System.Data.DataSet
# Close SQL Connection until needed
#$SqlConnectionLOG.Close()

# Parse Backup Logs to SQL Server
Start-Job -Name "CLEARLOGS" {
	param ($FilesFolder,$LogsFolder)
	$progresspreference = 'SilentlyContinue'
    $CheckLogs = $null
    $CheckLogs = Get-ChildItem -Path $LogsFolder -ErrorAction SilentlyContinue
    If ($CheckLogs) {
        # Create Log Credential
        $LogCredential = New-Object System.Management.Automation.PsCredential("DEPTToolbox",(ConvertTo-SecureString -String $(Get-Content "$FilesFolder\itsm.ini") -Key ([System.Convert]::FromBase64String("tewJdBNEyIZFyzQFBlF8QEsPPgLd1eDsHI+KMNEM5Ko="))))
        $LogCredential.Password.MakeReadOnly();
        # Create SQL Connection to DEPT Metrics
        $SqlConnectionLOG = New-Object System.Data.SqlClient.SqlConnection
        $SqlConnectionLOG.Credential = New-Object System.Data.SqlClient.SqlCredential($LogCredential.UserName, $LogCredential.Password)
        $SqlConnectionLOG.ConnectionString = “Server=YOURSERVER; Database=YOURDATABASE;”
        # Create SQL Command 
        $SqlCmdLOG = New-Object System.Data.SqlClient.SqlCommand
        $SqlCmdLOG.Connection = $SqlConnectionLOG
        # Create SQL Adapter
        $SqlAdapterLOG = New-Object System.Data.SqlClient.SqlDataAdapter
        $SqlAdapterLOG.SelectCommand = $SqlCmdLOG
        # Create SQL Dataset
        $SqlDataSetLOG = New-Object System.Data.DataSet    
        Foreach ($Log in $CheckLogs) {
            $ImportedLog = Import-Csv $Log.Fullname
            Foreach ($Line in $ImportedLog) {
                If ($Line.Time) {$Datetime = Get-Date -Date "$($Line.Date) $($Line.Time)" -Format "yyyy/MM/dd HH:mm:ss"}
                Else {$Datetime = $Line.DateTime}
                $SqlCmdLOG.CommandText = "INSERT INTO YOURTABLE ([datetime],[agentid],[tab],[action],[wsid],[userid],[search]) VALUES ('$datetime','$($Line.agentid)','$($Line.tab)','$($Line.action)','$($Line.wsid)','$($Line.userid)','$($Line.search)')"
                # Clear and Fill Dataset
                $SqlDataSetLOG.Clear()
                $Script:Failure = $False
                Try {$SqlAdapterLOG.Fill($SqlDataSetLOG) | Out-Null}
                Catch {$Script:Failure = $True}
                }
            If ($Failure -eq $False) {Remove-Item -Path $Log.FullName -Force -ErrorAction SilentlyContinue}
            }
        } 	
	} -ArgumentList $FilesFolder,$LogsFolder | Out-Null

# Map Drive to Logon Records
$Form_Load_Textblock2.Text = "Creating Connection to Logon Files..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
If (Test-Path "\\YOURFILEPATH") {New-PSDrive -Name "X" -PSProvider "FileSystem" -Root "\\YOURFILEPATH" -ErrorAction SilentlyContinue | Out-Null}
Else {
    $Script:DriveMapping = $False
    [System.Windows.MessageBox]::Show("Agent Toolbox could not connect to the Odyssey Mappings Share.`n`nPress OK to exit this script.",'Odyssey Share Error','OK','Error') | Out-Null
    }

# Importing Matrix of Options
$Form_Load_Textblock2.Text = "Importing Tab Array..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Try {$Script:Matrix = Import-Csv "$FilesFolder\Agent Toolbox.ini"}
Catch{
    [System.Windows.MessageBox]::Show("Could not locate Tab Array File.`n`nPress OK to Exit.",'Cannot Locate Tab Array File','OK','Error') | Out-Null
    Exit}

# Importing Clipboard Array
$Form_Load_Textblock2.Text = "Importing Clipboard Array..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
If (Test-Path -Path $ClipboardFile) {
    $Script:ClipboardMatrix = Import-Csv $ClipboardFile
    $ClipboardMatrix | % {$_.NUMBER = [int]$_.NUMBER}
    }
Else {$Script:ClipboardMatrix = @()}

# XML Forms
$Form_Load_Textblock2.Text = "Creating XML for WPF Forms..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
[xml]$XML_MAIN = @"
<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Name="Main_Window" Title="Agent Toolbox" Height="516" Width="493" Background="#FF00438F" ResizeMode="CanMinimize" WindowStyle="SingleBorderWindow">
    <Window.Resources>
        <Style TargetType="ToolTip">
          <Setter Property="ContentTemplate">
            <Setter.Value>
              <DataTemplate>
                <StackPanel>
                  <TextBlock Text="{Binding}"
                             MaxWidth="300"
                             TextWrapping='Wrap' />
                </StackPanel>
              </DataTemplate>
            </Setter.Value>
          </Setter>
        </Style>        
        <Style TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="NormalLabel" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleFlat" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Name="Main_Form" Background="Transparent">
        <Grid Name="Test_Grid" Background="Transparent">
            <Label Name="TestLabel" Content="TestLabel" Margin = "0,0,0,0" Height="5" Width="5" FontSize="1" Foreground="White" Visibility="Hidden"/>
            <TextBox Name="TestTextBox" Text="TestTextBox" Height="5" Margin = "0,0,0,0" TextWrapping="Wrap" Width="5" FontSize="1" Visibility="Hidden"/>
            <Button Name="TestButton" Content="TestButton" Margin = "0,0,0,0" Width="5" Height="5" Visibility="Hidden"/>
        </Grid>
        <Grid Name="Start_Grid" Background="Transparent">
            <Label Name="MainToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin = "421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
            <Label Name="StartMenuLabel1" Content="Agent Toolbox" HorizontalAlignment="Center" Margin = "8,178,8,0" VerticalAlignment="Top" Height="42" Width="472" FontSize="20" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" ToolTip="Double Left-Click to Toggle Configuration options" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
            <Label Name="StartMenuLabel2" Content="Enter WSID/IP/USERID and Click Search" HorizontalAlignment="Center" Margin = "8,201,8,0" VerticalAlignment="Top" Height="50" Width="472" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
            <ComboBox Name="WSIDEnterComboBox" HorizontalAlignment="Left" Height="23" Margin = "143,243,0,0" VerticalAlignment="Top" Width="201" IsEditable="True"/>
            <Button Name="StartButton" Content="Search/Bypass" HorizontalAlignment="Left" Margin = "181,271,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Search&#xD;&#xA;Right-Click to Bypass"/>
            <Button Name="MLOCheckButton" Content="MLO" HorizontalAlignment="Left" Margin = "222,307,0,0" VerticalAlignment="Top" Width="45" Height="22" ToolTip="Left-Click to Check if User is an YOURSPECIALUSERTYPE"/>
            <Button Name="EMS_Button" Content="EMS" HorizontalAlignment="Left" Margin="10,455,0,0" VerticalAlignment="Top" Width="43" Height="22" ToolTip="Left-Click to Send Emergency Message" HorizontalContentAlignment="Center" Visibility="Hidden"/>
        </Grid>
        <Label Name="MainBlankLabel" HorizontalAlignment="Center" Margin = "7.5,2,7.5,0" VerticalAlignment="Top" Height="42" Width="450" FontSize="20" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" ToolTip="Double Left-Click to Toggle Configuration options"/>
        <Grid Name="Gather_Grid" Background="Transparent">
            <Label Name="GatherToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin = "421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="GatherMenuLabel" HorizontalAlignment="Center" Margin = "8,201,8,0" VerticalAlignment="Top" Height="50" Width="472" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>                
                <TextBlock Name="GatherMenuTextblock" TextWrapping="WrapWithOverflow" Text="Enter WSID or IP and Click Search" TextAlignment="Center"/>
            </Label>
            <Button Name="CancelButton" Content="Cancel" HorizontalAlignment="Left" Margin = "214,243,0,0" VerticalAlignment="Top" Width="60" Height="24" ToolTip="Left-Click to Cancel Search"/>
        </Grid>
        <Grid Name="Process_Grid" Background="Transparent">
            <Label Name="ProcessToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin = "421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="ProcessMenuLabel" HorizontalAlignment="Center" Margin = "8,181,7,0" VerticalAlignment="Top" Height="50" Width="472" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="ProcessMenuTextblock" TextWrapping="WrapWithOverflow" Text="Enter Name of Process to be Stopped" TextAlignment="Center"/>
            </Label>
            <TextBox Name="ProcessTextbox" HorizontalAlignment="Left" Height="23" Margin="113,225,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="262" VerticalContentAlignment="Center"/>
            <Button Name="ProcessButton" Content="Stop Process" HorizontalAlignment="Left" Margin = "180,255,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Search&#xD;&#xA;Right-Click to Bypass"/>
            <Button Name="ProcessCancelButton" Content="Cancel" HorizontalAlignment="Left" Margin = "217,291,0,0" VerticalAlignment="Top" Width="52" Height="22" ToolTip="Left-Click to Search&#xA;Right-Click to Bypass" HorizontalContentAlignment="Center"/>
        </Grid>
        <Grid Name="SNIssue_Grid" Background="Transparent">
            <Label Name="SNIssueToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin="421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="SNIssueMenuLabel" HorizontalAlignment="Center" Margin="8,193,7,0" VerticalAlignment="Top" Height="50" Width="472" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="SNIssueMenuTextblock" TextWrapping="WrapWithOverflow" Text="I was mis-directed to call records after clicking..." TextAlignment="Center"/>
            </Label>
            <ComboBox Name="SNIssueComboBox" HorizontalAlignment="Left" Height="23" Margin="113,237,0,0" VerticalAlignment="Top" Width="263"/>
            <TextBox Name="SNIssueTextbox" HorizontalAlignment="Left" Height="67" Margin="134,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="223" VerticalContentAlignment="Top" MaxLength="255"/>
            <Button Name="SNIssueButton" Content="Report Issue" HorizontalAlignment="Left" Margin="180,338,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Report Issue"/>
            <Button Name="SNIssueCancelButton" Content="Cancel" HorizontalAlignment="Left" Margin="218,373,0,0" VerticalAlignment="Top" Width="52" Height="22" ToolTip="Left-Click to Cancel and Return to Previous Menu" HorizontalContentAlignment="Center"/>
            <Label Name="SNIssueTitleLabel" HorizontalAlignment="Center" Margin="5,124,10,0" VerticalAlignment="Top" Height="50" Width="472" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="SNIssueTitleTextblock" TextWrapping="WrapWithOverflow" Text="Report Service Now Misdirect" TextAlignment="Center" FontSize="24"/>
            </Label>
        </Grid>
        <Grid Name="Config_Grid" HorizontalAlignment="Left" Background="Transparent" Height="438" Margin = "0,44,0,0" VerticalAlignment="Top" Width="488">
            <Label Name="ConfigOptionsLabel" Content="Configuration Options" HorizontalAlignment="Left" Margin = "10,4,0,0" VerticalAlignment="Top" Width="468" Foreground="White" FontWeight="Bold" FontSize="20" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Height="37"/>
            <Label Name="ConfigBrowserLabel" Content="Default Browser:" HorizontalAlignment="Left" Margin = "96,66,0,0" VerticalAlignment="Top" Width="149" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigTabLabel" Content="Open Links:" HorizontalAlignment="Left" Margin = "95,92,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigWindowLabel" Content="Window Type:" HorizontalAlignment="Left" Margin = "95,116,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigMainForeLabel" Content="Main Font Color:" HorizontalAlignment="Left" Margin = "95,142,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigMainBackLabel" Content="Main Background Color:" HorizontalAlignment="Left" Margin = "47,166,0,0" VerticalAlignment="Top" Width="198" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigSafeForeLabel" Content="Safe Font Color:" HorizontalAlignment="Left" Margin = "95,191,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigSafeBackLabel" Content="Safe Background Color:" HorizontalAlignment="Left" Margin = "47,215,0,0" VerticalAlignment="Top" Width="198" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigMainThemeLabel" Content="Main Theme:" HorizontalAlignment="Left" Margin = "95,240,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigSafeThemeLabel" Content="Safe Theme:" HorizontalAlignment="Left" Margin = "95,263,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigFontLabel" Content="Font:" HorizontalAlignment="Left" Margin = "95,290,0,0" VerticalAlignment="Top" Width="150" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigOnTopLabel" Content="Always on Top:" HorizontalAlignment="Left" Margin = "47,40,0,0" VerticalAlignment="Top" Width="198" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <Label Name="ConfigBackgroundLabel" Content="Background:" HorizontalAlignment="Left" Margin = "47,315,0,0" VerticalAlignment="Top" Width="198" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <TextBox Name="ConfigMainForeTextBox" HorizontalAlignment="Left" Height="24" Margin = "243,143,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="170" FontSize="13" VerticalContentAlignment="Center"/>
            <TextBox Name="ConfigMainBackTextBox" HorizontalAlignment="Left" Height="24" Margin = "243,168,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="170" FontSize="13" VerticalContentAlignment="Center"/>
            <TextBox Name="ConfigSafeForeTextBox" HorizontalAlignment="Left" Height="24" Margin = "243,193,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="170" FontSize="13" VerticalContentAlignment="Center"/>
            <TextBox Name="ConfigSafeBackTextBox" HorizontalAlignment="Left" Height="24" Margin = "243,218,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="170" FontSize="13" VerticalContentAlignment="Center"/>
            <TextBox Name="ConfigBackgroundTextBox" HorizontalAlignment="Left" Height="24" Margin = "243,318,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="139" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigBrowserComboBox" HorizontalAlignment="Left" Margin = "243,68,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigTabComboBox" HorizontalAlignment="Left" Margin = "243,93,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigWindowComboBox" HorizontalAlignment="Left" Margin = "243,118,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigMainThemeComboBox" HorizontalAlignment="Left" Margin = "243,243,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigSafeThemeComboBox" HorizontalAlignment="Left" Margin = "243,268,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigFontComboBox" HorizontalAlignment="Left" Margin = "243,293,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <ComboBox Name="ConfigOnTopComboBox" HorizontalAlignment="Left" Margin = "243,43,0,0" VerticalAlignment="Top" Width="170" Height="24" FontSize="13" VerticalContentAlignment="Center"/>
            <Button Name="ConfigCancelButton" Content="Cancel" HorizontalAlignment="Left" Margin = "84,380,0,0" VerticalAlignment="Top" Width="75" Height="40" ToolTip="Left-Click to Cancel"/>
            <Button Name="ConfigResetButton" Content="Reset" HorizontalAlignment="Left" Margin = "164,380,0,0" VerticalAlignment="Top" Width="75" Height="40" ToolTip="Left-Click to Reset Configuration to Defaults"/>
            <Button Name="ConfigTestButton" Content="Test" HorizontalAlignment="Left" Margin = "244,380,0,0" VerticalAlignment="Top" Width="75" Height="40" ToolTip="Left-Click to Test Configuration Before Saving"/>
            <Button Name="ConfigConfirmButton" Content="Save" HorizontalAlignment="Left" Margin = "324,380,0,0" VerticalAlignment="Top" Width="75" Height="40" ToolTip="Left-Click to Save Configuration" IsEnabled="False"/>
            <Button Name="ConfigBackgroundFileButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin = "383,318,0,0" VerticalAlignment="Top" Width="30" Height="24" FontFamily="Webdings"/>
            <Label Name="MainForeCheckLabel" Content="$([char]0xFC)" HorizontalAlignment="Left" Margin = "413,144,-85,0" VerticalAlignment="Top" Foreground="White" FontFamily="Wingdings"/>
            <Label Name="MainBackCheckLabel" Content="$([char]0xFC)" HorizontalAlignment="Left" Margin = "413,168,-85,0" VerticalAlignment="Top" Foreground="White" FontFamily="Wingdings"/>
            <Label Name="SafeForeCheckLabel" Content="$([char]0xFC)" HorizontalAlignment="Left" Margin = "413,194,-85,0" VerticalAlignment="Top" Foreground="White" FontFamily="Wingdings"/>
            <Label Name="SafeBackCheckLabel" Content="$([char]0xFC)" HorizontalAlignment="Left" Margin = "413,218,-85,0" VerticalAlignment="Top" Foreground="White" FontFamily="Wingdings"/>
            <Label Name="SafeBackGroundCheckLabel" Content="$([char]0xFC)" HorizontalAlignment="Left" Margin = "413,319,-85,0" VerticalAlignment="Top" Foreground="White" FontFamily="Wingdings"/>
            <Label Name="SafeOpactiyCheckLabel" Content="$([char]0xFC)" HorizontalAlignment="Left" Margin = "413,344,-85,0" VerticalAlignment="Top" Foreground="White" FontFamily="Wingdings"/>
            <Label Name="ConfigOpacityLabel" Content="Opacity:" HorizontalAlignment="Left" Margin = "47,339,0,0" VerticalAlignment="Top" Width="198" VerticalContentAlignment="Center" HorizontalContentAlignment="Right" Foreground="White" FontWeight="Bold" FontSize="14"/>
            <TextBox Name="ConfigOpacityTextBox" HorizontalAlignment="Left" Height="24" Margin = "243,343,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="170" FontSize="13" VerticalContentAlignment="Center"/>
        </Grid>
        <Grid Name="Main_Grid" HorizontalAlignment="Left" Background="Transparent" Height="438" Margin = "0,44,0,0" VerticalAlignment="Top" Width="488">
            <Button Name="WSIDButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Center" Height="26" Margin = "48,1,244,0" Content="WSID: Absent" VerticalAlignment="Top" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Width="196" Background="Transparent" Foreground="White" FontSize="14" FontWeight="Bold" BorderThickness="0" Focusable="False" ToolTip="Left-Click to Connect with Dameware&#xD;&#xA;Right-Click to Send Verification Message"/>
            <Button Name="IPButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Center" Height="26" Margin = "50,27,244,0" Content="IP: Absent" VerticalAlignment="Top" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Width="194" Background="Transparent" Foreground="White" FontSize="14" FontWeight="Bold" BorderThickness="0" Focusable="False" ToolTip="Left-Click to Run a Continuous IPv4 Ping Test"/>
            <Button Name="OSButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Center" Height="26" Margin = "262,1,32,0" Content="OS: Absent" VerticalAlignment="Top" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Width="194" Background="Transparent" Foreground="White" FontSize="14" FontWeight="Bold" BorderThickness="0" Focusable="False" ToolTip="Left-Click to Open C$&#xD;&#xA;Right-Click to Open Remote CMD"/>
            <Button Name="PWDEXPIRESButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Center" Height="26" Margin = "262,27,31,0" Content="PWD: Absent" VerticalAlignment="Top" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Width="195" Background="Transparent" Foreground="White" FontSize="14" FontWeight="Bold" BorderThickness="0" Focusable="False" ToolTip="Left-Click to Close Remote Process&#xD;&#xA;Right-Click to Open Event Viewer of Remote Computer"/>
            <Button Name="USERIDButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Center" Height="26" Margin = "48,53,244,0" Content="USERID: Absent" VerticalAlignment="Top" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Width="196" Background="Transparent" Foreground="White" FontSize="14" FontWeight="Bold" BorderThickness="0" Focusable="False" ToolTip="Left-Click to Skype User&#xD;&#xA;Right-Click to Skype Manager"/>
            <Button Name="UPTIMEButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Center" Height="26" Margin = "262,53,31,0" Content="UPTIME: Absent" VerticalAlignment="Top" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Width="195" Background="Transparent" Foreground="White" FontSize="14" FontWeight="Bold" BorderThickness="0" Focusable="False" ToolTip="Left-Click to Force Restart of Workstation&#xD;&#xA;Right-Click to Logoff Current User"/>
            <Button Name="StartMenuButton" Content="New WSID/Refresh" HorizontalAlignment="Left" Margin = "67,392,0,0" VerticalAlignment="Top" Width="115" Height="40" ToolTip="Left-Click to enter New WSID&#xD;&#xA;Right-Click to Refresh"/>
            <Button Name="WSInfoButton" Content="WS Info/Mappings" HorizontalAlignment="Left" Margin = "307,392,0,0" VerticalAlignment="Top" Width="115" Height="40" ToolTip="Left-Click Opens Information&#xD;&#xA;Right-Click Opens Drive Mappings"/>
            <Button Name="EscalationButton" Content="Esc Forms/SN Issue" HorizontalAlignment="Left" Margin = "187,392,0,0" VerticalAlignment="Top" Width="115" Height="40" ToolTip="Left-Click to Open the Escalation Forms"/>
            <ComboBox Name="MainSearchComboBox" HorizontalAlignment="Left" Margin = "65,83,0,0" VerticalAlignment="Top" Width="211" IsEditable="True" IsTextSearchEnabled="False"/>
            <Button Name="MainSearchButton" Content="Search" HorizontalAlignment="Left" Margin = "280,83,0,0" VerticalAlignment="Top" Width="44" Height="22" ToolTip="Left-Click to Search"/>
            <Button Name="MainResetButton" Content="Reset" HorizontalAlignment="Left" Margin = "328,83,0,0" VerticalAlignment="Top" Width="44" Height="22" ToolTip="Left-Click to Reset to Full List"/>
            <Button Name="MainGoButton" Content="Go!" HorizontalAlignment="Left" Margin = "376,83,0,0" VerticalAlignment="Top" Width="44" Height="22" ToolTip="Left-Click to Run or Open selection&#xD;&#xA;Right-Click to open KB"/>
            <Label Name="KBLabel1" Content="KB" HorizontalAlignment="Left" Margin="44,83,0,0" VerticalAlignment="Top" Foreground="White" FontWeight="Bold"/>
            <Label Name="KBLabel2" Content="KB" HorizontalAlignment="Left" Margin="420,83,0,0" VerticalAlignment="Top" Foreground="White" FontWeight="Bold"/>
            <Button Name="PasteFixesButton" Content="$([char]0x9D)" HorizontalAlignment="Left" Margin = "434,401,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings" ToolTip="Left-Click to Copy Ran Fixes to Clipboard for Pasting in Interactions"/>
            <Button Name="AdminExplorerButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin = "26,401,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings" ToolTip="Left-Click to Open a File Explorer Window to Launch Application as Service ID"/>
            <TabControl Name="TabForm" HorizontalAlignment="Stretch" Height="272" Margin = "10,114,10,0" VerticalAlignment="Top" Width="467">
                <TabItem Name="Clipboard" Header="Clipboard" ToolTip="A Programable Clipboard for Agents to Use">
                    <ScrollViewer Name="ClipBoardScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="ClipBoardGrid" Background="#FFE5E5E5">
                            <Button Name="ClipBoardButtonID" Content="Service ID" HorizontalAlignment="Left" Margin="4,6,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible" ToolTip="Copies your Service ID to the Clipboard"/>
                            <Button Name="ClipBoardButtonPWD" Content="Service PWD" HorizontalAlignment="Left" Margin="150,6,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible" ToolTip="Copies your Service PWD to the Clipboard"/>
                            <Button Name="ClipBoardButtonAdd" Content="Add/Remove Button" HorizontalAlignment="Left" Margin="296,6,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible" ToolTip="Left-Click to Add a New Button to the Clipboard&#xD;&#xA;Right-Click to Remove a Button from the Clipboard&#xD;&#xA;Note: Edit a Button by Right-Clicking the Button itself"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Name="Links" Header="Links" ToolTip="Links to Web Pages Agents use (Will prompt for Preferred ID the first time)">
                    <ScrollViewer Name="LinksScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="LinksGrid" Background="#FFE5E5E5">
                            <Label Name="LinksLabel1" Style="{DynamicResource NormalLabel}" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,2,0,0" VerticalAlignment="Top" Width="445" Height="28" Visibility="Visible" FontWeight="Bold" FontSize="14"/>
                            <Button Name="LinksButton1" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,30,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Name="Apps" Header="Apps" ToolTip="Local Applications that Agents use (Will prompt for Preferred ID the first time)">
                    <ScrollViewer Name="AppsScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="AppsGrid" Background="#FFE5E5E5">
                            <Label Name="AppsLabel1" Style="{DynamicResource NormalLabel}" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,2,0,0" VerticalAlignment="Top" Width="445" Height="28" Visibility="Visible" FontWeight="Bold" FontSize="14"/>
                            <Button Name="AppsButton1" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,30,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Name="Tools" Header="Tools" ToolTip="Collection of Tools that Agents use for troubleshooting">
                    <ScrollViewer Name="ToolsScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="ToolsGrid" Background="#FFE5E5E5">
                            <Label Name="ToolsLabel1" Style="{DynamicResource NormalLabel}" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,2,0,0" VerticalAlignment="Top" Width="445" Height="28" Visibility="Visible" FontWeight="Bold" FontSize="14"/>
                            <Button Name="ToolsButton1" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,30,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Name="General" Header="General Fixes" ToolTip="Collection of General Fixes for multiple applications">
                    <ScrollViewer Name="GeneralScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="GeneralGrid" Background="#FFE5E5E5">
                            <Label Name="GeneralLabel1" Style="{DynamicResource NormalLabel}" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,2,0,0" VerticalAlignment="Top" Width="445" Height="28" Visibility="Visible" FontWeight="Bold" FontSize="14"/>
                            <Button Name="GeneralButton1" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,30,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Name="Microsoft" Header="Microsoft Fixes" ToolTip="Collection of Microsoft Fixes for Windows, Office, Skype, IE, and More">
                    <ScrollViewer Name="MicrosoftScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="MicrosoftGrid" Background="#FFE5E5E5">
                            <Label Name="MicrosoftLabel1" Style="{DynamicResource NormalLabel}" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,2,0,0" VerticalAlignment="Top" Width="445" Height="28" Visibility="Visible" FontWeight="Bold" FontSize="14"/>
                            <Button Name="MicrosoftButton1" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,30,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
                <TabItem Name="Advanced" Header="Advanced" ToolTip="Collection of Advanced Fixes and Tools" Visibility="Hidden">
                    <ScrollViewer Name="AdvancedScrollBar" VerticalScrollBarVisibility="Visible">
                        <Grid Name="AdvancedGrid" Background="#FFE5E5E5">
                            <Label Name="AdvancedLabel1" Style="{DynamicResource NormalLabel}" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,2,0,0" VerticalAlignment="Top" Width="445" Height="28" Visibility="Visible" FontWeight="Bold" FontSize="14"/>
                            <Button Name="AdvancedButton1" Content="Not Assigned" HorizontalAlignment="Left" Margin="4,30,0,0" VerticalAlignment="Top" Width="145" Height="40" Visibility="Visible"/>
                        </Grid>
                    </ScrollViewer>
                </TabItem>
            </TabControl>
        </Grid>
        <Grid Name="Title_Grid" HorizontalAlignment="Center" Background="Transparent" Height="46" Margin = "0,2,-1,0" VerticalAlignment="Top" Width="430">
            <Label Name="MainMenuLabel" Content="Agent Toolbox" HorizontalAlignment="Center" Margin = "10,2,10,0" VerticalAlignment="Top" Height="42" Width="472" FontSize="20" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" ToolTip="Double Left-Click to Toggle Configuration options" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="LeftTopLine" Content="" HorizontalAlignment="Left" Height="1" Margin = "54,18,0,0" VerticalAlignment="Top" Width="60" BorderBrush="White" BorderThickness="0,2,0,0" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="LeftMidLine" Content="" HorizontalAlignment="Left" Height="1" Margin = "34,24,0,0" VerticalAlignment="Top" Width="80" BorderBrush="White" BorderThickness="0,1,0,0" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="LeftBottomLine" Content="" HorizontalAlignment="Left" Height="1" Margin = "54,30,0,0" VerticalAlignment="Top" Width="60" BorderBrush="White" BorderThickness="0,2,0,0" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="RightTopLine" Content="" HorizontalAlignment="Left" Height="1" Margin = "318,18,0,0" VerticalAlignment="Top" Width="60" BorderBrush="White" BorderThickness="0,2,0,0" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="RightMidLine" Content="" HorizontalAlignment="Left" Height="1" Margin = "318,24,0,0" VerticalAlignment="Top" Width="80" BorderBrush="White" BorderThickness="0,1,0,0" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="RightBottomLine" Content="" HorizontalAlignment="Left" Height="1" Margin = "318,30,0,0" VerticalAlignment="Top" Width="60" BorderBrush="White" BorderThickness="0,2,0,0" Foreground="White" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
        </Grid>
        <Grid Name="Theme_Grid" HorizontalAlignment="Center" Background="Transparent" Height="46" Margin = "0,2,-1,0" VerticalAlignment="Top" Width="420">
            <Label Name="ThemeLabelLeft" Content="Theme:" HorizontalAlignment="Left" Margin = "53,2,0,0" VerticalAlignment="Top" Foreground="White" Width="81" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" FontSize="18" Height="41" ToolTip="Double Left-Click to Hide Configuration options">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="ThemeLabelRight" Content="Or:" HorizontalAlignment="Left" Margin = "219,2,0,0" VerticalAlignment="Top" Foreground="White" Width="40" HorizontalContentAlignment="Right" VerticalContentAlignment="Center" FontSize="18" Height="41" ToolTip="Double Left-Click to Toggle Configuration options">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <ComboBox Name="ThemeComboBox" HorizontalAlignment="Left" Margin = "124,12,0,0" VerticalAlignment="Top" Width="100"/>
            <Button Name="ConfigButton" Content="Configuration" HorizontalAlignment="Left" Margin = "256,11,0,0" VerticalAlignment="Top" Width="100" Height="24"/>
        </Grid>
        <Grid Name="Restart_Grid" HorizontalAlignment="Center" Background="Transparent" Height="46" Margin = "0,2,-1,0" VerticalAlignment="Top" Width="430">
            <Label Name="RestartLabel" Content="Restarting..." HorizontalAlignment="Center" Margin = "10,2,10,0" VerticalAlignment="Top" Height="42" Width="472" FontSize="20" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" ToolTip="Double Left-Click to Toggle Configuration options" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
        </Grid>
        <Grid Name="MSG_Send_Grid" Background="Transparent">
            <Label Name="MSG_Send_ToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin="421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
            <Label Name="MSG_Send_MainLabel" HorizontalAlignment="Center" Margin="10,94,10,0" VerticalAlignment="Top" Height="50" Width="467" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="MSG_Send_MainTextblock" TextWrapping="WrapWithOverflow" Text="Enter the Message to Send below:" TextAlignment="Center"/>
            </Label>
            <TextBox Name="MSG_Send_Textbox" HorizontalAlignment="Left" Height="250" Margin="28,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="430" VerticalContentAlignment="Center" MaxLength="255" FontSize="26" TextAlignment="Center" AcceptsReturn="True"/>
            <Button Name="MSG_Send_Button" Content="Send Message" HorizontalAlignment="Left" Margin="182,401,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Search&#xD;&#xA;Right-Click to Bypass"/>
            <Button Name="MSG_Cancel_Button" Content="Cancel" HorizontalAlignment="Left" Margin="220,436,0,0" VerticalAlignment="Top" Width="52" Height="22" ToolTip="Left-Click to Search&#xA;Right-Click to Bypass" HorizontalContentAlignment="Center"/>
            <Label Name="MSG_Send_TitleLabel" HorizontalAlignment="Center" Margin="10,44,10,0" VerticalAlignment="Top" Height="50" Width="467" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="MSG_Send_TitleTextblock" TextWrapping="WrapWithOverflow" Text="Emergency Message System" TextAlignment="Center" FontSize="24"/>
            </Label>
        </Grid>
        <Grid Name="AddButton_Grid" Background="Transparent">
            <Label Name="AddButton_TitleLabel" HorizontalAlignment="Center" Margin="10,44,10,0" VerticalAlignment="Top" Height="50" Width="467" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_TitleTextblock" TextWrapping="WrapWithOverflow" Text="Add Clipboard Button" TextAlignment="Center" FontSize="24"/>
            </Label>
            <Label Name="AddButton_Position_Label" HorizontalAlignment="Center" Margin="64,84,268,0" VerticalAlignment="Top" Height="50" Width="155" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_Position_Textblock" TextWrapping="WrapWithOverflow" Text="Button Position:" TextAlignment="Center"/>
            </Label>
            <ComboBox Name="AddButton_Position_ComboBox" Height="23" HorizontalAlignment="Left" Margin="219,98,0,0" VerticalAlignment="Top" Width="212" ToolTip="Select the Entry for this Button to go AFTER" SelectedValuePath="Content"/>
            <Label Name="AddButton_Name_Label" HorizontalAlignment="Center" Margin="82,124,269,0" VerticalAlignment="Top" Height="50" Width="136" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_MainTextblock" TextWrapping="WrapWithOverflow" Text="Button Name:" TextAlignment="Center"/>
            </Label>
            <TextBox Name="AddButton_Name_Textbox" HorizontalAlignment="Left" Height="23" Margin="219,138,0,0" TextWrapping="Wrap" MaxLength="25" VerticalAlignment="Top" Width="212" VerticalContentAlignment="Center" TextAlignment="Left" ToolTip="Cannot be a duplicate of another Button"/>
            <Label Name="AddButton_TextColor_Label" HorizontalAlignment="Center" Margin="51,167,267,0" VerticalAlignment="Top" Height="50" Width="169" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_TextColor_Textblock" TextWrapping="WrapWithOverflow" Text="Button Text Color:" TextAlignment="Center"/>
            </Label>
            <ComboBox Name="AddButton_TextColor_ComboBox" HorizontalAlignment="Left" Margin="219,180,0,0" VerticalAlignment="Top" Width="212" Height="23" IsEditable="True" ToolTip="Optional Setting"/>
            <Label Name="AddButton_BackColor_Label" HorizontalAlignment="Center" Margin="17,208,234,0" VerticalAlignment="Top" Height="50" Width="236" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_BackColor_Textblock" TextWrapping="WrapWithOverflow" Text="Background Color:" TextAlignment="Center" Width="225"/>
            </Label>
            <ComboBox Name="AddButton_BackColor_ComboBox" HorizontalAlignment="Left" Margin="219,222,0,0" VerticalAlignment="Top" Width="212" Height="23" IsEditable="True" ToolTip="Optional Setting"/>
            <Label Name="AddButton_Text_Label" HorizontalAlignment="Center" Margin="28,250,47,0" VerticalAlignment="Top" Height="50" Width="412" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_Text_Textblock" TextWrapping="WrapWithOverflow" Text="Enter the Button Text:" TextAlignment="Center"/>
            </Label>
            <TextBox Name="AddButton_Text_Textbox" HorizontalAlignment="Left" Height="106" Margin="28,290,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="430" MaxLength="255" TextAlignment="Left" AcceptsReturn="True" FontSize="18" ToolTip="Text that will be copied to your Clipboard"/>
            <Label Name="AddButton_Warning_Label" HorizontalAlignment="Center" Margin="10,391,10,67" VerticalAlignment="Center" Height="29" Width="467" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Center">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="AddButton_Warning_Textblock" TextWrapping="WrapWithOverflow" Text="Note: Do not input sensitive or secure information" TextAlignment="Center" Width="447" FontSize="14" FontStyle="Italic"/>
            </Label>
            <Button Name="AddButton_Add_Button" Content="Add Button" HorizontalAlignment="Left" Margin="253,433,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Add Button"/>
            <Button Name="AddButton_Cancel_Button" Content="Cancel" HorizontalAlignment="Left" Margin="108,433,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Cancel" HorizontalContentAlignment="Center"/>
            <Label Name="AddButton_ToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin="421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
        </Grid>
        <Grid Name="EditButton_Grid" Background="Transparent" Visibility="Hidden">
            <Label Name="EditButton_TitleLabel" HorizontalAlignment="Center" Margin="10,44,10,0" VerticalAlignment="Top" Height="50" Width="467" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_TitleTextblock" TextWrapping="WrapWithOverflow" Text="Edit Clipboard Button" TextAlignment="Center" FontSize="24"/>
            </Label>
            <Label Name="EditButton_Position_Label" HorizontalAlignment="Center" Margin="64,84,268,0" VerticalAlignment="Top" Height="50" Width="155" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_Position_Textblock" TextWrapping="WrapWithOverflow" Text="Button Position:" TextAlignment="Center"/>
            </Label>
            <ComboBox Name="EditButton_Position_ComboBox" Height="23" HorizontalAlignment="Left" Margin="219,98,0,0" VerticalAlignment="Top" Width="212" ToolTip="Select the Entry for this Button to go AFTER"/>
            <Label Name="EditButton_Name_Label" HorizontalAlignment="Center" Margin="82,124,269,0" VerticalAlignment="Top" Height="50" Width="136" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_MainTextblock" TextWrapping="WrapWithOverflow" Text="Button Name:" TextAlignment="Center"/>
            </Label>
            <TextBox Name="EditButton_Name_Textbox" HorizontalAlignment="Left" Height="23" Margin="219,138,0,0" TextWrapping="Wrap" MaxLength="25" VerticalAlignment="Top" Width="212" VerticalContentAlignment="Center" TextAlignment="Left" ToolTip="Cannot be a duplicate of another Button"/>
            <Label Name="EditButton_TextColor_Label" HorizontalAlignment="Center" Margin="51,167,267,0" VerticalAlignment="Top" Height="50" Width="169" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_TextColor_Textblock" TextWrapping="WrapWithOverflow" Text="Button Text Color:" TextAlignment="Center"/>
            </Label>
            <ComboBox Name="EditButton_TextColor_ComboBox" HorizontalAlignment="Left" Margin="219,180,0,0" VerticalAlignment="Top" Width="212" Height="23" IsEditable="True" ToolTip="Optional Setting"/>
            <Label Name="EditButton_BackColor_Label" HorizontalAlignment="Center" Margin="17,208,234,0" VerticalAlignment="Top" Height="50" Width="236" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Right">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_BackColor_Textblock" TextWrapping="WrapWithOverflow" Text="Background Color:" TextAlignment="Center" Width="225"/>
            </Label>
            <ComboBox Name="EditButton_BackColor_ComboBox" HorizontalAlignment="Left" Margin="219,222,0,0" VerticalAlignment="Top" Width="212" Height="23" IsEditable="True" ToolTip="Optional Setting"/>
            <Label Name="EditButton_Text_Label" HorizontalAlignment="Center" Margin="28,250,47,0" VerticalAlignment="Top" Height="50" Width="412" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_Text_Textblock" TextWrapping="WrapWithOverflow" Text="Enter the Button Text:" TextAlignment="Center"/>
            </Label>
            <TextBox Name="EditButton_Text_Textbox" HorizontalAlignment="Left" Height="106" Margin="28,290,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="430" MaxLength="255" TextAlignment="Left" AcceptsReturn="True" FontSize="18" ToolTip="Text that will be copied to your Clipboard"/>
            <Label Name="EditButton_Warning_Label" HorizontalAlignment="Center" Margin="10,391,10,67" VerticalAlignment="Center" Height="29" Width="467" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0" HorizontalContentAlignment="Center">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="EditButton_Warning_Textblock" TextWrapping="WrapWithOverflow" Text="Note: Do not input sensitive or secure information" TextAlignment="Center" Width="447" FontSize="14" FontStyle="Italic"/>
            </Label>            
            <Button Name="EditButton_Edit_Button" Content="Edit Button" HorizontalAlignment="Left" Margin="253,433,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Add Button"/>
            <Button Name="EditButton_Cancel_Button" Content="Cancel" HorizontalAlignment="Left" Margin="108,433,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Cancel" HorizontalContentAlignment="Center"/>
            <Label Name="EditButton_ToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin="421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
        </Grid>
        <Grid Name="RemoveButton_Grid" Background="Transparent">
            <Label Name="RemoveButton_TitleLabel" HorizontalAlignment="Center" Margin="10,44,10,0" VerticalAlignment="Top" Height="50" Width="467" FontSize="18" FontWeight="Bold" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="RemoveButton_TitleTextblock" TextWrapping="WrapWithOverflow" Text="Remove Clipboard Button" TextAlignment="Center" FontSize="24"/>
            </Label>
            <Label Name="RemoveButton_Name_Label" HorizontalAlignment="Center" Margin="114,197,114,0" VerticalAlignment="Top" Height="50" Width="259" FontSize="18" FontWeight="Bold" VerticalContentAlignment="Center" Foreground="White" Background="Transparent" BorderThickness="0">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
                <TextBlock Name="RemoveButton_MainTextblock" TextWrapping="WrapWithOverflow" Text="Select Button to Remove:" TextAlignment="Center" Width="251"/>
            </Label>
            <ComboBox Name="RemoveButton_ButtonName_ComboBox" HorizontalAlignment="Left" Margin="137,240,0,0" VerticalAlignment="Top" Width="212" Height="23"/>
            <Button Name="RemoveButton_Remove_Button" Content="Remove Button" HorizontalAlignment="Left" Margin="253,433,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Remove Button"/>
            <Button Name="RemoveButton_Cancel_Button" Content="Cancel" HorizontalAlignment="Left" Margin="108,433,0,0" VerticalAlignment="Top" Width="127" Height="31" ToolTip="Left-Click to Cancel" HorizontalContentAlignment="Center"/>
            <Label Name="RemoveButton_ToolboxVersion" Content="v$Version" HorizontalAlignment="Left" Margin="421,454,0,0" VerticalAlignment="Top" Width="64" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <Label.Effect>
                    <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                </Label.Effect>
            </Label>
        </Grid>
        <Button Name="HelpButton" Style="{DynamicResource ButtonStyleFlat}" Padding="0" HorizontalAlignment="Center" Height="13" Margin = "477,3,2,0" Content="$([char]0x73)" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="10" Background="Transparent" Foreground="White" FontSize="10" BorderThickness="0" Focusable="False" FontFamily="Webdings" ToolTip="Left-Click to Open Help Documentation"/>
        <Button Name="ExitButton" Style="{DynamicResource ButtonStyleFlat}" Padding="0" HorizontalAlignment="Center" Height="13" Margin = "477,2,2,0" Content="$([char]0x72)" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="10" Background="Transparent" Foreground="White" FontSize="11" BorderThickness="0" Focusable="False" FontFamily="Webdings" ToolTip="Left-Click to Exit"/>
        <Button Name="MinimizeButton" Style="{DynamicResource ButtonStyleFlat}" Padding="0" HorizontalAlignment="Center" Height="13" Margin = "465,2,13,0" Content="$([char]0x30)" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="9" Background="Transparent" Foreground="White" FontSize="12" BorderThickness="0" Focusable="False" FontFamily="Webdings" ToolTip="Left-Click to Minimize"/>
    </Grid>
</Window>
"@
[xml]$XML_INFO = @"
<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" ResizeMode="CanMinimize" Name="Info_Window"
    Title="Workstation Information" Height="848" Width="324" WindowStyle="SingleBorderWindow">
    <Window.Resources>
        <Style TargetType="ToolTip">
            <Setter Property="ContentTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel>
                            <TextBlock Text="{Binding}"
                             MaxWidth="300"
                             TextWrapping='Wrap' />
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            <Setter Property="TextTrimming" Value="WordEllipsis"/>
        </Style>
        <Style TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleFlat" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ScrollViewerTransparentTemplate" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Grid.Row="1"/>
                <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Opacity="0.7"/>
                <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Opacity="0.7"/>
            </Grid>
        </ControlTemplate>
    </Window.Resources>
    <Grid Name="Info_Form" Background="Transparent">
        <Grid Name="Info_Start" Background="Transparent">
            <Label Name="InfoStartLabel" Content="Please Connect to a WSID" HorizontalAlignment="Center" VerticalAlignment="Center" MaxWidth="272" MaxHeight="39" Foreground="White" FontWeight="Bold" FontSize="18" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
        </Grid>
        <Grid Name="Info_List" Background="Transparent">
            <Grid Name="Info_General" Background="Transparent">
                <Label Name="InfoWSIDLabel" HorizontalAlignment="Left" Height="40" Margin = "16,28,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the WSID to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoWSIDTextblock" TextWrapping="WrapWithOverflow" Text="WSID: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoIPLabel" HorizontalAlignment="Left" Height="40" Margin = "16,57,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the IP Address to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoIPTextblock" TextWrapping="WrapWithOverflow" Text="IP: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoMANUFACTURERLabel" HorizontalAlignment="Left" Height="40" Margin = "16,86,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Make to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoMAKETextblock" TextWrapping="WrapWithOverflow" Text="MAKE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoMODELLabel" HorizontalAlignment="Left" Height="40" Margin = "16,115,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Model to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoMODELTextblock" TextWrapping="WrapWithOverflow" Text="MODEL: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoSERIALLabel" HorizontalAlignment="Left" Height="40" Margin = "16,144,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Serial to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoSERIALTextblock" TextWrapping="WrapWithOverflow" Text="SERIAL: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoCHASSISLabel" HorizontalAlignment="Left" Height="40" Margin = "16,173,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Chassis to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoCHASSISTextblock" TextWrapping="WrapWithOverflow" Text="CHASSIS: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoDOCKLabel" HorizontalAlignment="Left" Height="40" Margin = "16,202,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Dock to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoDOCKTextblock" TextWrapping="WrapWithOverflow" Text="DOCK: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoMEMORYLabel" HorizontalAlignment="Left" Height="40" Margin = "16,231,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Memory to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoMEMORYTextblock" TextWrapping="WrapWithOverflow" Text="MEMORY: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoOSLabel" HorizontalAlignment="Left" Height="40" Margin = "16,260,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the OS to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoOSTextblock" TextWrapping="WrapWithOverflow" Text="OS: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoRELEASEIDLabel" HorizontalAlignment="Left" Height="40" Margin = "16,289,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Version to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoRELEASEIDTextblock" TextWrapping="WrapWithOverflow" Text="VERSION: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoTZLabel" HorizontalAlignment="Left" Height="40" Margin = "16,318,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the User's Time Zone to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoTZTextblock" TextWrapping="WrapWithOverflow" Text="TIMEZONE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoDATETIMELabel" HorizontalAlignment="Left" Height="40" Margin = "16,347,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the User's Date and Time to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoDATETIMETextblock" TextWrapping="WrapWithOverflow" Text="DATETIME: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoPWDEXPIRESLabel" HorizontalAlignment="Left" Height="40" Margin = "16,376,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the PWD Expire Date to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoPWDEXPIRESTextblock" TextWrapping="WrapWithOverflow" Text="PWD: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoUSERIDLabel" HorizontalAlignment="Left" Height="40" Margin = "16,405,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the User's ID to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoUSERIDTextblock" TextWrapping="WrapWithOverflow" Text="USERID: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoFULLNAMELabel" HorizontalAlignment="Left" Height="40" Margin = "16,434,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the User's Name to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoFULLNAMETextblock" TextWrapping="WrapWithOverflow" Text="NAME: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoEMAILADDRESSLabel" HorizontalAlignment="Left" Height="40" Margin = "16,463,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Email Address to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoEMAILADDRESSTextblock" TextWrapping="WrapWithOverflow" Text="EMAIL: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoPHONELabel" HorizontalAlignment="Left" Height="40" Margin = "16,492,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Phone Number to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoPHONETextblock" TextWrapping="WrapWithOverflow" Text="PHONE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoMOBILELabel" HorizontalAlignment="Left" Height="40" Margin = "16,521,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Mobile to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoMOBILETextblock" TextWrapping="WrapWithOverflow" Text="MOBILE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoMANAGERNAMELabel" HorizontalAlignment="Left" Height="40" Margin = "16,550,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Manager Name to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoMANAGERNAMETextblock" TextWrapping="WrapWithOverflow" Text="MANAGER: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoEMPLOYEELabel" HorizontalAlignment="Left" Height="40" Margin = "16,579,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Employee Type to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoEMPLOYEETextblock" TextWrapping="WrapWithOverflow" Text="TYPE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoJOBTITLELabel" HorizontalAlignment="Left" Height="40" Margin = "16,608,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Job Title to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoJOBTITLETextblock" TextWrapping="WrapWithOverflow" Text="TITLE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoLOCATIONLabel" HorizontalAlignment="Left" Height="40" Margin = "16,637,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Location to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoLOCATIONTextblock" TextWrapping="WrapWithOverflow" Text="LOCATION: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoDEPTNAMELabel" HorizontalAlignment="Left" Height="40" Margin = "16,666,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Dept Name to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoDEPTNAMETextblock" TextWrapping="WrapWithOverflow" Text="DEPT: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoDIVISIONLabel" HorizontalAlignment="Left" Height="40" Margin = "16,695,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Division to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoDIVISIONTextblock" TextWrapping="WrapWithOverflow" Text="DIVISION: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoBUSINESSLINELabel" HorizontalAlignment="Left" Height="40" Margin = "16,724,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Business Line to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoBUSINESSLINETextblock" TextWrapping="WrapWithOverflow" Text="BL: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoENTERPRISEROLELabel" HorizontalAlignment="Left" Height="40" Margin = "16,753,0,0" VerticalAlignment="Top" Width="292" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Enterprise Role to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                    <TextBlock Name="InfoENTERPRISEROLETextblock" TextWrapping="WrapWithOverflow" Text="ENTROLE: Absent" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Button Name="UserPictureButton" Content="$([char]0xAD)" HorizontalAlignment="Left" Margin="283,414,0,0" VerticalAlignment="Top" Width="25" Height="25" FontFamily="Webdings" IsEnabled="False" FontSize="16"/>
            </Grid>
            <Grid Name="Info_Advanced" Background="Transparent" Visibility="Hidden">
                <Label Name="InfoCPUINFOLabel" HorizontalAlignment="Left" Height="40" Margin = "10,35,0,0" VerticalAlignment="Top" Width="298" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="CPU Information" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoCPUINFOTextblock" TextWrapping="WrapWithOverflow" Text="CPU INFO" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True" TextDecorations="Underline"/>
                </Label>
                <Label Name="InfoCPUDATALabel" HorizontalAlignment="Left" Height="45" Margin = "14,63,0,0" VerticalAlignment="Top" Width="290" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the CPU Information to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoCPUDATATextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoHDDINFOLabel" HorizontalAlignment="Left" Height="40" Margin = "10,111,0,0" VerticalAlignment="Top" Width="298" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Hard Disk Information" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoHDDINFOTextblock" TextWrapping="WrapWithOverflow" Text="HDD INFO" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True" TextDecorations="Underline"/>
                </Label>
                <Label Name="InfoHDDDATALabel" HorizontalAlignment="Left" Height="26" Margin = "0,141,0,0" VerticalAlignment="Top" Width="318" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the HDD Information to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoHDDDATATextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoVERSIONINFOLabel" HorizontalAlignment="Left" Height="40" Margin = "10,179,0,0" VerticalAlignment="Top" Width="298" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Windows Version History" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoVERSIONINFOTextblock" TextWrapping="WrapWithOverflow" Text="VERSION HISTORY" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True" TextDecorations="Underline"/>
                </Label>
                <Label Name="InfoVERSIONDATALabel" HorizontalAlignment="Left" Height="140" Margin = "0,207,0,0" VerticalAlignment="Top" Width="318" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Version History to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <ScrollViewer Name="VersionScroller" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Width="195" Template="{DynamicResource ScrollViewerTransparentTemplate}">
                        <TextBlock Name="InfoVERSIONDATATextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                    </ScrollViewer>
                </Label>
                <Label Name="InfoNETINFOLabel" HorizontalAlignment="Left" Height="40" Margin = "10,355,0,0" VerticalAlignment="Top" Width="298" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Network Adapter Information" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoNETINFOTextblock" TextWrapping="WrapWithOverflow" Text="NETWORK ADAPTERS" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True" TextDecorations="Underline"/>
                </Label>
                <Label Name="InfoNETDATALabel" HorizontalAlignment="Left" Height="83" Margin = "10,383,0,0" VerticalAlignment="Top" Width="294" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the Network Information to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <ScrollViewer Name="NetScroller" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Width="190" Template="{DynamicResource ScrollViewerTransparentTemplate}">
                        <TextBlock Name="InfoNETDATATextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                    </ScrollViewer>
                </Label>
                <Label Name="InfoSCCMINFOLabel" HorizontalAlignment="Left" Height="40" Margin = "10,480,0,0" VerticalAlignment="Top" Width="298" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="SCCM Client Information" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Center">
                    <TextBlock Name="InfoSCCMINFOTextblock" TextWrapping="WrapWithOverflow" Text="SCCM STATUS" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True" TextDecorations="Underline"/>
                </Label>
                <Label Name="InfoCCMCLIENTVERSIONLabel" HorizontalAlignment="Left" Height="28" Margin = "46,512,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the CCM Version to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoCCMCLIENTVERSIONTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoCCMSETUPSTATUSLabel" HorizontalAlignment="Left" Height="28" Margin = "46,540,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the CCM Setup State to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoCCMSETUPSTATUSTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoCCMSTATEMSGLabel" HorizontalAlignment="Left" Height="28" Margin = "46,568,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the CCM State to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoCCMSTATEMSGTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoCCMMODELabel" HorizontalAlignment="Left" Height="28" Margin = "46,596,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the CCM Mode to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoCCMMODETextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoCCMEXECSTATUSLabel" HorizontalAlignment="Left" Height="28" Margin = "46,624,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the CCMEXEC Status to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoCCMEXECSTATUSTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoBITSSTATUSLabel" HorizontalAlignment="Left" Height="28" Margin = "46,652,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the BITS Status to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoBITSSTATUSTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoWUAUSERVSTATUSLabel" HorizontalAlignment="Left" Height="28" Margin = "46,680,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the WUAU Status to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoWUAUSERVSTATUSTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoWINMGMTSTATUSLabel" HorizontalAlignment="Left" Height="28" Margin = "46,708,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the WINMGMT Status to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoWINMGMTSTATUSTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
                <Label Name="InfoRREGISTRYSTATUSLabel" HorizontalAlignment="Left" Height="28" Margin = "46,736,0,0" VerticalAlignment="Top" Width="231" Background="Transparent" BorderThickness="0" Foreground="White" FontSize="14" FontWeight="Bold" VerticalContentAlignment="Center" ToolTip="Left-Click to copy the REMREG Status to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True" HorizontalContentAlignment="Left">
                    <TextBlock Name="InfoRREGISTRYSTATUSTextblock" TextWrapping="WrapWithOverflow" Text="BLANK" TextAlignment="Left" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
                </Label>
            </Grid>
        </Grid>
        <Label Name="InfoToolboxVersion" Content="Toolbox Version: $Version" HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="159" Foreground="White" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" UseLayoutRounding="True" SnapsToDevicePixels="True" Background="Transparent" Margin = "149,0,10,12" Height="20"/>
        <Label Name="InfoLabel" Content="Workstation Information" HorizontalAlignment="Center" VerticalAlignment="Top" Width="298" Height="25" Foreground="White" FontWeight="Bold" FontSize="16" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" UseLayoutRounding="True" SnapsToDevicePixels="True" Background="Transparent" Margin = "10,6,10,0"/>
        <Button Name="InfoExitButton" Style="{DynamicResource ButtonStyleFlat}" Padding="0" HorizontalAlignment="Right" Height="13" Content="$([char]0x72)" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="10" Background="Transparent" Foreground="White" FontSize="11" BorderThickness="0" Focusable="False" FontFamily="Webdings" ToolTip="Left-Click to Exit" UseLayoutRounding="True" SnapsToDevicePixels="True"/>
        <Button Name="InfoSwitchButton" Content="Advanced" HorizontalAlignment="Left" Margin="22,789,0,0" VerticalAlignment="Top" Width="133"/>
    </Grid>
</Window>
"@
[xml]$XML_MAP = @"
<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" ResizeMode="CanMinimize" Name="Map_Window"
    Title="Drive Mappings" Height="331" Width="493" WindowStyle="SingleBorderWindow">
    <Window.Resources>
        <Style TargetType="ToolTip">
          <Setter Property="ContentTemplate">
            <Setter.Value>
              <DataTemplate>
                <StackPanel>
                  <TextBlock Text="{Binding}"
                             MaxWidth="300"
                             TextWrapping='Wrap' />
                </StackPanel>
              </DataTemplate>
            </Setter.Value>
          </Setter>
        </Style>        
        <Style TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ButtonStyleFlat" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#80DADADA"/>
                                <Setter Property="Background" TargetName="Bd" Value="#210080FF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="BorderBrush" TargetName="Bd" Value="#90006CD9"/>
                                <Setter Property="Background" TargetName="Bd" Value="#400080FF"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid Name="Map_Form" Background="Transparent">
        <Grid Name="Map_Start" Background="Transparent">
            <Label Name="MapStartLabel" Content="Please Connect to a WSID with a User Present" HorizontalAlignment="Center" VerticalAlignment="Center" Width="467" Foreground="White" FontWeight="Bold" FontSize="18" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Height="30"/>
        </Grid>
        <Grid Name="Map_Info" Background="Transparent">
            <Label Name="MapUserLabel" HorizontalAlignment="Left" Height="23" Margin = "10,36,0,0" VerticalAlignment="Top" Width="215" Background="Transparent" Foreground="White" BorderThickness="0" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" FontWeight="Bold" FontSize="14" ToolTip="Left-Click to copy the User's Name to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <TextBlock Name="MapUserTextblock" TextWrapping="WrapWithOverflow" Text="User: Absent" TextAlignment="Center"/>
            </Label>
            <Label Name="MapTimeLabel" HorizontalAlignment="Left" Height="23" Margin = "244,36,0,0" VerticalAlignment="Top" Width="233" Background="Transparent" Foreground="White" BorderThickness="0" FontWeight="Bold" FontSize="14" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" ToolTip="Timestamp of when this data was collected by the server (Left-Click to Copy)" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <TextBlock Name="MapTimeTextblock" TextWrapping="WrapWithOverflow" Text="Timestamp: Absent" TextAlignment="Center"/>
            </Label>
            <Label Name="MapRoleLabel" HorizontalAlignment="Left" Height="23" Margin = "10,82,0,0" VerticalAlignment="Top" Width="467" Background="Transparent" Foreground="White" BorderThickness="0" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" FontWeight="Bold" FontSize="14" ToolTip="Left-Click to copy the Enterprise Role to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <TextBlock Name="MapRoleTextblock" TextWrapping="WrapWithOverflow" Text="Role: Absent" TextAlignment="Center"/>
            </Label>
            <Label Name="MapServerLabel" HorizontalAlignment="Left" Height="23" Margin = "10,59,0,0" VerticalAlignment="Top" Width="251" Background="Transparent" Foreground="White" BorderThickness="0"  HorizontalContentAlignment="Left" VerticalContentAlignment="Center" FontWeight="Bold" FontSize="14" ToolTip="Left-Click to copy the Server Name to your clipboard" UseLayoutRounding="True" SnapsToDevicePixels="True">
                <TextBlock Name="MapServerTextblock" TextWrapping="WrapWithOverflow" Text="Server: Absent" TextAlignment="Center"/>
            </Label>
            <TextBox Name="MapDrivesTextbox" HorizontalAlignment="Left" Margin = "10,130,0,0" TextWrapping="Wrap" Width="468" Foreground="Black" HorizontalContentAlignment="Left" VerticalContentAlignment="Top" FontSize="12" IsReadOnly="True" Height="161" VerticalAlignment="Top" ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Auto"/>
            <Button Name="MapScriptButton" Style="{DynamicResource ButtonStyleFlat}" HorizontalAlignment="Left" Height="23" Margin = "244,59,0,0" Content="Script: Absent" VerticalAlignment="Top" Width="233" Background="Transparent" Foreground="White" BorderThickness="0" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" FontWeight="Bold" FontSize="14" Focusable="False" ToolTip="Left-Click to copy the Site Code to your clipboard"/>
            <Label Name="MapDrivesLabel" Content="Mappings:" HorizontalAlignment="Left" Margin = "17,103,0,0" VerticalAlignment="Top" Width="251" Height="28" Foreground="White" FontWeight="Bold" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" FontSize="12"/>
        </Grid>
        <Label Name="MapTitleLabel" Content="Drive Mappings for Selected User" HorizontalAlignment="Left" Margin = "10,5,0,0" VerticalAlignment="Top" Width="467" Foreground="White" FontWeight="Bold" FontSize="18" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Height="30"/>
        <Button Name="MapExitButton" Style="{DynamicResource ButtonStyleFlat}" Padding="0" HorizontalAlignment="Right" Height="13" Content="$([char]0x72)" VerticalAlignment="Top" HorizontalContentAlignment="Center" VerticalContentAlignment="Top" Width="10" Background="Transparent" Foreground="White" FontSize="11" BorderThickness="0" Focusable="False" FontFamily="Webdings" ToolTip="Left-Click to Exit" Margin="0,2,2,0"/>
    </Grid>
</Window>
"@
[xml]$XML_ESC = @"
<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Escalation_Forms"
        Name="Esc_Window" Title="Escalation Forms" Background="#FF00438F" Height="825" Width="858" ResizeMode="CanResizeWithGrip" MaxHeight="825" MaxWidth="858" MinHeight="252" MinWidth="858">
    <Window.Resources>
        <Style TargetType="ToolTip">
          <Setter Property="ContentTemplate">
            <Setter.Value>
              <DataTemplate>
                <StackPanel>
                  <TextBlock Text="{Binding}"
                             MaxWidth="300"
                             TextWrapping='Wrap' />
                </StackPanel>
              </DataTemplate>
            </Setter.Value>
          </Setter>
        </Style>        
        <Style x:Key="LabelWithShadow" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="3"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border.CacheMode>
                                <BitmapCache EnableClearType="True" RenderAtScale="1" SnapsToDevicePixels="True"/>
                            </Border.CacheMode>
                            <Border.Effect>
                                <DropShadowEffect ShadowDepth="2" BlurRadius="0"/>
                            </Border.Effect>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RoundCornerRed" TargetType="{x:Type Button}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <Border x:Name="border" CornerRadius="8" BorderBrush="White" BorderThickness="2" Background="#FFC11920">
                                <ContentPresenter HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    TextElement.FontWeight="Bold">
                                </ContentPresenter>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border">
                                    <Setter.Value>
                                        <RadialGradientBrush GradientOrigin="0.496,1.052">
                                            <RadialGradientBrush.RelativeTransform>
                                                <TransformGroup>
                                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                    <TranslateTransform X="0.02" Y="0.3"/>
                                                </TransformGroup>
                                            </RadialGradientBrush.RelativeTransform>
                                            <GradientStop Color="#FFE8A7AA" Offset="1"/>
                                            <GradientStop Color="Red" Offset="0.3"/>
                                        </RadialGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF447FC1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RoundCornerGreen" TargetType="{x:Type Button}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <Border x:Name="border" CornerRadius="8" BorderBrush="White" BorderThickness="2" Background="Green">
                                <ContentPresenter HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    TextElement.FontWeight="Bold">
                                </ContentPresenter>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" TargetName="border">
                                    <Setter.Value>
                                        <RadialGradientBrush GradientOrigin="0.496,1.052">
                                            <RadialGradientBrush.RelativeTransform>
                                                <TransformGroup>
                                                    <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                    <TranslateTransform X="0.02" Y="0.3"/>
                                                </TransformGroup>
                                            </RadialGradientBrush.RelativeTransform>
                                            <GradientStop Color="#FFA7E8BD" Offset="1"/>
                                            <GradientStop Color="#FF127C36" Offset="0.3"/>
                                        </RadialGradientBrush>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF447FC1"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <ScrollViewer Name="EscScroller" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
        <Grid Name="Esc_Grid">
            <TabControl Name="Esc02tabControl" HorizontalAlignment="Left" Height="537" Margin="10,194,0,0" VerticalAlignment="Top" Width="822">
                <TabItem Name="Esc02GeneralTab" Header="General">
                    <Grid Background="#FFE5E5E5">
                        <!-- START GENERAL - GENERAL SECTION -->
                        <Grid Name="General_Grid">
                            <TextBox Name="Esc02IncDescTextbox" HorizontalAlignment="Left" Height="72" Margin="10,25,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="425" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc02IncDescLabel" Content="Incident Description:" HorizontalAlignment="Left" Margin="10,2,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Incident Description (What is the user trying to accomplish? What is the problem?)"/>
                            <Label Name="Esc02ErrorMessageLabel" Content="Is User Getting an Error Message:" HorizontalAlignment="Left" Margin="440,2,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Error Message (Exact text of error message)"/>
                            <TextBox Name="Esc02ErrorMessageTextbox" HorizontalAlignment="Left" Height="72" Margin="440,25,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="366" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc02TroubleLabel" Content="Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="10,94,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Troubleshooting Steps Completed (What steps were taken in an attempt to resolve the issue?)"/>
                            <TextBox Name="Esc02TroubleTextBox" HorizontalAlignment="Left" Height="72" Margin="10,117,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc02MachineLabel" Content="Machine Name:" HorizontalAlignment="Left" Margin="10,187,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Machine Name (Verify before escalating, ex. wd-oh15ds360303, required for all non-FCR incidents)"/>
                            <TextBox Name="Esc02MachineTextBox" HorizontalAlignment="Left" Height="22" Margin="10,210,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="142" VerticalContentAlignment="Center"/>
                            <Button Name="Esc02WSIDPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="157,210,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc02IDFLabel" Content="Server:" HorizontalAlignment="Left" Margin="199,187,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Server (Verify before escalating, ex: SDSMN14H7A1H001, required for imaged workstations only)"/>
                            <TextBox Name="Esc02IDFTextBox" HorizontalAlignment="Left" Height="22" Margin="199,210,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="142" VerticalContentAlignment="Center"/>
                            <Button Name="Esc02IDFPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="346,210,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc02AssigneeLabel" Content="Specific Assignee Group for Escalation:" Foreground="Red" HorizontalAlignment="Left" Margin="408,187,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Use if customer provides name of Assignee Group; however, Agent should be able to determine Assignee Group without prompting Customer. Do not use this area if customer does not provide information."/>
                            <ComboBox Name="Esc02AssigneeComboBox" HorizontalAlignment="Left" Height="22" Margin="408,210,0,0" VerticalAlignment="Top" Width="229" VerticalContentAlignment="Center" IsEditable="True"/>
                            <Label Name="Esc02DateLabel" Content="Date Issue Began:" HorizontalAlignment="Left" Margin="651,187,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Date Issue Began."/>
                            <TextBox Name="Esc02DateTextBox" HorizontalAlignment="Left" Height="22" Margin="651,210,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="120" VerticalContentAlignment="Center"/>
                            <Button Name="Esc02DateBeganButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="776,210,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings" FontSize="11"/>
                            <Label Name="Esc02ServiceRecLabel" Content="Service Recipient's Work Hours:" HorizontalAlignment="Left" Margin="10,230,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc02ServiceRecTextbox" HorizontalAlignment="Left" Height="23" Margin="10,253,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="189" VerticalContentAlignment="Center"/>
                            <StackPanel Name="Esc02TimeZoneStackPanel" HorizontalAlignment="Left" Height="36" Margin="254,247,0,0" VerticalAlignment="Top" Width="408" Orientation="Horizontal">
                                <RadioButton Name="Esc02ETRadioButton" Content="ET  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02CTRadioButton" Content="CT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02MTRadioButton" Content="MT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02PTRadioButton" Content="PT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02ITRadioButton" Content="IT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02OtherTZRadioButton" Content="Other Zone " Foreground="#FF31BF31" FontWeight="Bold" VerticalAlignment="Center"/>
                                <TextBox Name="Esc02OtherTZTextBox" TextWrapping="Wrap" Width="70" Height="22" Margin="0,7" VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                            </StackPanel>
                            <Label Name="Esc02TimeZoneLabel" Content="Time Zone:" HorizontalAlignment="Left" Margin="244,230,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"  ToolTip="The Time Zone the caller is in.`n`n - ET = Eastern Time Zone`n - CT = Central Time Zone`n - MT = Mountain Time Zone`n - PT = Pacific Time Zone`n - IT = International Time Zone"/>
                            <Label Name="Esc02OOClabel" Content="Is the Service Recipient Located out of the Country:" HorizontalAlignment="Left" Margin="10,276,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="Esc02OocStackPanel" HorizontalAlignment="Left" Height="24" Margin="310,278,0,0" VerticalAlignment="Top" Width="287" Orientation="Horizontal">
                                <RadioButton Name="Esc02OocYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc02OocNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <Label Name="Esc02AltNameLabel" Content="Alt. Contact Name:" HorizontalAlignment="Left" Margin="10,298,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Alternate Contact Name (Required for Priority 1 - 2, hardware and telecom issues, example: Cell Phone, Co-worker, Manager, No Voicemail."/>
                            <TextBox Name="Esc02AltNameTextBox" HorizontalAlignment="Left" Height="23" Margin="10,320,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="142" VerticalContentAlignment="Center"/>
                            <Label Name="Esc02AltNumberLabel" Content="Alt. Contact Phone:" HorizontalAlignment="Left" Margin="199,298,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Alternate Contact Phone (Required for Priority 1 - 2, hardware and telecom issues, example: Cell Phone, Co-worker, Manager, No Voicemail). Also include country code for International Callers."/>
                            <TextBox Name="Esc02AltNumberTextBox" HorizontalAlignment="Left" Height="23" Margin="199,320,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="142" VerticalContentAlignment="Center"/>
                            <StackPanel Name="Esc02AltContactStackPanel" HorizontalAlignment="Left" Height="23" Margin="346,320,0,0" VerticalAlignment="Top" Width="291" Orientation="Horizontal">
                                <RadioButton Name="Esc02AltWorkRadioButton" Content="Work  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02AltCellRadioButton" Content="Cell  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02AltHomeRadioButton" Content="Home  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc02IncreasedPrilabel" Content="Customer Requested Increased Priority:" HorizontalAlignment="Left" Margin="10,347,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Customer Requested Increased Priority (Only Complete if requested by Customer)."/>
                            <StackPanel Name="Esc02IncPriStackPanel" HorizontalAlignment="Left" Height="26" Margin="254,347,0,0" VerticalAlignment="Top" Width="181" Orientation="Horizontal">
                                <RadioButton Name="Esc02IncPriYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02IncPriNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02IncPriNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc02DegOutlabel" Content="Degree of Outage:" HorizontalAlignment="Left" Margin="10,373,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Degree of Outage."/>
                            <StackPanel Name="Esc02DegOutStackPanel" HorizontalAlignment="Left" Height="26" Margin="254,373,0,0" VerticalAlignment="Top" Width="343" Orientation="Horizontal">
                                <RadioButton Name="Esc02DegOutCDRadioButton" Content="Completely Down  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02DegOutSlowRadioButton" Content="Slowness  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02DegOutSporRadioButton" Content="Sporadic " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02DegOutNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc02NumberUserslabel" Content="Number of Users Impacted:" HorizontalAlignment="Left" Margin="10,398,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Number of Users Impacted (If Other, Enter Number)."/>
                            <StackPanel Name="Esc02NumberUsersStackPanel" HorizontalAlignment="Left" Height="40" Margin="254,392,0,0" VerticalAlignment="Top" Width="408" Orientation="Horizontal">
                                <RadioButton Name="Esc02NumberUsers1RadioButton" Content="1  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02NumberUsers5RadioButton" Content="5  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02NumberUsers50RadioButton" Content="50+  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02NumberUsers100RadioButton" Content="100+  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02NumberUsers500RadioButton" Content="500+  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02NumberUsersOtherRadioButton" Content="Other " Foreground="#FF31BF31" FontWeight="Bold" VerticalAlignment="Center"/>
                                <TextBox Name="Esc02NumberUsersOtherTextBox" TextWrapping="Wrap" Width="78" Height="22" Margin="0,7" VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                            </StackPanel>
                            <Label Name="Esc02CritIssuelabel" Content="Is this a Critical Issue Based on &#xD;&#xA;Brand Impact and/or Dollar Impact &#xD;&#xA;or Time Sensitive:" HorizontalAlignment="Left" Margin="10,421,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" Height="58" Width="218" ToolTip="Critical Issue (Bank Image/Reputation) (If Yes, Brief Description)."/>
                            <StackPanel Name="Esc02CritIssueStackPanel" HorizontalAlignment="Left" Height="22" Margin="228,454,0,0" VerticalAlignment="Top" Width="161" Orientation="Horizontal">
                                <RadioButton Name="Esc02CritIssueYesRadioButton" Content="Yes  " Foreground="#FF31BF31" VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc02CritIssueNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc02WorkAroundlabel" Content="Work Around:" HorizontalAlignment="Left" Margin="10,479,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Workaround (able to use another PC/Printer/Phone/Fax) (If Other or Yes, Brief Description)."/>
                            <StackPanel Name="Esc02WorkAroundStackPanel" HorizontalAlignment="Left" Height="26" Margin="228,479,0,0" VerticalAlignment="Top" Width="213" Orientation="Horizontal">
                                <RadioButton Name="Esc02WorkAroundYesRadioButton" Content="Yes  " Foreground="#FF31BF31" VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc02WorkAroundNoneRadioButton" Content="None  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <StackPanel Name="Esc02ErrorStackPanel" HorizontalAlignment="Left" Height="23" Margin="636,4,0,0" VerticalAlignment="Top" Width="164" Orientation="Horizontal">
                                <RadioButton Name="Esc02ErrorYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc02ErrorNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <TextBox Name="Esc02CritIssueTextBox" HorizontalAlignment="Left" Height="23" Margin="346,453,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="460" VerticalContentAlignment="Center"/>
                            <TextBox Name="Esc02WorkAroundTextBox" HorizontalAlignment="Left" Height="23" Margin="346,481,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="460" VerticalContentAlignment="Center"/>
                            <Label Name="Esc02OOCEmailYesNolabel" Content="Does Recipient have an External Work Email Address:" HorizontalAlignment="Left" Margin="403,276,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="Esc02OOCEmailYesNoStackPanel" HorizontalAlignment="Left" Height="24" Margin="717,278,0,0" VerticalAlignment="Top" Width="84" Orientation="Horizontal">
                                <RadioButton Name="Esc02OOCEmailYesRadioButton" Content="Yes  " Foreground="#FF31BF31" VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc02OOCEmailNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc02OOCExtEmaillabel" Content="Recipient's External Work Email Address :" HorizontalAlignment="Left" Margin="537,298,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" Width="269"/>
                            <TextBox Name="Esc02OOCExtEmailTextbox" HorizontalAlignment="Left" Height="23" Margin="537,320,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="269" VerticalContentAlignment="Center"/>
                            <Calendar Name="Esc02Calendar" HorizontalAlignment="Left" Margin="624,232,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START TEMPLATES - IBM PC REPLACEMENT SECTION -->
                        <Grid Name="IBMPC_Grid">
                            <Label Name="EscC1SiteCodeLabel" Content="Site Code:" HorizontalAlignment="Left" Margin="10,62,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Machine Name (Verify before escalating, ex. wd-oh15ds360303, required for all non-FCR incidents)"/>
                            <TextBox Name="EscC1SiteCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,87,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="126" VerticalContentAlignment="Center"/>
                            <Button Name="EscC1SiteCodeLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="141,87,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscC1InteractionLabel" Content="Interaction/Incident ID:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC1InteractionTextbox" HorizontalAlignment="Left" Height="23" Margin="10,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC1ComputerLabel" Content="Computer Name:" HorizontalAlignment="Left" Margin="219,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC1ComputerTextbox" HorizontalAlignment="Left" Height="23" Margin="219,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC1OldSerialLabel" Content="Old Serial Number:" HorizontalAlignment="Left" Margin="432,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC1OldSerialTextbox" HorizontalAlignment="Left" Height="23" Margin="432,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC1NewSerialLabel" Content="New Serial Number:" HorizontalAlignment="Left" Margin="645,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC1NewSerialTextbox" HorizontalAlignment="Left" Height="23" Margin="645,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                        </Grid>
                        <!-- START TEMPLATES - LOG AND ROUTE SECTION -->
                        <Grid Name="LOGROUTE_Grid">
                            <Label Name="EscC2IssueDateLabel" Content="Date Issue Began:" HorizontalAlignment="Left" Margin="396,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Machine Name (Verify before escalating, ex. wd-oh15ds360303, required for all non-FCR incidents)"/>
                            <TextBox Name="EscC2IssueDateTextBox" HorizontalAlignment="Left" Height="22" Margin="396,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="126" VerticalContentAlignment="Center"/>
                            <Button Name="EscC2IssueDateCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="527,35,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscC2PhoneNumberLabel" Content="Phone Number:" HorizontalAlignment="Left" Margin="187,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC2PhoneNumberTextbox" HorizontalAlignment="Left" Height="23" Margin="187,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC2TraderIDLabel" Content="Trader ID:" HorizontalAlignment="Left" Margin="10,48,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscC2TraderIDTextbox" HorizontalAlignment="Left" Height="23" Margin="10,70,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC2IsTurretlabel" Content="Is this a Turret Phone:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" ToolTip="Number of Users Impacted (If Other, Enter Number)."/>
                            <StackPanel Name="EscC2IsTurretStackPanel" HorizontalAlignment="Left" Margin="16,33,0,0" VerticalAlignment="Top" Width="126" Orientation="Horizontal">
                                <RadioButton Name="EscC2IsTurretYesRadioButton" Content="Yes " Foreground="#FF31BF31" FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC2IsTurretNoRadioButton" Content="No  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscC2AffectedUsersLabel" Content="How many users affected?" HorizontalAlignment="Left" Margin="598,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscC2AffectedUsersStackPanel" HorizontalAlignment="Left" Margin="605,33,0,0" VerticalAlignment="Top" Width="194" Orientation="Horizontal">
                                <RadioButton Name="EscC2AffectedUsersSingleRadioButton" Content="Single User " Foreground="#FF18186E" FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC2AffectedUsersMultiRadioButton" Content="Multiple Users" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <StackPanel Name="EscC2PhoneTypeStackPanel" HorizontalAlignment="Left" Margin="190,59,0,0" VerticalAlignment="Top" Width="161" Orientation="Horizontal">
                                <RadioButton Name="EscC2PhoneTypeWorkRadioButton" Content="Work " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC2PhoneTypeCellRadioButton" Content="Cell  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC2PhoneTypeHomeRadioButton" Content="Home" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscC2AssigneeLabel" Content="Specific Assignee Group for Escalation:" HorizontalAlignment="Left" Margin="396,61,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Use if customer provides name of Assignee Group; however, Agent should be able to determine Assignee Group without prompting Customer. Do not use this area if customer does not provide information." Foreground="Red"/>
                            <ComboBox Name="EscC2AssigneeComboBox" HorizontalAlignment="Left" Height="22" Margin="396,84,0,0" VerticalAlignment="Top" Width="229" VerticalContentAlignment="Center" IsEditable="True"/>
                            <Label Name="EscC2IssueDescLabel" Content="Issue Description:" HorizontalAlignment="Left" Margin="10,99,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC2IssueDescTextBox" HorizontalAlignment="Left" Height="106" Margin="10,123,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Calendar Name="EscC2Calendar" HorizontalAlignment="Left" Margin="386,58,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START TEMPLATES - NATURAL DISASTER SECTION -->
                        <Grid Name="NATURAL_Grid">
                            <Label Name="EscC3PrimaryPhoneNumberLabel" Content="Primary Phone Number:" HorizontalAlignment="Left" Margin="219,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC3PrimaryPhoneNumberTextbox" HorizontalAlignment="Left" Height="23" Margin="219,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <StackPanel Name="EscC3PrimaryPhoneTypeStackPanel" HorizontalAlignment="Left" Margin="222,59,0,0" VerticalAlignment="Top" Width="161" Orientation="Horizontal">
                                <RadioButton Name="EscC3PrimaryPhoneTypeWorkRadioButton" Content="Work " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC3PrimaryPhoneTypeCellRadioButton" Content="Cell  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC3PrimaryPhoneTypeHomeRadioButton" Content="Home" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscC3IssueDescLabel" Content="Issue Description:" HorizontalAlignment="Left" Margin="10,79,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC3IssueDescTextBox" HorizontalAlignment="Left" Height="66" Margin="10,103,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscC3PrimaryContactLabel" Content="Primary Contact Name:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC3CPrimaryontactTextbox" HorizontalAlignment="Left" Height="23" Margin="10,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC3SecondaryContactLabel" Content="Secondary Contact Name:" HorizontalAlignment="Left" Margin="434,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC3SecondaryContactTextbox" HorizontalAlignment="Left" Height="23" Margin="434,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC3SecondaryPhoneNumberLabel" Content="Secondary Phone Number:" HorizontalAlignment="Left" Margin="644,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC3SecondaryPhoneNumberTextbox" HorizontalAlignment="Left" Height="23" Margin="644,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <StackPanel Name="EscC3SecondaryPhoneTypeStackPanel" HorizontalAlignment="Left" Margin="647,59,0,0" VerticalAlignment="Top" Width="161" Orientation="Horizontal">
                                <RadioButton Name="EscC3SecondaryPhoneTypeWorkRadioButton" Content="Work " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC3SecondaryPhoneTypeCellRadioButton" Content="Cell  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC3SecondaryPhoneTypeHomeRadioButton" Content="Home" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscC3AssessmentLabel" Content="Visual Assessment Of Damage:" HorizontalAlignment="Left" Margin="10,174,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC3AssessmentTextBox" HorizontalAlignment="Left" Height="66" Margin="10,198,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscC3AssigneeLabel" Content="Assignee Group for Escalation:" HorizontalAlignment="Left" Margin="11,269,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Use if customer provides name of Assignee Group; however, Agent should be able to determine Assignee Group without prompting Customer. Do not use this area if customer does not provide information." Foreground="Red"/>
                            <TextBox Name="EscC3CAssigneeTextbox" HorizontalAlignment="Left" Height="23" Margin="10,295,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="235" VerticalContentAlignment="Center"/>
                            <Label Name="EscC3Reminder1Label" Content="Important Reminder:" HorizontalAlignment="Left" Margin="11,323,0,0" VerticalAlignment="Top" FontWeight="Bold" FontSize="14"/>
                            <Label Name="EscC3Reminder2Label" Content="Send an email to: IT Customer Care Shared," HorizontalAlignment="Left" Margin="11,345,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Use if customer provides name of Assignee Group; however, Agent should be able to determine Assignee Group without prompting Customer. Do not use this area if customer does not provide information."/>
                            <Label Name="EscC3Reminder3Label" Content="with the Interaction and/or Incident number." HorizontalAlignment="Left" Margin="256,345,0,0" VerticalAlignment="Top" FontWeight="Bold" ToolTip="Use if customer provides name of Assignee Group; however, Agent should be able to determine Assignee Group without prompting Customer. Do not use this area if customer does not provide information." Foreground="Red"/>
                        </Grid>
                        <!-- START TEMPLATES - SERVER PATCHING/REBOOT SECTION -->
                        <Grid Name="SERVERPATCH_Grid">
                            <Label Name="EscC4RebootTimeLabel" Content="Time Technical Owner is Ok with Patch/Reboot:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC4RebootTimeTextbox" HorizontalAlignment="Left" Height="22" Margin="283,13,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="93" VerticalContentAlignment="Center"/>
                            <Label Name="EscC4EnvLabel" Content="Environment the server resides in according to SCM/Active Directory: " HorizontalAlignment="Left" Margin="10,72,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC4EnvTextbox" HorizontalAlignment="Left" Height="22" Margin="410,76,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="205" VerticalContentAlignment="Center"/>
                            <Label Name="EscC4TierLabel" Content="Network Tier of the server:" HorizontalAlignment="Left" Margin="10,103,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC4TierTextbox" HorizontalAlignment="Left" Height="22" Margin="171,106,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="205" VerticalContentAlignment="Center"/>
                            <Label Name="EscC4ServerNamesLabel" Content="Server Name(s):" HorizontalAlignment="Left" Margin="10,41,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC4ServerNamesTextBox" HorizontalAlignment="Left" Height="22" Margin="108,45,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="215" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscC4TimeZoneLabel" Content="Time Zone:" HorizontalAlignment="Left" Margin="378,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"  ToolTip="The Time Zone the caller is in.`n`n - ET = Eastern Time Zone`n - CT = Central Time Zone`n - MT = Mountain Time Zone`n - PT = Pacific Time Zone`n - IT = International Time Zone"/>
                            <StackPanel Name="EscC4TimeZoneStackPanel" HorizontalAlignment="Left" Height="36" Margin="448,7,0,0" VerticalAlignment="Top" Width="362" Orientation="Horizontal">
                                <RadioButton Name="EscC4ETRadioButton" Content="ET  " FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC4CTRadioButton" Content="CT  " FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC4MTRadioButton" Content="MT  " FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC4PTRadioButton" Content="PT  " FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC4ITRadioButton" Content="IT  " FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC4OtherTZRadioButton" Content="Other Zone " Foreground="#FF31BF31" FontWeight="Bold" VerticalAlignment="Center"/>
                                <TextBox Name="EscC4OtherTZTextBox" TextWrapping="Wrap" Width="70" Height="22" Margin="0,7" VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                            </StackPanel>
                        </Grid>
                        <!-- START TEMPLATES - SERVICE MANAGER REQUEST SECTION -->
                        <Grid Name="SERVICEMANAGER_Grid">
                            <Label Name="EscC5PhoneNumberLabel" Content="Phone Number:" HorizontalAlignment="Left" Margin="194,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC5PhoneNumberTextbox" HorizontalAlignment="Left" Height="23" Margin="194,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC5RequestTypeLabel" Content="Request Type:" HorizontalAlignment="Left" Margin="13,80,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscC5RequestTypeStackPanel" HorizontalAlignment="Left" Margin="18,103,0,0" VerticalAlignment="Top" Width="194" Orientation="Horizontal">
                                <RadioButton Name="EscC5RequestTypeAddRadioButton" Content="Add " Foreground="#FF18186E" FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC5RequestTypeChangeRadioButton" Content="Change  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC5RequestTypeDeleteRadioButton" Content="Delete" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <StackPanel Name="EscC5PhoneTypeStackPanel" HorizontalAlignment="Left" Margin="197,59,0,0" VerticalAlignment="Top" Width="161" Orientation="Horizontal">
                                <RadioButton Name="EscC5PhoneTypeWorkRadioButton" Content="Work " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC5PhoneTypeCellRadioButton" Content="Cell  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC5PhoneTypeHomeRadioButton" Content="Home" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscC5ResultDescLabel" Content="Request Description:" HorizontalAlignment="Left" Margin="217,80,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC5ResultDescTextBox" HorizontalAlignment="Left" Height="66" Margin="217,103,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="382" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscC5ClientNameLabel" Content="Client Name:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC5ClientNameTextbox" HorizontalAlignment="Left" Height="23" Margin="10,34,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC5SMRequestLabel" Content="Service Manager Request:" HorizontalAlignment="Left" Margin="371,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <WrapPanel Name="EscC5SMRequestWrapPanel" HorizontalAlignment="Left" Margin="376,34,0,0" VerticalAlignment="Top" Width="305" Orientation="Horizontal" Height="40">
                                <RadioButton Name="EscC5SMRequestSubRadioButton" Content="Sub Class " Foreground="#FF18186E" FontWeight="Bold" VerticalAlignment="Center"/>
                                <RadioButton Name="EscC5SMRequestItemRadioButton" Content="Item  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC5SMRequestCustomerRadioButton" Content="Customer Information Record  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC5SMRequestOtherRadioButton" Content="Other  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </WrapPanel>
                            <Label Name="EscC5IncidentLabel" Content="Interaction/Incident ID:" HorizontalAlignment="Left" Margin="628,80,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC5IncidentTextbox" HorizontalAlignment="Left" Height="23" Margin="628,103,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="142" VerticalContentAlignment="Center"/>
                            <Label Name="EscC5AddLabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,171,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscC5AddTextBox" HorizontalAlignment="Left" Height="66" Margin="10,195,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                        </Grid>
                        <!-- START TEMPLATES - SOFTWARE DELETE SECTION -->
                        <Grid Name="SOFTWAREDELETE_Grid">
                            <Label Name="EscC6PhoneNumberLabel" Content="Phone Number:" HorizontalAlignment="Left" Margin="216,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6PhoneNumberTextbox" HorizontalAlignment="Left" Height="23" Margin="216,34,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <StackPanel Name="EscC6PhoneTypeStackPanel" HorizontalAlignment="Left" Margin="219,59,0,0" VerticalAlignment="Top" Width="161" Orientation="Horizontal">
                                <RadioButton Name="EscC6PhoneTypeWorkRadioButton" Content="Work " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC6PhoneTypeCellRadioButton" Content="Cell  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscC6PhoneTypeHomeRadioButton" Content="Home" FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscC6AppReinstallDescLabel" Content="Software/Application Reinstalled: " HorizontalAlignment="Left" Margin="216,80,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6AppReinstallTextBox" HorizontalAlignment="Left" Height="66" Margin="216,103,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="369" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscC6ClientNameLabel" Content="Client Name:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6ClientNameTextbox" HorizontalAlignment="Left" Height="23" Margin="10,34,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC6IncidentLabel" Content="Interaction/Incident ID:" HorizontalAlignment="Left" Margin="628,80,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6IncidentTextbox" HorizontalAlignment="Left" Height="23" Margin="628,103,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="178" VerticalContentAlignment="Center"/>
                            <Label Name="EscC6AddLabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,224,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscC6AddTextBox" HorizontalAlignment="Left" Height="66" Margin="10,247,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscC6DeptNameLabel" Content="Department Name:" HorizontalAlignment="Left" Margin="424,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6DeptNameTextbox" HorizontalAlignment="Left" Height="23" Margin="424,34,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC6MachineLabel" Content="Machine Name/IP:" HorizontalAlignment="Left" Margin="628,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6MachineTextbox" HorizontalAlignment="Left" Height="23" Margin="628,34,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="143" VerticalContentAlignment="Center"/>
                            <Button Name="EscC6MachinePingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="776,34,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscC6UserIDLabel" Content="User ID:" HorizontalAlignment="Left" Margin="10,80,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscC6UserIDTextbox" HorizontalAlignment="Left" Height="23" Margin="10,103,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC6ReinstallDateLabel" Content="Date of ReInstall:" HorizontalAlignment="Left" Margin="10,174,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6ReinstallDateTextbox" HorizontalAlignment="Left" Height="23" Margin="10,196,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="126" VerticalContentAlignment="Center"/>
                            <Button Name="EscC6ReinstallDateCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="141,196,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscC6ADGroupLabel" Content="Link ID/AD Group:" HorizontalAlignment="Left" Margin="216,174,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6ADGroupTextbox" HorizontalAlignment="Left" Height="23" Margin="216,196,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Label Name="EscC6ErrorLabel" Content="Return Code Error:" HorizontalAlignment="Left" Margin="424,174,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscC6ErrorTextbox" HorizontalAlignment="Left" Height="23" Margin="424,196,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="161" VerticalContentAlignment="Center"/>
                            <Calendar Name="EscC6Calendar" HorizontalAlignment="Left" Margin="176,128,0,0" VerticalAlignment="Top"/>
                        </Grid>
                    </Grid>
                </TabItem>
                <TabItem Name="EscXOtherTab" Header="TBD">
                    <Grid Background="#FFE5E5E5">
                        <!-- START APPLICATIONS - CITRIX SECTION -->
                        <Grid Name="CITRIX_Grid">
                            <Label Name="Esc1EnvLabel" Content="Environment:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="113" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc1EnvTextBox" HorizontalAlignment="Left" Height="23" Margin="10,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181"/>
                            <Label Name="Esc1URLLabel" Content="URL:" HorizontalAlignment="Left" Margin="206,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc1URLTextBox" HorizontalAlignment="Left" Height="23" Margin="206,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="203"/>
                            <Label Name="Esc1AppLabel" Content="Affected Application:" HorizontalAlignment="Left" Margin="424,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc1AppTextBox" HorizontalAlignment="Left" Height="23" Margin="424,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="217"/>
                            <Label Name="Esc1IconLabel" Content="Icon Name:" HorizontalAlignment="Left" Margin="656,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc1IconTextBox" HorizontalAlignment="Left" Height="23" Margin="656,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="150"/>
                            <Label Name="Esc1ICALabel" Content="ICA Client Version:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" Width="113" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc1ICATextBox" HorizontalAlignment="Left" Height="23" Margin="10,79,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181"/>
                            <Label Name="Esc1PrnLabel" Content="Default Printer Driver:" HorizontalAlignment="Left" Margin="206,59,0,0" VerticalAlignment="Top" Width="136" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc1PrnTextBox" HorizontalAlignment="Left" Height="23" Margin="206,79,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="203"/>
                            <Label Name="Esc1PolicyLabel" Content="Receiving US Bank Policy Message:" HorizontalAlignment="Left" Margin="424,61,0,0" VerticalAlignment="Top" Width="217" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="Esc1PolicyStackpanel" HorizontalAlignment="Left" Height="23" Margin="434,79,0,0" VerticalAlignment="Top" Width="217" Orientation="Horizontal">
                                <RadioButton Name="Esc1YesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc1NoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc1NARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <Label Name="Esc1AddLabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,107,0,0" VerticalAlignment="Top" Width="181" Foreground="Black" FontWeight="Bold"/>
                            <TextBox Name="Esc1AddTextBox" HorizontalAlignment="Left" Height="106" Margin="10,127,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                        </Grid>
                        <!-- START APPLICATIONS - DATABASE SECTION -->
                        <Grid Name="DATABASE_Grid">
                            <Label Name="Esc2Applabel" Content="Application Impacted:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc2AppTextBox" HorizontalAlignment="Left" Height="22" Margin="10,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc2DataNamelabel" Content="Database Name:" HorizontalAlignment="Left" Margin="237,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc2DataNameTextBox" HorizontalAlignment="Left" Height="22" Margin="237,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc2DataTypeLabel" Content="Database Type:" HorizontalAlignment="Left" Margin="456,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="Esc2DataTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="456,32,0,0" VerticalAlignment="Top" Width="350" Orientation="Horizontal">
                                <RadioButton Name="Esc2UDBRadioButton" Content="UDB  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc2OracleRadioButton" Content="Oracle  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc2SQLRadioButton" Content="SQL  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc2DB2RadioButton" Content="DB2  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc2OtherRadioButton" Content="Other: " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <TextBox Name="Esc2OtherTextBox" TextWrapping="Wrap" Width="73" VerticalAlignment="Center" Margin="0,2"/>
                            </StackPanel>
                            <TextBox Name="Esc2AddTextBox" HorizontalAlignment="Left" Height="138" Margin="10,361,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc2Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,340,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc2ServerNameLabel" Content="Server Name:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc2ServerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="10,80,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc2ServerNamePingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="189,80,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc2ServerIPLabel" Content="Server IP:" HorizontalAlignment="Left" Margin="10,107,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc2ServerIPTextBox" HorizontalAlignment="Left" Height="22" Margin="10,129,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc2ServerIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="189,129,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc2BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,156,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc2BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,178,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc2BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,178,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc2PingResultsLabel" Content="Ping Results:" HorizontalAlignment="Left" Margin="237,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc2PingResultsTextBox" HorizontalAlignment="Left" Height="71" Margin="237,80,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="569" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc2LobbyIDLabel" Content="Lobby ID:" HorizontalAlignment="Left" Margin="237,156,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc2LobbyIDTextBox" HorizontalAlignment="Left" Height="22" Margin="237,178,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc2LobbyIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="416,178,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc2AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,223,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc2AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,244,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc2CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,271,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc2CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,293,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc2StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,271,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc2StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,293,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc2ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,271,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc2ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,293,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc2CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,271,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc2CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,293,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                        </Grid>
                        <!-- START APPLICATIONS - DESKTOP SECTION -->
                        <Grid Name="DESKTOP_Grid">
                            <Label Name="Esc3UserIDlabel" Content="User ID:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc3UserIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="144"/>
                            <Label Name="Esc3AppImpactlabel" Content="Application Impacted:" HorizontalAlignment="Left" Margin="174,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="Esc3AppImpactTextBox" HorizontalAlignment="Left" Height="22" Margin="174,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="226"/>
                            <Label Name="Esc3PilotLabel" Content="Is user testing Pilot Application:" HorizontalAlignment="Left" Margin="613,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="Esc3PilotStackPanel" HorizontalAlignment="Left" Height="22" Margin="622,32,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="Esc3YesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc3NoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc3NARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <TextBox Name="Esc3AddTextBox" HorizontalAlignment="Left" Height="138" Margin="10,361,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc3Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,340,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc3BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,192,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc3BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,214,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc3BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,214,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc3LobbyIDLabel" Content="Lobby ID:" HorizontalAlignment="Left" Margin="237,192,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc3LobbyIDTextBox" HorizontalAlignment="Left" Height="22" Margin="237,214,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc3LobbyIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="416,214,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc3AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,243,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc3AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,264,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc3CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,291,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc3CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,313,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc3StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,291,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc3StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,313,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc3ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,291,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc3ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,313,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc3CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,291,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc3CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,313,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="Esc3AppVersionlabel" Content="Application Version:" HorizontalAlignment="Left" Margin="421,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc3AppVersionTextBox" HorizontalAlignment="Left" Height="22" Margin="421,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="Esc3AppAccesslabel" Content="How is the application accessed:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc3AppAccessTextBox" HorizontalAlignment="Left" Height="106" Margin="10,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="390" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc3AppFaillabel" Content="At what point did the application fail:" HorizontalAlignment="Left" Margin="421,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc3AppFailTextBox" HorizontalAlignment="Left" Height="106" Margin="421,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="382" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                        </Grid>
                        <!-- START APPLICATION - INTRANET/INTERNET SECTION -->
                        <Grid Name="INTERNET_Grid">
                            <Label Name="Esc4Browserlabel" Content="Browser Name/Version:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc4BrowserTextBox" HorizontalAlignment="Left" Height="22" Margin="10,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="144"/>
                            <Label Name="Esc4IntranetLabel" Content="Is user testing Pilot Application:" HorizontalAlignment="Left" Margin="201,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="Esc4IntranetStackPanel" HorizontalAlignment="Left" Height="22" Margin="210,32,0,0" VerticalAlignment="Top" Width="206" Orientation="Horizontal">
                                <RadioButton Name="Esc4IntranetIntranetRadioButton" Content="Intranet  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc4IntranetInternetRadioButton" Content="Internet  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc4IntranetNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <TextBox Name="Esc4AddTextBox" HorizontalAlignment="Left" Height="83" Margin="10,416,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc4Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,395,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc4BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,247,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc4BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,269,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc4BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,269,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc4AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,298,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,319,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc4CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc4StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc4ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc4CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="Esc4AppImpactlabel" Content="Application Impacted:" HorizontalAlignment="Left" Margin="421,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4AppImpactTextBox" HorizontalAlignment="Left" Height="22" Margin="421,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="Esc4ServerTroublelabel" Content="Server Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="201,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc4ServerTroubleTextBox" HorizontalAlignment="Left" Height="106" Margin="201,82,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="602" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc4URLlabel" Content="URL:" HorizontalAlignment="Left" Margin="620,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4URLTextBox" HorizontalAlignment="Left" Height="22" Margin="620,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="Esc4ServerIPlabel" Content="Server IP:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc4ServerIPTextBox" HorizontalAlignment="Left" Height="22" Margin="9,82,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="144"/>
                            <Button Name="Esc4ServerIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="158,82,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <TextBox Name="Esc4FunctionTextBox" HorizontalAlignment="Left" Height="22" Margin="10,220,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="209"/>
                            <Label Name="Esc4Functionlabel" Content="Specific function not working:" HorizontalAlignment="Left" Margin="10,198,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <Label Name="Esc4Accesslabel" Content="Able to access other sites:" HorizontalAlignment="Left" Margin="236,198,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="Esc4AccessStackPanel" HorizontalAlignment="Left" Height="22" Margin="243,220,0,0" VerticalAlignment="Top" Width="219" Orientation="Horizontal">
                                <RadioButton Name="Esc4AccessYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc4AccessNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="Esc4AccessNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <Label Name="Esc4Mainframelabel" Content="Are there any major mainframe issue at this time:" HorizontalAlignment="Left" Margin="475,198,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="Esc4MainframeStackPanel" HorizontalAlignment="Left" Height="22" Margin="485,220,0,0" VerticalAlignment="Top" Width="171" Orientation="Horizontal">
                                <RadioButton Name="Esc4MainframeYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc4MainframeNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <TextBox Name="Esc4MainframeTextBox" HorizontalAlignment="Left" Height="23" Margin="479,242,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="285"/>
                        </Grid>
                        <!-- START APPLICATION - GLOBAL LEARNING LAB SECTION -->
                        <Grid Name="GLL_Grid">
                            <Label Name="Esc5UserIDlabel" Content="User ID:" HorizontalAlignment="Left" Margin="9,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5UserIDTextBox" HorizontalAlignment="Left" Height="22" Margin="9,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <TextBox Name="Esc5AddTextBox" HorizontalAlignment="Left" Height="83" Margin="10,416,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc5Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,395,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc5BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,247,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,269,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc5BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,269,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc5AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,298,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc5AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,319,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc5CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc5CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc5StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc5StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc5ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc5ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc5CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc5CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="Esc5CourseNamelabel" Content="Course Name:" HorizontalAlignment="Left" Margin="386,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5CourseNameTextBox" HorizontalAlignment="Left" Height="22" Margin="386,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc5CourseModlabel" Content="Course Modules:" HorizontalAlignment="Left" Margin="583,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5CourseModTextBox" HorizontalAlignment="Left" Height="22" Margin="583,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc5Completionlabel" Content="Course Completion Date:" HorizontalAlignment="Left" Margin="386,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5CompletionTextBox" HorizontalAlignment="Left" Height="22" Margin="386,82,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Button Name="Esc5CompletionButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="543,82,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings" FontSize="11"/>
                            <Label Name="Esc5Lessonlabel" Content="Lesson Number:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5LessonTextBox" HorizontalAlignment="Left" Height="22" Margin="9,82,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc5CourseCodelabel" Content="Course Code:" HorizontalAlignment="Left" Margin="195,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5CourseCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="195,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc5PageNumberlabel" Content="Page Number:" HorizontalAlignment="Left" Margin="195,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc5PageNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="195,82,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc5Functionlabel" Content="Specific Function Not Working:" HorizontalAlignment="Left" Margin="583,59,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc5FunctionTextBox" HorizontalAlignment="Left" Height="22" Margin="583,82,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="223"/>
                            <Calendar Name="Esc5Calendar" HorizontalAlignment="Left" Margin="373,104,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START APPLICATION - LOTUS NOTES/USB MAIL SECTION -->
                        <Grid Name="LOTUS_Grid">
                            <Label Name="Esc6UserIDlabel" Content="User ID:" HorizontalAlignment="Left" Margin="9,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc6UserIDTextBox" HorizontalAlignment="Left" Height="22" Margin="9,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="102"/>
                            <TextBox Name="Esc6AddTextBox" HorizontalAlignment="Left" Height="83" Margin="10,416,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc6Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,395,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc6BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,247,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc6BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,269,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc6BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,269,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc6AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,298,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,319,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc6CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc6StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc6ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc6CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="Esc6Browserlabel" Content="Web Browser Name/Version:" HorizontalAlignment="Left" Margin="605,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc6BrowserTextBox" HorizontalAlignment="Left" Height="22" Margin="605,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="201"/>
                            <Button Name="Esc6MailServerButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="116,76,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc6MailServerlabel" Content="Mail Server:" HorizontalAlignment="Left" Margin="10,54,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6MailServerTextBox" HorizontalAlignment="Left" Height="22" Margin="9,76,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="102"/>
                            <Label Name="Esc6NotesVerlabel" Content="Version of Lotus Notes:" HorizontalAlignment="Left" Margin="10,150,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc6NotesVerTextBox" HorizontalAlignment="Left" Height="22" Margin="10,173,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc6MailSizelabel" Content="Mail File Size:" HorizontalAlignment="Left" Margin="195,150,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc6MailSizeTextBox" HorizontalAlignment="Left" Height="22" Margin="195,173,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="152"/>
                            <Label Name="Esc6Accesslabel" Content="Has the employee been able to access in the past:" HorizontalAlignment="Left" Margin="10,198,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="Esc6AccessStackPanel" HorizontalAlignment="Left" Height="22" Margin="17,223,0,0" VerticalAlignment="Top" Width="251" Orientation="Horizontal">
                                <RadioButton Name="Esc6AccessYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6AccessNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6AccessNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc6Attemptlabel" Content="Attempting email access through:" HorizontalAlignment="Left" Margin="195,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="Esc6AttemptStackPanel" HorizontalAlignment="Left" Height="22" Margin="201,26,0,0" VerticalAlignment="Top" Width="307" Orientation="Horizontal">
                                <RadioButton Name="Esc6AttemptClientRadioButton" Content="Lotus Notes Client  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6AttemptWebRadioButton" Content="USBMail via Web  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6AttemptNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc6Troublelabel" Content="Mail Server Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="195,54,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc6TroubleTextBox" HorizontalAlignment="Left" Height="74" Margin="195,76,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="409" VerticalScrollBarVisibility="Visible"/>
                            <Label Name="Esc6NewEmployeelabel" Content="New employee:" HorizontalAlignment="Left" Margin="387,150,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="Esc6NewEmployeeStackPanel" HorizontalAlignment="Left" Height="22" Margin="392,173,0,0" VerticalAlignment="Top" Width="251" Orientation="Horizontal">
                                <RadioButton Name="Esc6NewEmployeeYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6NewEmployeeNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6NewEmployeeNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc6AnyoneElselabel" Content="Is anyone else at the location experiencing the same issues:" HorizontalAlignment="Left" Margin="387,198,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="Esc6AnyoneElseStackPanel" HorizontalAlignment="Left" Height="22" Margin="392,223,0,0" VerticalAlignment="Top" Width="251" Orientation="Horizontal">
                                <RadioButton Name="Esc6AnyoneElseYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6AnyoneElseNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc6AnyoneElseNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                        </Grid>
                        <!-- START AAPLICATION - MAINFRAME APPLICATION SECTION -->
                        <Grid Name="MAINFRAME_Grid">
                            <Label Name="Esc7UserIDlabel" Content="User ID:" HorizontalAlignment="Left" Margin="9,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7UserIDTextBox" HorizontalAlignment="Left" Height="22" Margin="9,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="102"/>
                            <TextBox Name="Esc7AddTextBox" HorizontalAlignment="Left" Height="83" Margin="10,416,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc7Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,395,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc7BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,247,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,269,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc7BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,269,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc7AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,298,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc7AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,319,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc7CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc7CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc7StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc7StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc7ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc7ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc7CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc7CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="Esc7ScreenNumberlabel" Content="Screen Number:" HorizontalAlignment="Left" Margin="628,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7ScreenNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="628,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc7Affectedlabel" Content="Application Affected:" HorizontalAlignment="Left" Margin="174,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7AffectedTextBox" HorizontalAlignment="Left" Height="22" Margin="174,27,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc7TermIDlabel" Content="Terminal ID:" HorizontalAlignment="Left" Margin="403,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7TermIDTextBox" HorizontalAlignment="Left" Height="22" Margin="403,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc7Functionlabel" Content="Can function be performed natively:" HorizontalAlignment="Left" Margin="10,53,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="Esc7FunctionStackPanel" HorizontalAlignment="Left" Height="22" Margin="17,76,0,0" VerticalAlignment="Top" Width="149" Orientation="Horizontal">
                                <RadioButton Name="Esc7FunctionYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc7FunctionNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc7FunctionNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc7AppFaillabel" Content="At what point did the application fail:" HorizontalAlignment="Left" Margin="229,53,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc7AppFailTextBox" HorizontalAlignment="Left" Height="74" Margin="229,76,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="577" VerticalScrollBarVisibility="Visible"/>
                            <Label Name="Esc7AcctTypelabel" Content="Account Type:" HorizontalAlignment="Left" Margin="10,163,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="Esc7AcctTypeStackPanel" HorizontalAlignment="Left" Height="51" Margin="17,187,0,0" VerticalAlignment="Top" Width="148">
                                <RadioButton Name="Esc7AcctTypeNumberRadioButton" Content="Account Number" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc7AcctTypeNamesRadioButton" Content="Customer Names" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc7AcctTypeNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc7CustomerNameslabel" Content="Customer Names:" HorizontalAlignment="Left" Margin="229,163,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7CustomerNamesTextBox" HorizontalAlignment="Left" Height="53" Margin="229,185,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="577" VerticalScrollBarVisibility="Visible"/>
                            <Label Name="Esc7AccountNumberlabel" Content="Account Number:" HorizontalAlignment="Left" Margin="229,163,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc7AccountNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="229,186,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="222"/>
                        </Grid>
                        <!-- START APPLICATIONS - MOBILITY SECTION -->
                        <Grid Name="MOBILITY_Grid">
                            <Label Name="Esc8Brandlabel" Content="Device Brand:" HorizontalAlignment="Left" Margin="9,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <ComboBox Name="Esc8BrandComboBox" HorizontalAlignment="Left" Height="22" Margin="9,26,0,0" VerticalAlignment="Top" Width="178"/>
                            <TextBox Name="Esc8ShippingTextBox" HorizontalAlignment="Left" Height="83" Margin="201,416,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="605" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc8Shippinglabel" Content="Shipping Address:" HorizontalAlignment="Left" Margin="201,394,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <Label Name="Esc8BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,247,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc8BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,269,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="Esc8BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,269,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="Esc8AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,298,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,319,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="Esc8CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="Esc8StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc8ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="Esc8CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="475,346,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="475,368,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="Esc8DeviceNumberlabel" Content="Device Phone Number:" HorizontalAlignment="Left" Margin="628,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8DeviceNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="628,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc8DeviceModellabel" Content="Device Model:" HorizontalAlignment="Left" Margin="215,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8DeviceModelTextBox" HorizontalAlignment="Left" Height="22" Margin="215,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc8Ownerlabel" Content="Device Ownership:" HorizontalAlignment="Left" Margin="423,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <ComboBox Name="Esc8OwnerComboBox" HorizontalAlignment="Left" Height="22" Margin="423,26,0,0" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc8Replacementlabel" Content="Shipping to Office&#xD;&#xA;(If replacement is needed):" HorizontalAlignment="Left" Margin="10,395,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="Esc8ReplacementStackPanel" HorizontalAlignment="Left" Height="22" Margin="18,432,0,0" VerticalAlignment="Top" Width="149" Orientation="Horizontal">
                                <RadioButton Name="Esc8ReplacementYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc8ReplacementNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                            </StackPanel>
                            <Label Name="Esc8Problemlabel" Content="What is the problem the user is experiencing:" HorizontalAlignment="Left" Margin="215,53,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8ProblemTextBox" HorizontalAlignment="Left" Height="74" Margin="215,76,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="591" VerticalScrollBarVisibility="Visible"/>
                            <Label Name="Esc8Synedlabel" Content="Has the device ever&#xD;&#xA;successfully synched:" HorizontalAlignment="Left" Margin="10,183,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="Esc8SynedStackPanel" HorizontalAlignment="Left" Height="22" Margin="18,220,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="Esc8SynedYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc8SynedNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc8SynedNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc8DateSynchedlabel" Content="Enter Date of synched:" HorizontalAlignment="Left" Margin="215,197,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8DateSynchedlTextBox" HorizontalAlignment="Left" Height="22" Margin="215,220,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="222"/>
                            <Button Name="Esc8DateSynchedButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="442,220,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Calendar Name="Esc8DateSynchedCalendar" HorizontalAlignment="Left" Margin="477,173,0,0" VerticalAlignment="Top"/>
                            <Label Name="Esc8Providerlabel" Content="Service Provider:" HorizontalAlignment="Left" Margin="10,99,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="Esc8ProviderStackPanel" HorizontalAlignment="Left" Height="22" Margin="18,118,0,0" VerticalAlignment="Top" Width="192" Orientation="Horizontal">
                                <RadioButton Name="Esc8ProviderATTRadioButton" Content="ATT  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc8ProviderVerizonRadioButton" Content="Verizon  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc8ProviderNARadioButton" Content="Other" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                            </StackPanel>
                            <Label Name="Esc8OtherProviderlabel" Content="Other Provider:" HorizontalAlignment="Left" Margin="10,140,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8OtherProviderTextBox" HorizontalAlignment="Left" Height="22" Margin="10,161,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc8OtherBrandlabel" Content="Other Brand:" HorizontalAlignment="Left" Margin="10,53,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc8OtherBrandTextBox" HorizontalAlignment="Left" Height="22" Margin="10,76,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                        </Grid>
                        <!-- START APPLICATION - VPN SECTION -->
                        <Grid Name="VPN_Grid">
                            <Label Name="Esc9VPNPastlabel" Content="Has user accessed VPN in the past:" HorizontalAlignment="Left" Margin="9,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc9AdditionalTextBox" HorizontalAlignment="Left" Height="169" Margin="10,330,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="Esc9Additionallabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="9,307,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="Esc9ISPLabel" Content="Connectivity ISP:" HorizontalAlignment="Left" Margin="10,257,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc9ISPTextBox" HorizontalAlignment="Left" Height="22" Margin="10,280,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc9VPNModelLabel" Content="Model Type:" HorizontalAlignment="Left" Margin="10,156,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc9VPNModelTextBox" HorizontalAlignment="Left" Height="22" Margin="10,179,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc9VersionLabel" Content="VPN Software Version:" HorizontalAlignment="Left" Margin="10,206,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc9VersionTextBox" HorizontalAlignment="Left" Height="22" Margin="10,230,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <TextBox Name="Esc9TokenTextBox" HorizontalAlignment="Left" Height="22" Margin="588,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="Esc9CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="208,257,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="Esc9CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="208,280,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                            <Label Name="Esc9Tokenlabel" Content="Token: What type was used" HorizontalAlignment="Left" Margin="427,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="Esc9TokenStackPanel" HorizontalAlignment="Left" Height="22" Margin="434,26,0,0" VerticalAlignment="Top" Width="149" Orientation="Horizontal">
                                <RadioButton Name="Esc9TokenHardRadioButton" Content="Hard  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc9TokenSoftRadioButton" Content="Soft  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9TokenPalmRadioButton" Content="Palm" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc9Ownerlabel" Content="Computer Owner:" HorizontalAlignment="Left" Margin="427,53,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="Esc9OwnerStackPanel" HorizontalAlignment="Left" Height="22" Margin="434,77,0,0" VerticalAlignment="Top" Width="191" Orientation="Horizontal">
                                <RadioButton Name="Esc9OwnerBankRadioButton" Content="Bank  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9OwnerPersonalRadioButton" Content="Personal  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9OwnerNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc9Typelabel" Content="Computer Type:" HorizontalAlignment="Left" Margin="427,104,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="Esc9TypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="434,127,0,0" VerticalAlignment="Top" Width="191" Orientation="Horizontal">
                                <RadioButton Name="Esc9TypeLaptopRadioButton" Content="Laptop  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9TypeDesktopRadioButton" Content="Desktop  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9TypeNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc9Connectlabel" Content="Connectivity:" HorizontalAlignment="Left" Margin="427,154,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="Esc9ConnectStackPanel" HorizontalAlignment="Left" Height="22" Margin="434,178,0,0" VerticalAlignment="Top" Width="301" Orientation="Horizontal">
                                <RadioButton Name="Esc9ConnectCableRadioButton" Content="Cable  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9ConnectDialRadioButton" Content="Dial-Up  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9ConnectDSLRadioButton" Content="DSL  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9ConnectNetworkRadioButton" Content="Network  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9ConnectNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc9Resynclabel" Content="Did You Attempt To Resync The Token:" HorizontalAlignment="Left" Margin="9,56,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="Esc9SynedStackPanel" HorizontalAlignment="Left" Height="22" Margin="19,79,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="Esc9SynedYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9SynedNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="Esc9SynedNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <TextBox Name="Esc9DateSynchedTextBox" HorizontalAlignment="Left" Height="22" Margin="112,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="91"/>
                            <Button Name="Esc9DateSynchedButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="208,26,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Calendar Name="Esc9DateSynchedCalendar" HorizontalAlignment="Left" Margin="243,10,0,0" VerticalAlignment="Top"/>
                            <StackPanel Name="Esc9VPNPastStackPanel" HorizontalAlignment="Left" Height="22" Margin="19,26,0,0" VerticalAlignment="Top" Width="88" Orientation="Horizontal">
                                <RadioButton Name="Esc9VPNPastYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="Esc9VPNPAstNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="Esc9ComputerOSlabel" Content="Computer OS:" HorizontalAlignment="Left" Margin="10,106,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="Esc9ComputerOSTextBox" HorizontalAlignment="Left" Height="22" Margin="10,129,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="178"/>
                        </Grid>
                        <!-- START APPLICATION - WIZARD SECTION -->
                        <Grid Name="WIZARD_Grid">
                            <Label Name="EscA1ArgoVersionlabel" Content="Argo Wizard Version:" HorizontalAlignment="Left" Margin="9,4,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1ArgoVersionTextBox" HorizontalAlignment="Left" Height="22" Margin="9,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="129"/>
                            <TextBox Name="EscA1AddTextBox" HorizontalAlignment="Left" Height="47" Margin="10,452,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA1Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,430,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA1BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,193,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,215,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA1BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,216,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA1AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="12,388,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,410,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="313"/>
                            <Label Name="EscA1CityLabel" Content="City:" HorizontalAlignment="Left" Margin="343,388,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1CityTextBox" HorizontalAlignment="Left" Height="22" Margin="343,410,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="131"/>
                            <Label Name="EscA1StateLabel" Content="State:" HorizontalAlignment="Left" Margin="492,388,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1StateTextBox" HorizontalAlignment="Left" Height="22" Margin="492,410,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="76"/>
                            <Label Name="EscA1ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="587,388,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="587,410,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="72"/>
                            <Label Name="EscA1CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="677,388,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="677,410,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="129"/>
                            <Label Name="EscA1ReportIDlabel" Content="Report ID:" HorizontalAlignment="Left" Margin="677,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1ReportIDTextBox" HorizontalAlignment="Left" Height="22" Margin="677,26,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="129"/>
                            <Label Name="EscA1LobbyIDlabel" Content="Lobby ID:" HorizontalAlignment="Left" Margin="215,193,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1LobbyIDTextBox" HorizontalAlignment="Left" Height="22" Margin="215,216,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Label Name="EscA1ServerIPlabel" Content="Server IP:" HorizontalAlignment="Left" Margin="631,197,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1ServerIPTextBox" HorizontalAlignment="Left" Height="22" Margin="631,216,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Label Name="EscA1EscA1Pilotlabel" Content="Is user testing Pilot Application:" HorizontalAlignment="Left" Margin="229,4,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscA1PilotStackPanel" HorizontalAlignment="Left" Height="22" Margin="241,26,0,0" VerticalAlignment="Top" Width="149" Orientation="Horizontal">
                                <RadioButton Name="EscA1EscA1PilotYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA1EscA1PilotNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA1EscA1PilotNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA1AppFaillabel" Content="At what point did the application fail:" HorizontalAlignment="Left" Margin="9,48,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1AppFailTextBox" HorizontalAlignment="Left" Height="40" Margin="10,71,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="640" VerticalScrollBarVisibility="Visible"/>
                            <Label Name="EscA1AcctTypelabel" Content="Account Type:" HorizontalAlignment="Left" Margin="10,113,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscA1AcctTypeStackPanel" HorizontalAlignment="Left" Height="51" Margin="17,137,0,0" VerticalAlignment="Top" Width="148">
                                <RadioButton Name="EscA1AcctTypeNumberRadioButton" Content="Account Number" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA1AcctTypeNamesRadioButton" Content="Customer Names" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA1AcctTypeNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA1CustomerNameslabel" Content="Customer Names:" HorizontalAlignment="Left" Margin="215,113,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1CustomerNamesTextBox" HorizontalAlignment="Left" Height="53" Margin="215,135,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="591" VerticalScrollBarVisibility="Visible"/>
                            <Label Name="EscA1AccountNumberlabel" Content="Account Number:" HorizontalAlignment="Left" Margin="215,113,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1AccountNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="215,136,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="236"/>
                            <Button Name="EscA1LobbyIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="360,216,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <TextBox Name="EscA1ServerTroubleTextBox" HorizontalAlignment="Left" Height="72" Margin="9,316,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="559" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA1ServerTroublelabel" Content="Server Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="10,292,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Button Name="EscA1ServerIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="776,215,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA1GatewayIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="776,265,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <TextBox Name="EscA1GatewayIPTextBox" HorizontalAlignment="Left" Height="22" Margin="631,265,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Label Name="EscA1GatewayIPlabel" Content="Router/Gateway IP:" HorizontalAlignment="Left" Margin="631,242,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA1BranchSiteCodeLabel" Content="Branch Site Code:" HorizontalAlignment="Left" Margin="10,242,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1BranchSiteCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="9,265,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA1BranchSiteCodeLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="154,265,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA1BranchNameLabel" Content="Branch Name:" HorizontalAlignment="Left" Margin="216,242,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1BranchNameTextBox" HorizontalAlignment="Left" Height="22" Margin="215,265,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Label Name="EscA1ServerNameLabel" Content="Server Name:" HorizontalAlignment="Left" Margin="423,193,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA1ServerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="423,216,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA1ServerNamePingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="568,216,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA1BranchPhoneLabel" Content="Branch Phone Number:" HorizontalAlignment="Left" Margin="423,242,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA1BranchPhoneTextBox" HorizontalAlignment="Left" Height="22" Margin="423,265,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                        </Grid>
                        <!-- START CREDIT CARD PARTNERS - CREDIT CARD PARTNERS SECTION -->
                        <Grid Name="CREDITCARD_Grid">
                            <Label Name="EscA2AppImapctedLabel" Content="Application Impacted:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="181" FontWeight="Bold"/>
                            <TextBox Name="EscA2AppImpactedTextBox" HorizontalAlignment="Left" Height="23" Margin="10,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181"/>
                            <Label Name="EscA2URLLabel" Content="URL:" HorizontalAlignment="Left" Margin="424,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA2URLTextBox" HorizontalAlignment="Left" Height="23" Margin="424,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="382"/>
                            <Label Name="EscA2UserIDLabel" Content="User ID:" HorizontalAlignment="Left" Margin="206,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA2UserIDTextBox" HorizontalAlignment="Left" Height="23" Margin="206,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="203"/>
                            <Label Name="EscA2ReportNameLabel" Content="Report Name:" HorizontalAlignment="Left" Margin="591,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA2ReportNameTextBox" HorizontalAlignment="Left" Height="23" Margin="591,79,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="215"/>
                            <Label Name="EscA2FunctionLabel" Content="Specific Function Not Working:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" Width="343" FontWeight="Bold"/>
                            <TextBox Name="EscA2FunctionTextBox" HorizontalAlignment="Left" Height="23" Margin="10,79,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="399"/>
                            <Label Name="EscA2RequestIDLabel" Content="Request ID:" HorizontalAlignment="Left" Margin="424,59,0,0" VerticalAlignment="Top" Width="136" FontWeight="Bold"/>
                            <TextBox Name="EscA2RequestIDTextBox" HorizontalAlignment="Left" Height="23" Margin="424,79,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="151"/>
                            <Label Name="EscA2IPADLabel" Content="Is this the IPAD App:" HorizontalAlignment="Left" Margin="10,128,0,0" VerticalAlignment="Top" Width="127" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscA2IPADStackpanel" HorizontalAlignment="Left" Height="23" Margin="137,131,0,0" VerticalAlignment="Top" Width="148" Orientation="Horizontal">
                                <RadioButton Name="EscA2IPADYesRadioButton" Content="Yes  " VerticalAlignment="Center" Foreground="#FF31BF31" FontWeight="Bold"/>
                                <RadioButton Name="EscA2IPADNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA2AddLabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,277,0,0" VerticalAlignment="Top" Width="181" Foreground="Black" FontWeight="Bold"/>
                            <TextBox Name="EscA2AddTextBox" HorizontalAlignment="Left" Height="191" Margin="10,300,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA2PartnerLabel" Content="Partner name and OAD/ILS flow you are using:" HorizontalAlignment="Left" Margin="10,159,0,0" VerticalAlignment="Top" Width="275" FontWeight="Bold"/>
                            <TextBox Name="EscA2PartnerTextBox" HorizontalAlignment="Left" Height="23" Margin="10,183,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="275"/>
                            <Label Name="EscA2NetworkLabel" Content="Network Connectivity:" HorizontalAlignment="Left" Margin="333,159,0,0" VerticalAlignment="Top" Width="141" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscA2NetworkStackpanel" HorizontalAlignment="Left" Height="23" Margin="341,183,0,0" VerticalAlignment="Top" Width="133" Orientation="Horizontal">
                                <RadioButton Name="EscA2NetworkYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA2NetworkNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA2PrinterLabel" Content="Printer Issues:" HorizontalAlignment="Left" Margin="490,159,0,0" VerticalAlignment="Top" Width="141" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscA2PrinterStackpanel" HorizontalAlignment="Left" Height="23" Margin="498,183,0,0" VerticalAlignment="Top" Width="133" Orientation="Horizontal">
                                <RadioButton Name="EscA2PrinterYesRadioButton" Content="Yes  " VerticalAlignment="Center" Foreground="#FF31BF31" FontWeight="Bold"/>
                                <RadioButton Name="EscA2PrinterNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA2PowerLabel" Content="Power To Device:" HorizontalAlignment="Left" Margin="333,211,0,0" VerticalAlignment="Top" Width="141" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscA2PowerStackpanel" HorizontalAlignment="Left" Height="23" Margin="341,237,0,0" VerticalAlignment="Top" Width="133" Orientation="Horizontal">
                                <RadioButton Name="EscA2PowerYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA2PowerNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA2PaperLabel" Content="Paper In Device:" HorizontalAlignment="Left" Margin="490,211,0,0" VerticalAlignment="Top" Width="141" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscA2PaperStackpanel" HorizontalAlignment="Left" Height="23" Margin="498,237,0,0" VerticalAlignment="Top" Width="133" Orientation="Horizontal">
                                <RadioButton Name="EscA2PaperYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA2PaperNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA2FlashLabel" Content="Color Flashing On Printer:" HorizontalAlignment="Left" Margin="636,211,0,0" VerticalAlignment="Top" Width="170" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscA2FlashTextBox" HorizontalAlignment="Left" Height="23" Margin="636,237,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="170"/>
                        </Grid>
                        <!-- START EPAY CUSTOMER - EPAY CUSTOMER SECTION -->
                        <Grid Name="EPAY_Grid">
                            <Label Name="EscA3Applabel" Content="Application Impacted:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA3AppTextBox" HorizontalAlignment="Left" Height="22" Margin="10,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="EscA3IDlabel" Content="Account ID or Phone Number:" HorizontalAlignment="Left" Margin="237,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA3IDTextBox" HorizontalAlignment="Left" Height="22" Margin="237,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180"/>
                            <TextBox Name="EscA3AddTextBox" HorizontalAlignment="Left" Height="416" Margin="10,83,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA3Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                        </Grid>
                        <!-- START HARDWARE - COMPUTER SECTION -->
                        <Grid Name="COMPUTER_Grid">
                            <Label Name="EscA4Accessorylabel" Content="Accessory Type:" HorizontalAlignment="Left" Margin="412,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <ComboBox Name="EscA4AccessoryComboBox" HorizontalAlignment="Left" Height="22" Margin="412,32,0,0" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA4HWMakeLabel" Content="Hardware Make:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <WrapPanel Name="EscA4HWMakeStackPanel" HorizontalAlignment="Left" Height="39" Margin="18,32,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscA4HWMakeDellRadioButton" Content="Dell  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4HWMakeIBMRadioButton" Content="IBM  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4HWMakeHPRadioButton" Content="HP  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4HWMakeOtherRadioButton" Content="Other  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <TextBox Name="EscA4HWMakeOtherTextBox" TextWrapping="Wrap" Width="73" VerticalAlignment="Center"/>
                            </WrapPanel>
                            <TextBox Name="EscA4AddTextBox" HorizontalAlignment="Left" Height="86" Margin="10,413,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA4Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,390,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA4BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,244,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA4BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,266,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA4AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,293,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,314,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="384"/>
                            <Label Name="EscA4CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247"/>
                            <Label Name="EscA4StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="EscA4ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA4CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="578,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="578,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="EscA4Machinelabel" Content="Machine Name:" HorizontalAlignment="Left" Margin="10,71,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4MachineTextBox" HorizontalAlignment="Left" Height="22" Margin="10,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Label Name="EscA4IssueLabel" Content="Has this issue occurred multiple&#xD;&#xA;times in the past 3 months:" HorizontalAlignment="Left" Margin="204,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold" Height="44"/>
                            <StackPanel Name="EscA4IssueStackPanel" HorizontalAlignment="Left" Height="22" Margin="213,44,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscA4IssueYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4IssueNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4IssueNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA4BranchPhonelabel" Content="Branch Phone Number:" HorizontalAlignment="Left" Margin="412,293,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4BranchPhoneTextBox" HorizontalAlignment="Left" Height="22" Margin="412,314,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA4JackIDlabel" Content="Jack ID:" HorizontalAlignment="Left" Margin="578,293,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4JackIDTextBox" HorizontalAlignment="Left" Height="22" Margin="578,314,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="EscA4ManagerNamelabel" Content="Manager Name:" HorizontalAlignment="Left" Margin="412,244,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4ManagerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="412,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA4ManagerNumberlabel" Content="Manager Phone:" HorizontalAlignment="Left" Margin="578,244,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4ManagerNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="578,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="EscA4ComputerModellabel" Content="Model:" HorizontalAlignment="Left" Margin="204,71,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4ComputerModelTextBox" HorizontalAlignment="Left" Height="22" Margin="204,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="154"/>
                            <Label Name="EscA4HPComputerSeriallabel" Content="Serial Number:" HorizontalAlignment="Left" Margin="412,71,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4HPComputerSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="148"/>
                            <Label Name="EscA4WarrantyLabel" Content="Out of Warranty:" HorizontalAlignment="Left" Margin="612,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="26"/>
                            <StackPanel Name="EscA4WarrantyStackPanel" HorizontalAlignment="Left" Height="22" Margin="618,32,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscA4WarrantyYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4WarrantyNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4WarrantyNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA4Misclabel" Content="Miscellaneous Info:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4MiscTextBox" HorizontalAlignment="Left" Height="97" Margin="10,142,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA4MouseMakelabel" Content="Mouse Make:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4MouseMakeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4MouseModellabel" Content="Mouse Model:" HorizontalAlignment="Left" Margin="204,121,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4MouseModelTextBox" HorizontalAlignment="Left" Height="22" Margin="204,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="189"/>
                            <Label Name="EscA4MouseSeriallabel" Content="Mouse Serial Number:" HorizontalAlignment="Left" Margin="412,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4MouseSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA4MouseTypeLabel" Content="Mouse Type:" HorizontalAlignment="Left" Margin="612,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="26" Foreground="Red"/>
                            <StackPanel Name="EscA4MouseTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="618,144,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscA4MouseTypeUSBRadioButton" Content="USB  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4MouseTypePS2RadioButton" Content="PS2  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4MouseTypeNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA4KeyboardMakelabel" Content="Keyboard Make:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4KeyboardMakeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4KeyboardModellabel" Content="Keyboard Model:" HorizontalAlignment="Left" Margin="204,121,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4KeyboardModelTextBox" HorizontalAlignment="Left" Height="22" Margin="204,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="189"/>
                            <Label Name="EscA4KeyboardSeriallabel" Content="Keyboard Serial Number:" HorizontalAlignment="Left" Margin="412,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4KeyboardSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA4KeyboardTypeLabel" Content="Keyboard Type:" HorizontalAlignment="Left" Margin="612,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="26" Foreground="Red"/>
                            <StackPanel Name="EscA4KeyboardTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="618,144,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscA4KeyboardTypeUSBRadioButton" Content="USB  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4KeyboardTypePS2RadioButton" Content="PS2  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4KeyboardTypeNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA4MonitorMakelabel" Content="Monitor Make:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4MonitorMakeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4MonitorModellabel" Content="Monitor Model:" HorizontalAlignment="Left" Margin="204,121,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4MonitorModelTextBox" HorizontalAlignment="Left" Height="22" Margin="204,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="154"/>
                            <Label Name="EscA4MonitorSeriallabel" Content="Monitor Serial Number:" HorizontalAlignment="Left" Margin="612,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4MonitorSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="612,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="194"/>
                            <Label Name="EscA4MonitorTypeLabel" Content="Monitor Out of Warranty:" HorizontalAlignment="Left" Margin="10,171,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="26"/>
                            <StackPanel Name="EscA4MonitorWarrantyStackPanel" HorizontalAlignment="Left" Height="22" Margin="165,174,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscA4MonitorrWarrantyYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4MonitorrWarrantyNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA4MonitorrWarrantyNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA4MonitorTypellabel" Content="Monitor Model Type:" HorizontalAlignment="Left" Margin="412,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4MonitorTypeTextBox" HorizontalAlignment="Left" Height="22" Margin="412,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA4Batterylabel" Content="Battery Serial Number:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4BatteryTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4CableLocklabel" Content="Cable Lock Serial Number:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4CableLockTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4DockMakelabel" Content="Docking Station Make:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4DockMakeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4DockPartlabel" Content="Docking Station Part Number:" HorizontalAlignment="Left" Margin="204,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4DockPartTextBox" HorizontalAlignment="Left" Height="22" Margin="204,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="189"/>
                            <Label Name="EscA4DockSeriallabel" Content="Docking Station Serial Number:" HorizontalAlignment="Left" Margin="412,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4DockSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="188"/>
                            <Label Name="EscA4EpadMakelabel" Content="ePad Make:" HorizontalAlignment="Left" Margin="10,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4EpadMakeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA4EpadModellabel" Content="ePad Model:" HorizontalAlignment="Left" Margin="204,121,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA4EpadModelTextBox" HorizontalAlignment="Left" Height="22" Margin="204,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="189"/>
                            <Label Name="EscA4EpadSeriallabel" Content="ePad Serial Number:" HorizontalAlignment="Left" Margin="412,121,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4EpadSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,144,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA4IBMComputerSeriallabel" Content="Serial Number:" HorizontalAlignment="Left" Margin="612,71,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4IBMComputerSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="612,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="159"/>
                            <Label Name="EscA4IBMModelTypelabel" Content="Model Type:" HorizontalAlignment="Left" Margin="412,71,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4IBMModelTypeTextBox" HorizontalAlignment="Left" Height="22" Margin="412,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA4DELLComputerSeriallabel" Content="Service Tag Number:" HorizontalAlignment="Left" Margin="412,71,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4DELLComputerSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="148"/>
                            <Label Name="EscA4DELLServiceCodelabel" Content="Express Service Code:" HorizontalAlignment="Left" Margin="612,71,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA4DELLServiceCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="612,94,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="159"/>
                            <Button Name="EscA4MachineLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,94,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA4ComputerModelLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="363,94,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA4DELLServiceCodeLookupButton" Content="$([char]0x71)" HorizontalAlignment="Left" Margin="776,94,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA4DELLComputerSerialLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="565,94,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA4IBMComputerSerialLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="776,94,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA4HPComputerSerialLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="565,94,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Button Name="EscA4MonitorModelLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="363,142,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                        </Grid>
                        <!-- START HARDWARE - SERVER HARDWARE SECTION -->
                        <Grid Name="SERVERHW_Grid">
                            <TextBox Name="EscA5AddTextBox" HorizontalAlignment="Left" Height="86" Margin="10,413,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA5Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,390,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA5BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA5BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA5BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,33,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA5AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,293,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,314,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="384"/>
                            <Label Name="EscA5CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247"/>
                            <Label Name="EscA5StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="EscA5ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA5CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="578,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="578,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="EscA5ServerNamelabel" Content="Server Name:" HorizontalAlignment="Left" Margin="204,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5ServerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="204,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="155"/>
                            <Button Name="EscA5ServerNamePingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="364,33,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA5ServerModellabel" Content="Model Type:" HorizontalAlignment="Left" Margin="412,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA5ServerModelTextBox" HorizontalAlignment="Left" Height="22" Margin="412,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="192"/>
                            <Label Name="EscA5ServerSeriallabel" Content="Serial Number:" HorizontalAlignment="Left" Margin="623,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA5ServerSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="623,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="183"/>
                            <Label Name="EscA5LobbyIDLabel" Content="Lobby ID:" HorizontalAlignment="Left" Margin="10,60,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA5LobbyIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,84,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA5LobbyIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,84,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA5ServerIPLabel" Content="Server IP:" HorizontalAlignment="Left" Margin="204,60,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA5ServerIPTextBox" HorizontalAlignment="Left" Height="22" Margin="204,84,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="154"/>
                            <Button Name="EscA5ServerIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="363,84,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA5RouterIPLabel" Content="Router / Gateway IP:" HorizontalAlignment="Left" Margin="412,60,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA5RouterIPTextBox" HorizontalAlignment="Left" Height="22" Margin="412,84,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="157"/>
                            <Button Name="EscA5RouterIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="574,84,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA5Troublelabel" Content="Server Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="10,111,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA5TroubleTextBox" HorizontalAlignment="Left" Height="106" Margin="10,133,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                        </Grid>
                        <!-- START NETWORK - NETWORK SECTION -->
                        <Grid Name="NETWORK_Grid">
                            <Label Name="EscA7IssueLabel" Content="Has this issue occurred multiple &#xD;&#xA;times in the past 3 months:" HorizontalAlignment="Left" Margin="237,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscA7IssueStackPanel" HorizontalAlignment="Left" Height="22" Margin="245,46,0,0" VerticalAlignment="Top" Width="164" Orientation="Horizontal">
                                <RadioButton Name="EscA7IssueYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA7IssueNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA7IssueNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <TextBox Name="EscA7AddTextBox" HorizontalAlignment="Left" Height="60" Margin="10,439,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA7Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,415,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA7ServerNameLabel" Content="Server Name:" HorizontalAlignment="Left" Margin="10,195,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7ServerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="10,217,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="EscA7ServerNamePingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="189,217,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA7ServerIPLabel" Content="Server IP:" HorizontalAlignment="Left" Margin="237,195,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7ServerIPTextBox" HorizontalAlignment="Left" Height="22" Margin="237,217,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="EscA7ServerIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="416,217,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA7BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="337,317,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="337,338,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="157"/>
                            <Button Name="EscA7BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="499,338,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA7PingResultsLabel" Content="Server Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="10,244,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7PingResultsTextBox" HorizontalAlignment="Left" Height="45" Margin="10,267,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="664" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA7SiteCodeLabel" Content="Site Code:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7SiteCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Button Name="EscA7SiteCodeLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="189,32,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA7AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,317,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,338,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="309"/>
                            <Label Name="EscA7CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,365,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,387,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="EscA7StateLabel" Content="State:" HorizontalAlignment="Left" Margin="201,365,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7StateTextBox" HorizontalAlignment="Left" Height="22" Margin="201,387,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="EscA7ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="337,365,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="337,387,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="139"/>
                            <Label Name="EscA7CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="493,365,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="493,387,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="146"/>
                            <TextBox Name="EscA7JackIDTextBox" HorizontalAlignment="Left" Height="22" Margin="658,387,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="148"/>
                            <Label Name="EscA7JackIDLabel" Content="Jack ID:" HorizontalAlignment="Left" Margin="658,365,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7GatewayIPTextBox" HorizontalAlignment="Left" Height="22" Margin="465,217,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="174"/>
                            <Label Name="EscA7GatewayIPLabel" Content="Router/Gateway IP:" HorizontalAlignment="Left" Margin="465,195,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Button Name="EscA7GatewayIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="644,217,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA7TimeLabel" Content="Time of Slowness:" HorizontalAlignment="Left" Margin="10,70,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7TimeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,93,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="209"/>
                            <Label Name="EscA7FrequencyLabel" Content="Frequency of Issue:" HorizontalAlignment="Left" Margin="237,70,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7FrequencyTextBox" HorizontalAlignment="Left" Height="22" Margin="237,93,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="209"/>
                            <Label Name="EscA7AffectedLabel" Content="What Applications are Affected:" HorizontalAlignment="Left" Margin="465,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7AffectedTextBox" HorizontalAlignment="Left" Height="22" Margin="465,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="341"/>
                            <Label Name="EscA7OtherAffectedlabel" Content="List other affected Computer names/IPs:" HorizontalAlignment="Left" Margin="465,54,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA7OtherAffectedTextBox" HorizontalAlignment="Left" Height="52" Margin="465,78,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="341" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA7SiteTypeLabel" Content="Site Code:" HorizontalAlignment="Left" Margin="10,140,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscA7SiteTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="15,161,0,0" VerticalAlignment="Top" Width="219" Orientation="Horizontal">
                                <RadioButton Name="EscA7SiteTypeBranchRadioButton" Content="Branch  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA7SiteTypeCorpRadioButton" Content="Corporate  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA7SiteTypeComboRadioButton" Content="Combo  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA7TrainLabel" Content="Is this a Training Site:" HorizontalAlignment="Left" Margin="239,140,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscA7TrainStackPanel" HorizontalAlignment="Left" Height="22" Margin="245,161,0,0" VerticalAlignment="Top" Width="139" Orientation="Horizontal">
                                <RadioButton Name="EscA7TrainYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA7TrainNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA7TrainNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA7BankersLabel" Content="Number of Bankers:" HorizontalAlignment="Left" Margin="465,140,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7BankersTextBox" HorizontalAlignment="Left" Height="22" Margin="465,161,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="157"/>
                            <Label Name="EscA7TellersLabel" Content="Number of Tellers:" HorizontalAlignment="Left" Margin="658,140,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA7TellersTextBox" HorizontalAlignment="Left" Height="22" Margin="658,161,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="148"/>
                        </Grid>
                        <!-- START PRINTER - EPSON-NEXUS SECTION -->
                        <Grid Name="EPSON_Grid">
                            <Label Name="EscA8PartLabel" Content="Part being replaced:" HorizontalAlignment="Left" Margin="204,60,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <WrapPanel Name="EscA8PartWrapPanel" HorizontalAlignment="Left" Height="50" Margin="209,83,0,0" VerticalAlignment="Top" Width="165" Orientation="Horizontal">
                                <CheckBox Name="EscA8NoneCheckBox" Content="None  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscA8CableCheckBox" Content="Power Cable  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscA8SupplyCheckBox" Content="Power Supply  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscA8PrinterCheckBox" Content="Printer  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscA8DataCheckBox" Content="Data Cable  " FontWeight="Bold" Foreground="#FF18186E"/>
                            </WrapPanel>
                            <TextBox Name="EscA8AddTextBox" HorizontalAlignment="Left" Height="86" Margin="10,413,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA8Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,390,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA8BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,244,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA8BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,266,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA8AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,293,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,314,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="384"/>
                            <Label Name="EscA8CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247"/>
                            <Label Name="EscA8StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="EscA8ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,341,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA8CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="578,341,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA8CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="578,363,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="EscA8ReceiptsLabel" Content="Printer refusing to&#xD;&#xA;accept receipts:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="45"/>
                            <WrapPanel Name="EscA8ReceiptsWrapPanel" HorizontalAlignment="Left" Height="38" Margin="19,100,0,0" VerticalAlignment="Top" Width="121" Orientation="Horizontal">
                                <RadioButton Name="EscA8ReceiptsYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA8ReceiptsNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <TextBox Name="EscA8ReceiptsYesTextBox" Width="100"/>
                            </WrapPanel>
                            <Label Name="EscA8BranchPhonelabel" Content="Branch Phone Number:" HorizontalAlignment="Left" Margin="412,293,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA8BranchPhoneTextBox" HorizontalAlignment="Left" Height="22" Margin="412,314,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA8PrinterModellabel" Content="Epson Model Number:" HorizontalAlignment="Left" Margin="204,11,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8PrinterModelTextBox" HorizontalAlignment="Left" Height="22" Margin="204,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="190"/>
                            <Label Name="EscA8PrinterSeriallabel" Content="Printer Serial Number:" HorizontalAlignment="Left" Margin="412,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8PrinterSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="412,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscA8PrinterTypeLabel" Content="Printer Type:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="26" Foreground="Red"/>
                            <StackPanel Name="EscA8PrinterTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="19,32,0,0" VerticalAlignment="Top" Width="121" Orientation="Horizontal">
                                <RadioButton Name="EscA8PrinterTypeEpsonRadioButton" Content="Epson  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA8PrinterTypeNexusRadioButton" Content="Nexus  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA8LobbyIDLabel" Content="Lobby ID:" HorizontalAlignment="Left" Margin="204,244,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA8LobbyIDTextBox" HorizontalAlignment="Left" Height="22" Margin="204,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="155"/>
                            <Button Name="EscA8LobbyIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="364,266,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA8BranchSiteLabel" Content="Branch Site Code:" HorizontalAlignment="Left" Margin="412,244,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA8BranchSiteTextBox" HorizontalAlignment="Left" Height="22" Margin="412,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="114"/>
                            <Button Name="EscA8BranchSiteLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="531,266,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA8BranchNameLabel" Content="Branch Name:" HorizontalAlignment="Left" Margin="579,244,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA8BranchNameTextBox" HorizontalAlignment="Left" Height="22" Margin="579,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="227"/>
                            <Label Name="EscA8Frequencylabel" Content="Frequency Of Issue:" HorizontalAlignment="Left" Margin="579,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA8FrequencyTextBox" HorizontalAlignment="Left" Height="22" Margin="579,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="223"/>
                            <Label Name="EscA8RequestLabel" Content="Branch requesting 4 or more &#xD;&#xA;replacement validators:" HorizontalAlignment="Left" Margin="10,138,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="44"/>
                            <StackPanel Name="EscA8RequestStackPanel" HorizontalAlignment="Left" Height="22" Margin="19,177,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="EscA8RequestYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA8RequestNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA8RequestNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA8LocationLabel" Content="If yes, where have these &#xD;&#xA;validators been located:" HorizontalAlignment="Left" Margin="204,138,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="44" Foreground="Red"/>
                            <WrapPanel Name="EscA8LocationWrapPanel" HorizontalAlignment="Left" Height="38" Margin="211,177,0,0" VerticalAlignment="Top" Width="183" Orientation="Horizontal">
                                <RadioButton Name="EscA8LocationProductionRadioButton" Content="In Production On Teller Line" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA8LocationStorageRadioButton" Content="In Storage Area (spares)" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </WrapPanel>
                            <Label Name="EscA8ReplacementLabel" Content="For any validator that came directly &#xD;&#xA;from production use, how is that &#xD;&#xA;Computer being supported? " HorizontalAlignment="Left" Margin="412,138,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="61"/>
                            <WrapPanel Name="EscA8ReplacementWrapPanel" HorizontalAlignment="Left" Height="47" Margin="421,192,0,0" VerticalAlignment="Top" Width="205" Orientation="Horizontal">
                                <RadioButton Name="EscA8ReplacementNotRadioButton" Content="Branch is not using Computer" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA8ReplacementSpareRadioButton" Content="Using spare validator " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA8ReplacementBorrowedRadioButton" Content="Borrowed validator " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </WrapPanel>
                        </Grid>
                        <!-- START PRINTER - PRINTER SECTION -->
                        <Grid Name="PRINTER_Grid">
                            <TextBox Name="EscA9AddTextBox" HorizontalAlignment="Left" Height="30" Margin="10,470,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA9Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,448,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA9BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,314,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,336,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA9BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,336,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA9AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,360,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,382,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="384"/>
                            <Label Name="EscA9CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,405,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,427,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247"/>
                            <Label Name="EscA9StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,405,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,427,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="EscA9ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,404,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,427,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180"/>
                            <Label Name="EscA9CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="610,404,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="610,427,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9BranchPhonelabel" Content="Branch Phone Number:" HorizontalAlignment="Left" Margin="412,360,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9BranchPhoneTextBox" HorizontalAlignment="Left" Height="22" Margin="412,382,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180"/>
                            <Label Name="EscA9PrinterNamelabel" Content="Printer Name:" HorizontalAlignment="Left" Margin="10,5,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9PrinterNameTextBox" HorizontalAlignment="Left" Height="22" Margin="10,27,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA9PrinterTypeLabel" Content="Printer Type:" HorizontalAlignment="Left" Margin="412,5,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="26" Foreground="Red"/>
                            <StackPanel Name="EscA9PrinterTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="420,27,0,0" VerticalAlignment="Top" Width="140" Orientation="Horizontal">
                                <RadioButton Name="EscA9PrinterTypeLocalRadioButton" Content="Local  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9PrinterTypeNetworkRadioButton" Content="Network  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                            </StackPanel>
                            <Label Name="EscA9ManagerNameLabel" Content="Manager Name:" HorizontalAlignment="Left" Margin="204,314,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9ManagerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="204,336,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="190"/>
                            <Label Name="EscA9ManagerPhoneLabel" Content="Manager Phone:" HorizontalAlignment="Left" Margin="412,314,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9ManagerPhoneTextBox" HorizontalAlignment="Left" Height="22" Margin="412,336,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180"/>
                            <Label Name="EscA9JackIDLabel" Content="Jack ID:" HorizontalAlignment="Left" Margin="610,314,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9JackIDTextBox" HorizontalAlignment="Left" Height="22" Margin="610,336,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9PrintServerlabel" Content="Printer Server:" HorizontalAlignment="Left" Margin="610,5,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9PrintServerTextBox" HorizontalAlignment="Left" Height="22" Margin="610,27,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9PastIssueLabel" Content="Has this issue occurred multiple &#xD;&#xA;times in the past 3 months:" HorizontalAlignment="Left" Margin="204,5,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="44" Foreground="Red"/>
                            <StackPanel Name="EscA9PastIssueStackPanel" HorizontalAlignment="Left" Height="22" Margin="211,38,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="EscA9PastIssueYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9PastIssueNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9PastIssueNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9PrinterLocationlabel" Content="Printer Location:" HorizontalAlignment="Left" Margin="10,58,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9PrinterLocationTextBox" HorizontalAlignment="Left" Height="22" Margin="10,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscA9PrinterSeriallabel" Content="Printer Serial Number:" HorizontalAlignment="Left" Margin="204,58,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9PrinterSerialTextBox" HorizontalAlignment="Left" Height="22" Margin="204,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="190"/>
                            <Label Name="EscA9PrinterModellabel" Content="Printer Model:" HorizontalAlignment="Left" Margin="412,58,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9PrinterModelTextBox" HorizontalAlignment="Left" Height="22" Margin="412,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180"/>
                            <Label Name="EscA9PrinterModelTypelabel" Content="Printer Model Type:" HorizontalAlignment="Left" Margin="610,58,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9PrinterModelTypeTextBox" HorizontalAlignment="Left" Height="22" Margin="610,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9PrinterPinglabel" Content="Printer IP:" HorizontalAlignment="Left" Margin="10,105,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9PrinterPingTextBox" HorizontalAlignment="Left" Height="22" Margin="10,128,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscA9PrinterPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="155,128,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA9MainframeDestlabel" Content="Mainframe Dest Name:" HorizontalAlignment="Left" Margin="610,105,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9MainframeDestTextBox" HorizontalAlignment="Left" Height="22" Margin="610,128,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9MainframePrintStatuslabel" Content="Mainframe Printer Status:" HorizontalAlignment="Left" Margin="610,153,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9MainframePrintStatusTextBox" HorizontalAlignment="Left" Height="22" Margin="610,176,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9PrinterWarrantyLabel" Content="Printer Out of Warranty:" HorizontalAlignment="Left" Margin="204,105,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="24"/>
                            <StackPanel Name="EscA9PrinterWarrantyStackPanel" HorizontalAlignment="Left" Height="22" Margin="211,128,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="EscA9PrinterWarrantyYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9PrinterWarrantyNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9PrinterWarrantyNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9MainframeFaxLabel" Content="Is Printer Mainframe or Fax:" HorizontalAlignment="Left" Margin="412,105,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="24" Width="166" Foreground="Red"/>
                            <StackPanel Name="EscA9MainframeFaxStackPanel" HorizontalAlignment="Left" Height="22" Margin="420,128,0,0" VerticalAlignment="Top" Width="180" Orientation="Horizontal">
                                <RadioButton Name="EscA9MainframeFaxMFRadioButton" Content="Mainframe " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA9MainframeFaxFaxRadioButton" Content="Fax " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA9PMainframeFaxNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9InboundFaxlabel" Content="Inbound Fax Capable:" HorizontalAlignment="Left" Margin="610,201,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9InboundFaxTextBox" HorizontalAlignment="Left" Height="22" Margin="610,224,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <TextBox Name="EscA9PrinterTroubleTextBox" HorizontalAlignment="Left" Height="30" Margin="10,282,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="582" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscA9PrinterTroublelabel" Content="Printer Troubleshooting Steps Completed:" HorizontalAlignment="Left" Margin="10,259,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscA9BranchTypeLabel" Content="Branch Type:" HorizontalAlignment="Left" Margin="610,246,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="24" Foreground="Red"/>
                            <StackPanel Name="EscA9BranchTypeStackPanel" HorizontalAlignment="Left" Height="49" Margin="618,267,0,0" VerticalAlignment="Top" Width="166" Orientation="Vertical">
                                <RadioButton Name="EscA9BranchTypeInStoreRadioButton" Content="In-Store" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9BranchTypeTraditionalRadioButton" Content="Traditional" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9BranchTypeNARadioButton" Content="N/A" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9MICRLabel" Content="Is this a MICR printer:" HorizontalAlignment="Left" Margin="10,153,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="24" Foreground="Red"/>
                            <StackPanel Name="EscA9MICRStackPanel" HorizontalAlignment="Left" Height="22" Margin="15,176,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="EscA9MICRYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9MICRNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9MICRNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9TonerStreaksLabel" Content="Are there streaks of toner on &#xD;&#xA;the paper:" HorizontalAlignment="Left" Margin="204,149,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="45"/>
                            <StackPanel Name="EscA9TonerStreaksStackPanel" HorizontalAlignment="Left" Height="22" Margin="211,184,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="EscA9TonerStreaksYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9TonerStreaksNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9TonerStreaksNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9NewTonerLabel" Content="Is this a new toner cartridge:" HorizontalAlignment="Left" Margin="412,153,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="24"/>
                            <StackPanel Name="EscA9NewTonerStackPanel" HorizontalAlignment="Left" Height="22" Margin="420,176,0,0" VerticalAlignment="Top" Width="166" Orientation="Horizontal">
                                <RadioButton Name="EscA9NewTonerYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9NewTonerNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscA9NewTonerNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9ChangeTonerlabel" Content="Changed Toner Cartridge On:" HorizontalAlignment="Left" Margin="412,201,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9ChangeTonerTextBox" HorizontalAlignment="Left" Height="22" Margin="412,224,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="145"/>
                            <Button Name="EscA9ChangeTonerCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="562,224,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscA9LoanCalcLabel" Content="Does this print Remote&#xD;&#xA;Documents (aka LoanCalc): " HorizontalAlignment="Left" Margin="10,198,0,0" VerticalAlignment="Top" FontWeight="Bold" Height="44" Foreground="Red"/>
                            <StackPanel Name="EscA9LoanCalcStackPanel" HorizontalAlignment="Left" Height="22" Margin="15,235,0,0" VerticalAlignment="Top" Width="99" Orientation="Horizontal">
                                <RadioButton Name="EscA9LoanCalcYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscA9LoanCalcNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscA9SecondQueueNumberlabel" Content="Secondary queue name:" HorizontalAlignment="Left" Margin="204,201,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscA9SecondQueueTextBox" HorizontalAlignment="Left" Height="22" Margin="206,224,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="190"/>
                            <Label Name="EscA9FaxNumberlabel" Content="Fax Number:" HorizontalAlignment="Left" Margin="610,105,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9FaxNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="610,128,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Label Name="EscA9AccuRoutelabel" Content="AccuRoute Enabled:" HorizontalAlignment="Left" Margin="610,153,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscA9AccuRouteTextBox" HorizontalAlignment="Left" Height="22" Margin="610,176,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="196"/>
                            <Calendar Name="EscA9Calendar" HorizontalAlignment="Left" Margin="413,245,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START SECURITY - DRIVE MAPPING-ROLE SECTION -->
                        <Grid Name="MAPPING_Grid">
                            <Label Name="EscB1FullPathLabel" Content="Full Path:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="181" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB1FullPathTextBox" HorizontalAlignment="Left" Height="22" Margin="10,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Center"/>
                            <Label Name="EscB1CoworkerLabel" Content="Co-worker ID that can access:" HorizontalAlignment="Left" Margin="10,59,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB1CoworkerTextBox" HorizontalAlignment="Left" Height="22" Margin="10,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Center"/>
                            <Label Name="EscB1DriveLetterLabel" Content="Drive Letter:" HorizontalAlignment="Left" Margin="206,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB1DriveLetterTextBox" HorizontalAlignment="Left" Height="22" Margin="206,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="203" VerticalContentAlignment="Center"/>
                            <Label Name="EscB1LastTimeLabel" Content="Last time user was able to access:" HorizontalAlignment="Left" Margin="10,109,0,0" VerticalAlignment="Top" Width="343" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB1LastTimeTextBox" HorizontalAlignment="Left" Height="22" Margin="10,133,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Center"/>
                            <Button Name="EscB1LastTimeCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="196,133,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB1AddLabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,277,0,0" VerticalAlignment="Top" Width="181" Foreground="Black" FontWeight="Bold"/>
                            <TextBox Name="EscB1AddTextBox" HorizontalAlignment="Left" Height="199" Margin="10,300,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB1EntRoleLabel" Content="Enterprise Role:" HorizontalAlignment="Left" Margin="206,59,0,0" VerticalAlignment="Top" Width="170" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscB1EntRoleTextBox" HorizontalAlignment="Left" Height="22" Margin="206,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="203" VerticalContentAlignment="Center"/>
                            <Label Name="EscB1AffectedFilesLabel" Content="Affected File Names:" HorizontalAlignment="Left" Margin="424,10,0,0" VerticalAlignment="Top" Width="181" Foreground="Red" FontWeight="Bold"/>
                            <TextBox Name="EscB1AffectedFilesTextBox" HorizontalAlignment="Left" Height="69" Margin="424,31,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="382" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Calendar Name="EscB1Calender" HorizontalAlignment="Left" Margin="231,127,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START SECURITY - INFO SECURITY PASSWORD SECTION -->
                        <Grid Name="INFOSEC_Grid">
                            <Label Name="EscB2UserIDlabel" Content="User ID:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB2UserIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="144"/>
                            <Label Name="EscB2PasswordLabel" Content="Password:" HorizontalAlignment="Left" Margin="12,59,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <WrapPanel Name="EscB2PasswordWrapPanel" HorizontalAlignment="Left" Height="123" Margin="19,85,0,0" VerticalAlignment="Top" Width="302">
                                <RadioButton Name="EscB2EastMFRadioButton" Content="East Mainframe               " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2WestMainframeRadioButton" Content="West Mainframe      " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2OtherRadioButton" Content="Other (Specify)  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <TextBox Name="EscB2OtherTextBox" Height="23" TextWrapping="NoWrap" Width="120"/>
                                <RadioButton Name="EscB2NotesRadioButton" Content="Lotus Notes/USBMail     " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2NovellRadioButton" Content="Novell  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2UnixRadioButton" Content="Unix (Specify)  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <TextBox Name="EscB2UnixTextBox" Height="23" TextWrapping="NoWrap" Width="120"/>
                                <Button Name="EscB2UnixPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                                <RadioButton Name="EscB2USRadioButton" Content="US        " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2NTRadioButton" Content="NT Domain    " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2InternetRadioButton" Content="Intranet/Internet  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB2EmerIDRadioButton" Content="Emergency ID (Specify)  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <TextBox Name="EscB2EmerIDTextBox" Height="23" TextWrapping="NoWrap" Width="120"/>
                            </WrapPanel>
                            <TextBox Name="EscB2AddTextBox" HorizontalAlignment="Left" Height="138" Margin="10,361,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB2Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,340,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscB2Regionlabel" Content="Region:" HorizontalAlignment="Left" Margin="179,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB2RegionTextBox" HorizontalAlignment="Left" Height="22" Margin="179,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="144"/>
                            <Label Name="EscB2PingResultslabel" Content="Unix Ping Results:" HorizontalAlignment="Left" Margin="10,213,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB2PingResultsTextBox" HorizontalAlignment="Left" Height="103" Margin="10,237,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="559" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB2LastSignonlabel" Content="Last time user signed on successfully:" HorizontalAlignment="Left" Margin="349,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB2LastSignonTextBox" HorizontalAlignment="Left" Height="22" Margin="349,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="185"/>
                            <Button Name="EscB2LastSignonCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="539,32,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB2LastResetlabel" Content="When did user last reset password?" HorizontalAlignment="Left" Margin="594,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB2LastResetTextBox" HorizontalAlignment="Left" Height="22" Margin="594,32,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="177"/>
                            <Button Name="EscB2LastResetCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="776,32,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Calendar Name="EscB2LastSignonCalendar" HorizontalAlignment="Left" Margin="390,54,0,0" VerticalAlignment="Top"/>
                            <Calendar Name="EscB2LastResetCalendar" HorizontalAlignment="Left" Margin="627,54,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START SERVER - FILE RESTORE SECTION -->
                        <Grid Name="FILERESTORE_Grid">
                            <TextBox Name="EscB3AddTextBox" HorizontalAlignment="Left" Height="110" Margin="10,389,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB3Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,366,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscB3Date1label" Content="Date 1:" HorizontalAlignment="Left" Margin="272,127,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB3Date1TextBox" HorizontalAlignment="Left" Height="22" Margin="272,149,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Label Name="EscB3FileDeletedLabel" Content="Was the file deleted:" HorizontalAlignment="Left" Margin="12,262,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscB3FileDeletedStackPanel" HorizontalAlignment="Left" Height="22" Margin="19,284,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB3FileDeletedYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3FileDeletedNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3FileDeletedNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Button Name="EscB3Date1CalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="417,149,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB3RestoreFromlabel" Content="Restore FROM Information: " HorizontalAlignment="Left" Height="31" Margin="10,10,0,0" VerticalAlignment="Top" Width="796" FontWeight="Bold" FontSize="18"/>
                            <Label Name="EscB3ServerNamelabel" Content="Server Name:" HorizontalAlignment="Left" Margin="10,41,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB3ServerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="10,64,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscB3DirPathlabel" Content="Directory Path:" HorizontalAlignment="Left" Margin="272,41,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB3DirPathTextBox" HorizontalAlignment="Left" Height="22" Margin="272,64,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscB3Fileslabel" Content="Files:" HorizontalAlignment="Left" Margin="542,41,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB3FilesTextBox" HorizontalAlignment="Left" Height="51" Margin="542,64,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="264" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB3RestoreTolabel" Content="Restore TO Information: " HorizontalAlignment="Left" Height="31" Margin="12,96,0,0" VerticalAlignment="Top" Width="796" FontWeight="Bold" FontSize="18"/>
                            <Label Name="EscB3RestoreServerlabel" Content="Server to restore files to:" HorizontalAlignment="Left" Margin="10,127,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB3RestoreServerTextBox" HorizontalAlignment="Left" Height="22" Margin="10,149,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscB3Alt2label" Content="Alternate Date 2:" HorizontalAlignment="Left" Margin="12,176,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB3Alt2TextBox" HorizontalAlignment="Left" Height="22" Margin="10,199,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB3Alt2CalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="155,199,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB3Alt3label" Content="Alternate Date 3:" HorizontalAlignment="Left" Margin="272,176,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB3Alt3TextBox" HorizontalAlignment="Left" Height="22" Margin="272,199,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB3Alt3CalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="417,199,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB3Alt4label" Content="Alternate Date 4:" HorizontalAlignment="Left" Margin="542,176,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB3Alt4TextBox" HorizontalAlignment="Left" Height="22" Margin="542,199,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB3Alt4CalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="687,199,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB3REasonlabel" Content="Reason / Other OPTIONS For Restore:" HorizontalAlignment="Left" Height="31" Margin="12,226,0,0" VerticalAlignment="Top" Width="796" FontWeight="Bold" FontSize="18"/>
                            <Label Name="EscB3TryRestoreLabel" Content="Did you try and restore using Shadow Copy:" HorizontalAlignment="Left" Margin="272,262,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscB3TryRestoreStackPanel" HorizontalAlignment="Left" Height="22" Margin="278,284,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB3TryRestoreYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3TryRestoredNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3TryRestoredNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB3FileCorruptedLabel" Content="Is the file corrupted:" HorizontalAlignment="Left" Margin="10,311,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscB3FileCorruptedStackPanel" HorizontalAlignment="Left" Height="22" Margin="19,334,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB3FileCorruptedYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3FileCorruptedNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3FileCorruptedNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB3AnotherCopyLabel" Content="Is there another suitable copy on the server or &#xD;&#xA;affected Computer:" HorizontalAlignment="Left" Margin="272,311,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB3AnotherCopyStackPanel" HorizontalAlignment="Left" Height="22" Margin="278,348,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB3AnotherCopyYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3AnotherCopyNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB3AnotherCopyNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Calendar Name="EscB3Date1Calnedar" HorizontalAlignment="Left" Margin="272,171,0,0" VerticalAlignment="Top"/>
                            <Calendar Name="EscB3Alt2Calendar" HorizontalAlignment="Left" Margin="10,221,0,0" VerticalAlignment="Top"/>
                            <Calendar Name="EscB3Alt3Calendar" HorizontalAlignment="Left" Margin="272,221,0,0" VerticalAlignment="Top"/>
                            <Calendar Name="EscB3Alt4Calendar" HorizontalAlignment="Left" Margin="542,221,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START SERVER - SERVER SECTION -->
                        <Grid Name="SERVER_Grid">
                            <TextBox Name="EscB4AddTextBox" HorizontalAlignment="Left" Height="169" Margin="10,330,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB4Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,307,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscB4BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB4BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="10,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB4BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="155,33,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB4AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,210,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB4AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,231,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="384"/>
                            <Label Name="EscB4CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,258,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB4CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,280,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247"/>
                            <Label Name="EscB4StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,258,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB4StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,280,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118"/>
                            <Label Name="EscB4ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,258,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB4ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,280,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149"/>
                            <Label Name="EscB4CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="578,258,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB4CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="578,280,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228"/>
                            <Label Name="EscB4ServerNamelabel" Content="Server Name:" HorizontalAlignment="Left" Margin="10,60,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB4ServerNameTextBox" HorizontalAlignment="Left" Height="22" Margin="10,84,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB4ServerNamePingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="155,84,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB4ServerIPLabel" Content="Server IP:" HorizontalAlignment="Left" Margin="10,111,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB4ServerIPTextBox" HorizontalAlignment="Left" Height="22" Margin="10,134,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB4ServerIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="155,134,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB4RouterIPLabel" Content="Router / Gateway IP:" HorizontalAlignment="Left" Margin="10,161,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB4RouterIPTextBox" HorizontalAlignment="Left" Height="22" Margin="10,183,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140"/>
                            <Button Name="EscB4RouterIPPingButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="155,183,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB4PingResultslabel" Content="Ping Results:" HorizontalAlignment="Left" Margin="414,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB4PingResultsTextBox" HorizontalAlignment="Left" Height="123" Margin="414,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="392" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB4IssueLabel" Content="Has this issue occurred multiple &#xD;&#xA;times in the past 3 months:" HorizontalAlignment="Left" Margin="206,10,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscB4IssueStackPanel" HorizontalAlignment="Left" Height="22" Margin="214,46,0,0" VerticalAlignment="Top" Width="164" Orientation="Horizontal">
                                <RadioButton Name="EscB4IssueYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB4IssueNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <RadioButton Name="EscB4IssueNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold"/>
                            </StackPanel>
                            <Label Name="EscB4RebootLabel" Content="Server Reboot Requested:" HorizontalAlignment="Left" Margin="206,161,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <StackPanel Name="EscB4RebootStackPanel" HorizontalAlignment="Left" Height="22" Margin="218,184,0,0" VerticalAlignment="Top" Width="386" Orientation="Horizontal">
                                <RadioButton Name="EscB4RebootYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB4RebootNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold"/>
                                <TextBox Name="EscB4RebootTextBox" TextWrapping="NoWrap" Width="276"/>
                            </StackPanel>
                        </Grid>
                        <!-- START TRANSMISSION - TRANSMISSION SECTION -->
                        <Grid Name="TRANSMISSION_Grid">
                            <TextBox Name="EscB5AdditionalTextBox" HorizontalAlignment="Left" Height="320" Margin="10,179,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB5Additionallabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,157,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscB5DSNLabel" Content="DSN:" HorizontalAlignment="Left" Margin="608,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB5DSNTextBox" HorizontalAlignment="Left" Height="22" Margin="608,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="198" VerticalContentAlignment="Center"/>
                            <Label Name="EscB5FileNameLabel" Content="File Name,Mailbox, or Transmit ID:" HorizontalAlignment="Left" Margin="207,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB5FileNameTextBox" HorizontalAlignment="Left" Height="22" Margin="207,33,0,0" TextWrapping="NoWrap" VerticalAlignment="Top" Width="206" VerticalContentAlignment="Center"/>
                            <Label Name="EscB5JobNameLabel" Content="CA7 Job Name:" HorizontalAlignment="Left" Margin="418,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB5JobNameTextBox" HorizontalAlignment="Left" Height="22" Margin="418,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="185" VerticalContentAlignment="Center"/>
                            <Label Name="EscB5Directionlabel" Content="Direction:" HorizontalAlignment="Left" Margin="422,63,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="EscB5DirectionStackPanel" HorizontalAlignment="Left" Height="22" Margin="428,81,0,0" VerticalAlignment="Top" Width="191" Orientation="Horizontal">
                                <RadioButton Name="EscB5DirectionIncomingRadioButton" Content="Incoming  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB5DirectionOutgoingRadioButton" Content="Outgoing  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB5Methodlabel" Content="Method of Transmission:" HorizontalAlignment="Left" Margin="10,60,0,0" VerticalAlignment="Top" FontWeight="Bold" Width="181" Foreground="Red"/>
                            <StackPanel Name="EscB5MethodStackPanel" HorizontalAlignment="Left" Height="22" Margin="15,81,0,0" VerticalAlignment="Top" Width="350" Orientation="Horizontal">
                                <RadioButton Name="EscB5MethodMailboxRadioButton" Content="Mailbox  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB5MethodConnectDirectRadioButton" Content="Connect Direct  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB5MethodConnectEnterpriseRadioButton" Content="Connect Enterprise  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB5MethodIERadioButton" Content="IE  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB5BusinessNamelabel" Content="Business Name:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB5BusinessNameTextBox" HorizontalAlignment="Left" Height="22" Margin="10,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="192" VerticalContentAlignment="Center"/>
                            <Label Name="EscB5Dollarlabel" Content="Dollar Amount:" HorizontalAlignment="Left" Margin="9,108,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB5DollarTextBox" HorizontalAlignment="Left" Height="22" Margin="10,130,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="192" VerticalContentAlignment="Center"/>
                            <Label Name="EscB5Itemlabel" Content="Item Count:" HorizontalAlignment="Left" Margin="207,108,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB5ItemTextBox" HorizontalAlignment="Left" Height="22" Margin="207,130,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="206" VerticalContentAlignment="Center"/>
                        </Grid>
                        <!-- START VOICE - IVR SECTION -->
                        <Grid Name="IVR_Grid">
                            <Label Name="EscB6AffectingLabel" Content="Affecting:" HorizontalAlignment="Left" Margin="626,174,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"/>
                            <WrapPanel Name="EscB6AffectingWrapPanel" HorizontalAlignment="Left" Height="50" Margin="626,196,0,0" VerticalAlignment="Top" Width="165" Orientation="Horizontal">
                                <CheckBox Name="EscB6CellCheckBox" Content="Cell  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB6WorkCheckBox" Content="Work  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB6HomeCheckBox" Content="Home  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB6PagerCheckBox" Content="Pager  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB6OtherCheckBox" Content="Other  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB6NoneCheckBox" Content="None  " FontWeight="Bold" Foreground="#FF18186E"/>
                            </WrapPanel>
                            <TextBox Name="EscB6AddTextBox" HorizontalAlignment="Left" Height="147" Margin="10,352,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB6Addlabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,328,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <Label Name="EscB6CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="626,251,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB6CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="626,273,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180" VerticalContentAlignment="Center"/>
                            <Label Name="EscB6PhoneNumberlabel" Content="Phone Number Affected:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB6PhoneNumberTextBox" HorizontalAlignment="Left" Height="22" Margin="10,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149" VerticalContentAlignment="Center"/>
                            <Label Name="EscB6PortNumberslabel" Content="Port Numbers:" HorizontalAlignment="Left" Margin="351,251,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB6PortNumbersTextBox" HorizontalAlignment="Left" Height="22" Margin="351,273,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="222" VerticalContentAlignment="Center"/>
                            <Label Name="EscB6IVRNameLabel" Content="IVR Name:" HorizontalAlignment="Left" Margin="232,10,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB6IVRNameTextBox" HorizontalAlignment="Left" Height="22" Margin="232,33,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="114" VerticalContentAlignment="Center"/>
                            <Button Name="EscB6BranchSiteLookupButton" Content="$([char]0xC2)" HorizontalAlignment="Left" Margin="351,33,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB6AccountNumberslabel" Content="Examples of Account Numbers:" HorizontalAlignment="Left" Margin="351,174,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB6AccountNumbersTextBox" HorizontalAlignment="Left" Height="22" Margin="351,196,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="223" VerticalContentAlignment="Center"/>
                            <Label Name="EscB6MainframeLabel" Content="Are there any major mainframe issues at this time:" HorizontalAlignment="Left" Margin="10,174,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB6MainframeStackPanel" HorizontalAlignment="Left" Height="22" Margin="16,196,0,0" VerticalAlignment="Top" Width="286" Orientation="Horizontal">
                                <RadioButton Name="EscB6MainframeYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB6MainframeNoRadioButton" Content="No   " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <TextBox Name="EscB6MainframeTextBox" HorizontalAlignment="Left" Height="22" TextWrapping="Wrap" VerticalAlignment="Top" Width="191" VerticalContentAlignment="Center"/>
                            </StackPanel>
                            <Label Name="EscB6IVRPingResultslabel" Content="IVR Name Pinged Info:" HorizontalAlignment="Left" Margin="10,60,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB6IVRPingResultsTextBox" HorizontalAlignment="Left" Height="86" Margin="10,83,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB6VerifyLabel" Content="Test call made to verify outage:" HorizontalAlignment="Left" Margin="10,251,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB6VerifyStackPanel" HorizontalAlignment="Left" Height="22" Margin="18,273,0,0" VerticalAlignment="Top" Width="142" Orientation="Horizontal">
                                <RadioButton Name="EscB6VerifyYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB6VerifyNoRadioButton" Content="No   " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB6VerifyNARadioButton" Content="NA   " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                        </Grid>
                        <!-- START VOICE - VOICE SECTION -->
                        <Grid Name="VOICE_Grid">
                            <Label Name="EscB7PhoneTypelabel" Content="Phone Type:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <ComboBox Name="EscB7PhoneTypeComboBox" HorizontalAlignment="Left" Height="22" Margin="10,35,0,0" VerticalAlignment="Top" Width="175"/>
                            <Label Name="EscB7BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="276,407,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB7BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="276,428,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140" VerticalContentAlignment="Center"/>
                            <Button Name="EscB7BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="421,428,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB7AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,407,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,428,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,455,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,477,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,455,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,477,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,455,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,477,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="578,455,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="578,477,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7CiscoMACLabel" Content="MAC Address:" HorizontalAlignment="Left" Margin="218,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7CiscoMACTextBox" HorizontalAlignment="Left" Height="22" Margin="218,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7ModelLabel" Content="Make/Model of Phone:" HorizontalAlignment="Left" Margin="421,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7ModelTextBox" HorizontalAlignment="Left" Height="22" Margin="421,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="167" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7SerialLabel" Content="Serial Number:" HorizontalAlignment="Left" Margin="620,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7SerialTextBox" HorizontalAlignment="Left" Height="22" Margin="620,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="186" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7PhoneNumbersLabel" Content="Phone Numbers Affected:" HorizontalAlignment="Left" Margin="10,62,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7PhoneNumbersTextBox" HorizontalAlignment="Left" Height="22" Margin="10,85,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" VerticalContentAlignment="Center" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB7CallExtlabel" Content="Can the user call another&#xD;&#xA;Extension in the same building:" HorizontalAlignment="Left" Margin="620,62,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB7CallExtStackPanel" HorizontalAlignment="Left" Height="22" Margin="627,96,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB7CallExtYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7CallExtNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7CallExtNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7CallExtOtherlabel" Content="Can the user call another&#xD;&#xA;extension in another building:" HorizontalAlignment="Left" Margin="620,118,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB7CallExtOtherStackPanel" HorizontalAlignment="Left" Height="22" Margin="628,152,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB7CallExtOtherYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7CallExtOtherNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7CallExtOtherNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7SiteCodeLabel" Content="Branch Site Code:" HorizontalAlignment="Left" Margin="472,407,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB7SiteCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="472,428,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140" VerticalContentAlignment="Center"/>
                            <Button Name="EscB7SiteCodeLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="617,428,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB7DialLocallabel" Content="Can the user dial local calls:" HorizontalAlignment="Left" Margin="218,62,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB7DialLocalStackPanel" HorizontalAlignment="Left" Height="22" Margin="223,83,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB7DialLocalYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7DialLocalNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7DialLocalNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7DialLonglabel" Content="Can the user dial a long&#xD;&#xA;distance call:" HorizontalAlignment="Left" Margin="427,62,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB7DialLongStackPanel" HorizontalAlignment="Left" Height="22" Margin="434,97,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB7DialLongYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7DialLongNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7DialLongNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7CallQualitylabel" Content="Is the issue phone Call quality:" HorizontalAlignment="Left" Margin="10,118,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB7CallQualityStackPanel" HorizontalAlignment="Left" Height="22" Margin="17,135,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB7CallQualityYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB7CallQualityNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7QualityIssuelabel" Content="What quality issue is being reported" HorizontalAlignment="Left" Margin="218,118,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <WrapPanel Name="EscB7PartWrapPanel" HorizontalAlignment="Left" Height="34" Margin="223,140,0,0" VerticalAlignment="Top" Width="377" Orientation="Horizontal">
                                <CheckBox Name="EscB7OneWayAudioCheckBox" Content="One Way Audio  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB7StaticCheckBox" Content="Static  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB7GarbledCheckBox" Content="Garbled  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB7ChoppyCheckBox" Content="Choppy  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB7LowVolumeCheckBox" Content="Low Volume  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB7DeadCheckBox" Content="Dead Air  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB7DroppedCheckBox" Content="Dropped Call  " FontWeight="Bold" Foreground="#FF18186E"/>
                            </WrapPanel>
                            <Label Name="EscB7DescLabel" Content="Brief description of phone issue:" HorizontalAlignment="Left" Margin="10,162,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7DescTextBox" HorizontalAlignment="Left" Height="44" Margin="10,185,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="578" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB7Intermittentlabel" Content="Is Problem intermittent:" HorizontalAlignment="Left" Margin="620,179,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB7IntermittentStackPanel" HorizontalAlignment="Left" Height="22" Margin="627,199,0,0" VerticalAlignment="Top" Width="153" Orientation="Horizontal">
                                <RadioButton Name="EscB7IntermittentYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7IntermittentNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7DialedFromLabel" Content="Phone number dialed from:" HorizontalAlignment="Left" Margin="10,234,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB7DialedFromTextBox" HorizontalAlignment="Left" Height="22" Margin="10,256,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7DialedToLabel" Content="Phone number dialed to:" HorizontalAlignment="Left" Margin="218,234,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB7DialedToTextBox" HorizontalAlignment="Left" Height="22" Margin="218,256,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7PhoneDisplayLabel" Content="What is in the phones display?" HorizontalAlignment="Left" Margin="421,234,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7PhoneDisplayTextBox" HorizontalAlignment="Left" Height="44" Margin="421,256,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="385" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB7TimeCalledLabel" Content="Time was phone call made:" HorizontalAlignment="Left" Margin="10,283,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7TimeCalledTextBox" HorizontalAlignment="Left" Height="22" Margin="10,306,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7Powerlabel" Content="Has the power been interrupted:" HorizontalAlignment="Left" Margin="218,283,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB7PowerStackPanel" HorizontalAlignment="Left" Height="22" Margin="223,302,0,0" VerticalAlignment="Top" Width="95" Orientation="Horizontal">
                                <RadioButton Name="EscB7PowerYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB7PowerNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7Replacelabel" Content="Is replacement needed:" HorizontalAlignment="Left" Margin="10,333,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB7ReplaceStackPanel" HorizontalAlignment="Left" Height="22" Margin="17,355,0,0" VerticalAlignment="Top" Width="94" Orientation="Horizontal">
                                <RadioButton Name="EscB7ReplaceYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB7ReplaceNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7ColorLabel" Content="Color of Phone, Handset or Cord:" HorizontalAlignment="Left" Margin="218,333,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7ColorTextBox" HorizontalAlignment="Left" Height="22" Margin="218,355,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="194" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7Swappedlabel" Content="Swapped with LIKE or WORKING:" HorizontalAlignment="Left" Margin="434,333,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB7SwappedStackPanel" HorizontalAlignment="Left" Height="22" Margin="439,355,0,0" VerticalAlignment="Top" Width="94" Orientation="Horizontal">
                                <RadioButton Name="EscB7SwappedYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB7SwappedNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB7SwapResultLabel" Content="Results of Swap:" HorizontalAlignment="Left" Margin="666,333,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7SwapResultTextBox" HorizontalAlignment="Left" Height="22" Margin="666,355,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140" VerticalContentAlignment="Center"/>
                            <Label Name="EscB7OtherTypeLabel" Content="Phone Type Other:" HorizontalAlignment="Left" Margin="218,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB7OtherTypeTextBox" HorizontalAlignment="Left" Height="22" Margin="218,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="175" VerticalContentAlignment="Center"/>
                        </Grid>
                        <!-- START VOICE - VOICE MAIL SECTION -->
                        <Grid Name="VOICEMAIL_Grid">
                            <Label Name="EscB8BranchIDLabel" Content="Branch ID:" HorizontalAlignment="Left" Margin="276,337,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB8BranchIDTextBox" HorizontalAlignment="Left" Height="22" Margin="276,358,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140" VerticalContentAlignment="Center"/>
                            <Button Name="EscB8BranchIDLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="421,358,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB8AddressLabel" Content="Address:" HorizontalAlignment="Left" Margin="10,337,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8AddressTextBox" HorizontalAlignment="Left" Height="22" Margin="10,358,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8CityLabel" Content="City:" HorizontalAlignment="Left" Margin="10,385,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8CityTextBox" HorizontalAlignment="Left" Height="22" Margin="10,407,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="247" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8StateLabel" Content="State:" HorizontalAlignment="Left" Margin="276,385,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8StateTextBox" HorizontalAlignment="Left" Height="22" Margin="276,407,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="118" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8ZipLabel" Content="Zip Code:" HorizontalAlignment="Left" Margin="412,385,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8ZipTextBox" HorizontalAlignment="Left" Height="22" Margin="412,407,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="149" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8CubeLabel" Content="Floor/Cubicle/Post #:" HorizontalAlignment="Left" Margin="578,385,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8CubeTextBox" HorizontalAlignment="Left" Height="22" Margin="578,407,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="228" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8PhoneNumbersLabel" Content="Phone Numbers Affected:" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8PhoneNumbersTextBox" HorizontalAlignment="Left" Height="44" Margin="10,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB8IsCiscolabel" Content="Is this a Cisco VoIP phone:" HorizontalAlignment="Left" Margin="649,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB8IsCiscoStackPanel" HorizontalAlignment="Left" Height="22" Margin="656,30,0,0" VerticalAlignment="Top" Width="138" Orientation="Horizontal">
                                <RadioButton Name="EscB8IsCiscoYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8IsCiscoNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8IsCiscoNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB8SiteCodeLabel" Content="Branch Site Code:" HorizontalAlignment="Left" Margin="472,337,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB8SiteCodeTextBox" HorizontalAlignment="Left" Height="22" Margin="472,358,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="140" VerticalContentAlignment="Center"/>
                            <Button Name="EscB8SiteCodeLookupButton" Content="$([char]0xCC)" HorizontalAlignment="Left" Margin="617,358,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB8RecentInstalllabel" Content="Is this a recent installation:" HorizontalAlignment="Left" Margin="10,84,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB8RecentInstallStackPanel" HorizontalAlignment="Left" Height="22" Margin="16,104,0,0" VerticalAlignment="Top" Width="101" Orientation="Horizontal">
                                <RadioButton Name="EscB8RecentInstallYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB8RecentInstallNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB8Problemlabel" Content="Is the problem isolated to:" HorizontalAlignment="Left" Margin="227,153,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB8ProblemStackPanel" HorizontalAlignment="Left" Height="52" Margin="233,178,0,0" VerticalAlignment="Top" Width="208" Orientation="Vertical">
                                <CheckBox Name="EscB8ProblemNoneCheckBox" Content="None  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB8ProblemRetrievalCheckBox" Content="Retrieval Of Voice Mail  " FontWeight="Bold" Foreground="#FF18186E"/>
                                <CheckBox Name="EscB8ProblemLeavingCheckBox" Content="Customer Leaving A Voice Mail  " FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB8AddLabel" Content="Additional Information:" HorizontalAlignment="Left" Margin="10,433,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB8AddTextBox" HorizontalAlignment="Left" Height="44" Margin="10,455,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB8PhoneSystemLabel" Content="Phone System at Location:" HorizontalAlignment="Left" Margin="227,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8PhoneSystemTextBox" HorizontalAlignment="Left" Height="44" Margin="227,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB8VMSystemLabel" Content="Voice Mail System at Location:" HorizontalAlignment="Left" Margin="441,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB8VMSystemTextBox" HorizontalAlignment="Left" Height="44" Margin="441,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <TextBox Name="EscB8RecentInstallTextBox" HorizontalAlignment="Left" Height="22" Margin="10,126,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8VMWorkedlabel" Content="Has voice mail ever worked:" HorizontalAlignment="Left" Margin="227,84,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB8VMWorkedStackPanel" HorizontalAlignment="Left" Height="22" Margin="233,104,0,0" VerticalAlignment="Top" Width="138" Orientation="Horizontal">
                                <RadioButton Name="EscB8VMWorkedYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8VMWorkedNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8VMWorkedNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB8Powerlabel" Content="Has power been interrupted:" HorizontalAlignment="Left" Margin="441,84,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB8PowerStackPanel" HorizontalAlignment="Left" Height="22" Margin="448,104,0,0" VerticalAlignment="Top" Width="138" Orientation="Horizontal">
                                <RadioButton Name="EscB8PowerYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8PowerNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8PowerNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB8Passwordlabel" Content="Password reset needed:" HorizontalAlignment="Left" Margin="649,84,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB8PasswordStackPanel" HorizontalAlignment="Left" Height="22" Margin="656,104,0,0" VerticalAlignment="Top" Width="138" Orientation="Horizontal">
                                <RadioButton Name="EscB8PasswordYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8PasswordNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8PasswordNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB8AccessVMlabelAccessVM" Content="How does user access voice mail:" HorizontalAlignment="Left" Margin="10,153,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB8AccessVMStackPanel" HorizontalAlignment="Left" Height="22" Margin="16,174,0,0" VerticalAlignment="Top" Width="175" Orientation="Horizontal">
                                <RadioButton Name="EscB8AccessVMButtonRadioButton" Content="Button  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8AccessVMDialRadioButton" Content="Dial-in Number" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                            </StackPanel>
                            <TextBox Name="EscB8AccessVMTextBox" HorizontalAlignment="Left" Height="22" Margin="10,196,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="181" VerticalContentAlignment="Center"/>
                            <Label Name="EscB8ExpRetrieveLabel" Content="What is the user experiencing when &#xD;&#xA;retrieving a voice mail message?" HorizontalAlignment="Left" Margin="10,235,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB8ExpRetrieveTextBox" HorizontalAlignment="Left" Height="44" Margin="10,277,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="384" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB8ExpCallingLabel" Content="What is the customer experiencing &#xD;&#xA;when calling the user's voice mail?" HorizontalAlignment="Left" Margin="412,235,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB8ExpCallingTextBox" HorizontalAlignment="Left" Height="44" Margin="412,277,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="394" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB8VMLightlabel" Content="Is the voice mail indicator:" HorizontalAlignment="Left" Margin="441,153,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <StackPanel Name="EscB8VMLightStackPanel" HorizontalAlignment="Left" Height="22" Margin="447,174,0,0" VerticalAlignment="Top" Width="138" Orientation="Horizontal">
                                <RadioButton Name="EscB8VMLightYesRadioButton" Content="On  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8VMLightNoRadioButton" Content="Off  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB8VMLightNARadioButton" Content="N/A  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                        </Grid>
                        <!-- START VOICE - WEBEX SECTION -->
                        <Grid Name="WEBEX_Grid">
                            <Label Name="EscB9PhoneNumbersLabel" Content="Meeting Number (Host or Participant code) " HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9PhoneNumbersTextBox" HorizontalAlignment="Left" Height="22" Margin="10,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="416" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB9MeetingDatelabel" Content="Meeting Date (mm/dd/yyyy): " HorizontalAlignment="Left" Margin="444,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9MeetingDateTextBox" HorizontalAlignment="Left" Height="22" Margin="444,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="144" VerticalContentAlignment="Center"/>
                            <Button Name="EscB9MeetingDateCalendarButton" Content="$([char]0xA6)" HorizontalAlignment="Left" Margin="593,35,0,0" VerticalAlignment="Top" Width="30" Height="22" FontFamily="Webdings"/>
                            <Label Name="EscB9MeetingTimelabel" Content="Meeting Time (HH:mm):" HorizontalAlignment="Left" Margin="644,10,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9MeetingTimeTextBox" HorizontalAlignment="Left" Height="22" Margin="644,35,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="162" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9WebexURLLabel" Content="Webex Link (URL)" HorizontalAlignment="Left" Margin="10,56,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9WebexURLTextBox" HorizontalAlignment="Left" Height="22" Margin="10,81,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="416" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Label Name="EscB9TimeZoneLabel" Content="Meeting Time Zone:" HorizontalAlignment="Left" Margin="443,61,0,0" VerticalAlignment="Top" Foreground="Red" FontWeight="Bold"  ToolTip="The Time Zone the caller is in.`n`n - ET = Eastern Time Zone`n - CT = Central Time Zone`n - MT = Mountain Time Zone`n - PT = Pacific Time Zone`n - IT = International Time Zone"/>
                            <StackPanel Name="EscB9TimeZoneStackPanel" HorizontalAlignment="Left" Height="38" Margin="448,73,-5,0" VerticalAlignment="Top" Width="373" Orientation="Horizontal">
                                <RadioButton Name="EscB9ETRadioButton" Content="ET  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9CTRadioButton" Content="CT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9MTRadioButton" Content="MT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9PTRadioButton" Content="PT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9ITRadioButton" Content="IT  " FontWeight="Bold" VerticalAlignment="Center" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9OtherTZRadioButton" Content="Other Zone " Foreground="#FF31BF31" FontWeight="Bold" VerticalAlignment="Center"/>
                                <TextBox Name="EscB9OtherTZTextBox" TextWrapping="Wrap" Width="70" Height="22" Margin="0,7" VerticalAlignment="Center" VerticalContentAlignment="Center"/>
                            </StackPanel>
                            <Label Name="EscB9WhoExplabel" Content="Who is experiencing this issue:" HorizontalAlignment="Left" Margin="10,108,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <WrapPanel Name="EscB9WhoExpWrapPanel" HorizontalAlignment="Left" Height="20" Margin="193,113,0,0" VerticalAlignment="Top" Width="250" Orientation="Horizontal">
                                <RadioButton Name="EscB9WhoExpHostRadioButton" Content="Host  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9WhoExpSpecRadioButton" Content="Single User " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9WhoExpAllRadioButton" Content="All participants  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </WrapPanel>
                            <Label Name="EscB9UserIDlabel" Content="User ID:" HorizontalAlignment="Left" Margin="448,108,0,0" VerticalAlignment="Top" FontWeight="Bold"  Foreground="Red"/>
                            <TextBox Name="EscB9UserIDTextbox" HorizontalAlignment="Left" Height="22" Margin="503,110,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="169" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9DeviceTypelabel" Content="Type of device used to join the meeting:" HorizontalAlignment="Left" Margin="10,139,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red" Width="244"/>
                            <WrapPanel Name="EscB9DeviceTypeWrapPanel" HorizontalAlignment="Left" Height="21" Margin="246,145,0,0" VerticalAlignment="Top" Width="297" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                                <RadioButton Name="EscB9DeviceTypeMobileRadioButton" Content="Mobile  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB9DeviceTypeSoftRadioButton" Content="Softphone  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB9DeviceTypeLandRadioButton" Content="Hardphone " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB9DeviceTypeOtherRadioButton" Content="Other" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                            </WrapPanel>
                            <Label Name="EscB9NumberUsedLabel" Content="Phone Number:" HorizontalAlignment="Left" Margin="538,139,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9NumberUsedTextBox" HorizontalAlignment="Left" Height="22" Margin="637,142,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="169" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9DeviceUsedLabel" Content="Computer Name:" HorizontalAlignment="Left" Margin="538,139,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9DeviceTextBox" HorizontalAlignment="Left" Height="22" Margin="643,142,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="163" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9NumberCalledlabel" Content="Number Called: 1 (800)-916-2280:" HorizontalAlignment="Left" Margin="10,170,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB9NumberCalledStackPanel" HorizontalAlignment="Left" Height="22" Margin="213,173,0,0" VerticalAlignment="Top" Width="85" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                                <RadioButton Name="EscB9NumberCalledYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9NumberCalledNoRadioButton" Content="No" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                            </StackPanel>
                            <Label Name="EscB9NumberCalledTolabel" Content="Number Called To:" HorizontalAlignment="Left" Margin="300,170,0,0" VerticalAlignment="Top" FontWeight="Bold"  Foreground="Red"/>
                            <TextBox Name="EscB9NumberCalledToTextbox" HorizontalAlignment="Left" Height="22" Margin="415,172,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="170" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9SoftphoneWifilabel" Content="Softphone on WIFI:" HorizontalAlignment="Left" Margin="600,170,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red" Width="118"/>
                            <StackPanel Name="EscB9SoftphoneWifiStackPanel" HorizontalAlignment="Left" Height="22" Margin="716,173,0,0" VerticalAlignment="Top" Width="87" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                                <RadioButton Name="EscB9SoftphoneWifiYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9SoftphoneWifiNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB9Callbacklabel" Content="Did caller use the callback feature:" HorizontalAlignment="Left" Margin="10,201,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB9CallbackStackPanel" HorizontalAlignment="Left" Height="22" Margin="213,204,0,0" VerticalAlignment="Top" Width="85" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                                <RadioButton Name="EscB9CallbackYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB9CallbackNoRadioButton" Content="No" VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB9CallbackNumberlabel" Content="Callback Number:" HorizontalAlignment="Left" Margin="303,202,0,0" VerticalAlignment="Top" FontWeight="Bold"/>
                            <TextBox Name="EscB9CallbackNumberTextbox" HorizontalAlignment="Left" Height="22" Margin="415,204,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="170" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9WearHeadsetlabel" Content="Was the user using a headset:" HorizontalAlignment="Left" Margin="10,232,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <StackPanel Name="EscB9WearHeadsetStackPanel" HorizontalAlignment="Left" Height="22" Margin="186,234,0,0" VerticalAlignment="Top" Width="94" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                                <RadioButton Name="EscB9WearHeadsetYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF31BF31"/>
                                <RadioButton Name="EscB9WearHeadsetNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB9HeadsetTypelabel" Content="Did they try a handset:" HorizontalAlignment="Left" Margin="275,232,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red" Width="138"/>
                            <StackPanel Name="EscB9HeadsetTypeStackPanel" HorizontalAlignment="Left" Height="22" Margin="414,234,0,0" VerticalAlignment="Top" Width="87" Orientation="Horizontal" RenderTransformOrigin="0.5,0.5">
                                <RadioButton Name="EscB9HeadsetTypeYesRadioButton" Content="Yes  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                                <RadioButton Name="EscB9HeadsetTypeNoRadioButton" Content="No  " VerticalAlignment="Center" FontWeight="Bold" Foreground="#FF18186E"/>
                            </StackPanel>
                            <Label Name="EscB9CityCalledFromlabel" Content="City Called From:" HorizontalAlignment="Left" Margin="10,263,0,0" VerticalAlignment="Top" FontWeight="Bold"  Foreground="Red"/>
                            <TextBox Name="EscB9CityCalledFromTextbox" HorizontalAlignment="Left" Height="22" Margin="116,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="180" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9StateCalledFromlabel" Content="State Called From:" HorizontalAlignment="Left" Margin="301,263,0,0" VerticalAlignment="Top" FontWeight="Bold"  Foreground="Red"/>
                            <TextBox Name="EscB9StateCalledFromTextbox" HorizontalAlignment="Left" Height="22" Margin="415,266,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="170" VerticalContentAlignment="Center"/>
                            <Label Name="EscB9IssueDesclabel" Content="Symptoms Experienced:" HorizontalAlignment="Left" Margin="10,294,0,0" VerticalAlignment="Top" FontWeight="Bold" Foreground="Red"/>
                            <TextBox Name="EscB9IssueDescTextBox" HorizontalAlignment="Left" Height="179" Margin="10,320,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalContentAlignment="Top" VerticalScrollBarVisibility="Visible" AcceptsReturn="True"/>
                            <Calendar Name="EscB9MeetingDateCalendar" HorizontalAlignment="Left" Margin="444,56,0,0" VerticalAlignment="Top"/>
                        </Grid>
                        <!-- START RESULTS SECTION -->
                        <Grid Name="RESULTS1_Grid">
                            <TextBox Name="EscX1ResultTextBox" HorizontalAlignment="Left" Height="489" Margin="10,10,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True" IsReadOnly="True"/>
                        </Grid>
                    </Grid>
                </TabItem>
                <TabItem Name="EscXResultTab" Header="Result">
                    <Grid Name="RESULTS2_Grid" Background="#FFE5E5E5">
                        <TextBox Name="EscX2ResultTextBox" HorizontalAlignment="Left" Height="489" Margin="10,10,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="796" VerticalScrollBarVisibility="Visible" AcceptsReturn="True" IsReadOnly="True"/>
                    </Grid>
                </TabItem>
            </TabControl>
            <Button Name="EscZSubmitButton" Style="{DynamicResource RoundCornerGreen}" Content="Submit" Foreground="White" HorizontalAlignment="Left" Margin="442,738,0,0" VerticalAlignment="Top" Width="144" Height="40" />
            <Button Name="EscZStartNewButton" Style="{DynamicResource RoundCornerRed}" Content="Start New" Foreground="White" HorizontalAlignment="Left" Margin="253,738,0,0" VerticalAlignment="Top" Width="144" Height="40" />
            <Grid Name="Esc01InfoGrid" HorizontalAlignment="Left" Height="152" Margin="366,49,0,0" VerticalAlignment="Top" Width="448" Background="#FFE5E5E5">
                <Label Name="Esc01CallerInfoLabel" Content="Caller Information:" HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="12" FontWeight="Bold"/>
                <Label Name="Esc01ComputerInfoLabel" Content="Computer Information:" HorizontalAlignment="Left" Margin="230,0,0,0" VerticalAlignment="Top" FontSize="12" FontWeight="Bold"/>
                <Label Name="Esc01CallerNameLabel1" Content="Name:" HorizontalAlignment="Left" Margin="0,27,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerJobLabel1" Content="Job Title:" HorizontalAlignment="Left" Margin="0,43,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerPhoneLabel1" Content="Phone:" HorizontalAlignment="Left" Margin="0,59,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerMailLabel11" Content="Mail Code:" HorizontalAlignment="Left" Margin="-1,75,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerDeptLabel1" Content="Department:" HorizontalAlignment="Left" Margin="-1,91,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerCostLabel1" Content="Cost Center:" HorizontalAlignment="Left" Margin="0,107,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerEmailLabel1" Content="Email:" HorizontalAlignment="Left" Margin="0,123,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01CallerNameLabel2" Content="" HorizontalAlignment="Left" Margin="62,27,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01CallerJobLabel2" Content="" HorizontalAlignment="Left" Margin="62,43,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01CallerPhoneLabel2" Content="" HorizontalAlignment="Left" Margin="62,59,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01CallerMailLabel2" Content="" HorizontalAlignment="Left" Margin="62,75,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01CallerDeptLabel2" Content="" HorizontalAlignment="Left" Margin="62,91,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01CallerCostLabel2" Content="" HorizontalAlignment="Left" Margin="62,107,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01CallerEmailLabel2" Content="" HorizontalAlignment="Left" Margin="62,123,0,0" VerticalAlignment="Top" FontSize="10" Width="163"/>
                <Label Name="Esc01ComputerNameLabel1" Content="Computer Name:" HorizontalAlignment="Left" Margin="230,18,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerServerLabel1" Content="Server Name:" HorizontalAlignment="Left" Margin="230,34,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerFSPLabel1" Content="FSPESP #:" HorizontalAlignment="Left" Margin="230,50,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerMakeLabel1" Content="Make:" HorizontalAlignment="Left" Margin="230,66,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerModelLabel1" Content="Model:" HorizontalAlignment="Left" Margin="230,82,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerSerialLabel1" Content="Serial #:" HorizontalAlignment="Left" Margin="230,98,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerImageLabel1" Content="Image Profile:" HorizontalAlignment="Left" Margin="230,114,0,0" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerNameLabel2" Content="" HorizontalAlignment="Left" Margin="320,19,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerServerLabel2" Content="" HorizontalAlignment="Left" Margin="320,34,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerFSPLabel2" Content="" HorizontalAlignment="Left" Margin="320,50,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerMakeLabel2" Content="" HorizontalAlignment="Left" Margin="320,66,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerModelLabel2" Content="" HorizontalAlignment="Left" Margin="320,82,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerSerialLabel2" Content="" HorizontalAlignment="Left" Margin="320,98,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerImageLabel2" Content="" HorizontalAlignment="Left" Margin="320,114,0,0" VerticalAlignment="Top" FontSize="10" Width="125"/>
                <Label Name="Esc01ComputerTypeLabel1" Content="Type:" HorizontalAlignment="Left" Margin="230,130,0,-1" VerticalAlignment="Top" FontSize="10"/>
                <Label Name="Esc01ComputerTypeLabel2" Content="" HorizontalAlignment="Left" Margin="320,130,0,-1" VerticalAlignment="Top" FontSize="10" Width="125"/>
            </Grid>
            <Label Name="Esc01EscalationFormsLabel" Style="{DynamicResource LabelWithShadow}" Content="DEPT Escalation Forms" HorizontalAlignment="Left" Margin="10,2,0,0" VerticalAlignment="Top" Width="822" Height="35" Foreground="White" FontWeight="Bold" FontSize="22" HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
            <Label Name="Esc01PreferredIDlabel" Style="{DynamicResource LabelWithShadow}" Content="Preferred ID:" HorizontalAlignment="Left" Margin="29,34,0,0" VerticalAlignment="Top" Foreground="White" FontWeight="Bold"/>
            <TextBox Name="Esc01PreferredIDTextBox" HorizontalAlignment="Left" Height="23" Margin="29,60,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="120" VerticalContentAlignment="Center"/>
            <Label Name="Esc01LastThreelabel" Style="{DynamicResource LabelWithShadow}" Content="Last 3 of WSID:" HorizontalAlignment="Left" Margin="150,34,0,0" VerticalAlignment="Top" Foreground="White" FontWeight="Bold"/>
            <TextBox Name="Esc01LastThreeTextBox" HorizontalAlignment="Left" Height="23" Margin="154,60,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="46" VerticalContentAlignment="Center"/>
            <Button Name="Esc01GetButton" Content="Get" HorizontalAlignment="Left" Margin="205,60,0,0" VerticalAlignment="Top" Width="36" Height="23"/>
            <Label Name="Esc01RansomlabelA" Style="{DynamicResource LabelWithShadow}" Content="Suspect Malware or Ransomware? Please see" Foreground="#FF31BF31" HorizontalAlignment="Left" Margin="29,83,0,0" VerticalAlignment="Top"/>
            <Label Name="Esc01RansomlabelB" Style="{DynamicResource LabelWithShadow}" Content="KB0017154" HorizontalAlignment="Left" Margin="269,83,0,0" VerticalAlignment="Top" Foreground="White"/>
            <Label Name="Esc01PhoneCorrectlabel" Style="{DynamicResource LabelWithShadow}" Content="Is the Name and Phone Number correct ?" HorizontalAlignment="Left" Margin="29,107,0,0" VerticalAlignment="Top" Width="248" Foreground="White" FontWeight="Bold"/>
            <ComboBox Name="Esc01PhoneCorrectComboBox" HorizontalAlignment="Left" Margin="274,110,0,0" VerticalAlignment="Top" Width="74" Height="22"/>
            <Label Name="Esc01PhoneNamelabel" Style="{DynamicResource LabelWithShadow}" Content="Name and/or Phone:" HorizontalAlignment="Left" Margin="29,131,0,0" VerticalAlignment="Top" Width="248" Foreground="Red" FontWeight="Bold"/>
            <TextBox Name="Esc01PhoneNameTextBox" HorizontalAlignment="Left" Height="23" Margin="29,155,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="278" VerticalContentAlignment="Center"/>
            <Button Name="Esc01PhoneOKButton" Content="OK" HorizontalAlignment="Left" Margin="312,155,0,0" VerticalAlignment="Top" Width="36" Height="23"/>
            <Button Name="Esc01PhoneChangeButton" Content="Change Phone #" HorizontalAlignment="Left" Margin="246,60,0,0" VerticalAlignment="Top" Width="102" Height="23"/>
            <Label Name="Esc01IncCatLabel" Style="{DynamicResource LabelWithShadow}" Content="Incident Category:" HorizontalAlignment="Left" Margin="29,109,0,0" VerticalAlignment="Top" Foreground="White"/>
            <Label Name="Esc01FormLabel" Style="{DynamicResource LabelWithShadow}" Content="Escalation Form:" HorizontalAlignment="Left" Margin="29,140,0,0" VerticalAlignment="Top" Foreground="White"/>
            <ComboBox Name="Esc01IncCatComboBox" HorizontalAlignment="Left" Margin="140,113,0,0" VerticalAlignment="Top" Width="208"/>
            <ComboBox Name="Esc01FormComboBox" HorizontalAlignment="Left" Margin="140,144,0,0" VerticalAlignment="Top" Width="208"/>
            <Button Name="Esc01LoadFormsButton" Content="Load Form" HorizontalAlignment="Left" Margin="246,174,0,0" VerticalAlignment="Top" Width="102" Height="23"/>
        </Grid>
    </ScrollViewer>
</Window>
"@
[xml]$XML_PIC = @"
<Window 
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         ResizeMode="CanMinimize" Name="Pic_Window"
        Title="User Picture" Height="205" Width="181" Background="Black" Foreground="Black">
    <Grid Name="Pic_Grid" Background="Black">
        <Label Name="PicLabel" Content="No Picture Available" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Center" Margin="10" VerticalAlignment="Center" Height="25" Width="143" Foreground="White"/>
        <Image Name="UserPicture" HorizontalAlignment="Left" Height="155" VerticalAlignment="Top" Width="155" Stretch="None" Margin="10,10,10,10" SnapsToDevicePixels="True"/> 
    </Grid>
</Window>
"@

# Create Links Tab Buttons
$Script:LinksTab = $Matrix | Where-Object {$_.Tab -like "*Links*"}
$LinksCategories = ($Matrix | Where-Object {$_.Tab -like "*Links*"}).SubCategory | Select -Unique
$Script:Node = $XML_MAIN.Window.Grid.Grid.TabControl.TabItem[1].ScrollViewer.Grid
$Script:XMargin = 4
$Script:YMargin = 2
$Script:LabelNumber = 1
$Script:ButtonNumber = 1
If ($LinksCategories) {
    Foreach ($SubCategory in $LinksCategories) {
        If ($LabelNumber -eq 1) {
            $Script:Node.Label.SetAttribute("Name", "LinksLabel$($LabelNumber)") | Out-Null
            $Script:Node.Label.SetAttribute("Content", "$($SubCategory)") | Out-Null
            $Script:Node.Label.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Label.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($LabelNumber -eq 2) {
            $NewLabel = $Node.Label.Clone()
            $NewLabel.Name = "LinksLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null        
            }
        Else {
            $NewLabel = $Node.Label[($LabelNumber -2)].Clone()
            $NewLabel.Name = "LinksLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null
            }
        $LabelNumber++
        $Script:YMargin = $YMargin + 28
        $LinksButtons = $LinksTab | Where-Object {($_.SubCategory -eq $SubCategory)}
        Foreach ($Button in $LinksButtons) {
            If ($ButtonNumber -eq 1) {
                $Script:Node.Button.SetAttribute("Name", "LinksButton$($ButtonNumber)") | Out-Null
                $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
                $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
                $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
                $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
                }
            ElseIf ($ButtonNumber -eq 2) {
                $NewButton = $Node.Button.Clone()
                $NewButton.Name = "LinksButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            Else {
                $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
                $NewButton.Name = "LinksButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            # Set Margin for Next Pass
            If ($XMargin -eq 296) {
                $Script:XMargin = 4
                $Script:YMargin = $YMargin + 42
                }
            Else {$Script:XMargin = $XMargin + 146}
            $ButtonNumber++
            }
        If ($XMargin -ne 4) {$Script:YMargin = $YMargin + 42}
        $Script:XMargin = 4
        }
    }
Else {
    $LinksButtons = $Matrix | Where-Object {$_.Tab -like "*Links*"}
    $Script:XMargin = 4
    $Script:YMargin = 10
    Foreach ($Button in $LinksButtons) {
        If ($ButtonNumber -eq 1) {
            $Script:Node.Button.SetAttribute("Name", "LinksButton$($ButtonNumber)") | Out-Null
            $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
            $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
            $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($ButtonNumber -eq 2) {
            $NewButton = $Node.Button.Clone()
            $NewButton.Name = "LinksButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        Else {
            $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
            $NewButton.Name = "LinksButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        # Set Margin for Next Pass
        If ($XMargin -eq 296) {
            $Script:XMargin = 4
            $Script:YMargin = $YMargin + 45
            }
        Else {$Script:XMargin = $XMargin + 146}
        $ButtonNumber++
        }    
    }

# Create Apps Tab Buttons
$Script:AppsTab = $Matrix | Where-Object {$_.Tab -like "*Apps*"}
$AppsCategories = ($Matrix | Where-Object {$_.Tab -like "*Apps*"}).SubCategory | Select -Unique
$Script:Node = $XML_MAIN.Window.Grid.Grid.TabControl.TabItem[2].ScrollViewer.Grid
$Script:XMargin = 4
$Script:YMargin = 2
$Script:LabelNumber = 1
$Script:ButtonNumber = 1
If ($AppsCategories) {
    Foreach ($SubCategory in $AppsCategories) {
        If ($LabelNumber -eq 1) {
            $Script:Node.Label.SetAttribute("Name", "AppsLabel$($LabelNumber)") | Out-Null
            $Script:Node.Label.SetAttribute("Content", "$($SubCategory)") | Out-Null
            $Script:Node.Label.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Label.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($LabelNumber -eq 2) {
            $NewLabel = $Node.Label.Clone()
            $NewLabel.Name = "AppsLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null        
            }
        Else {
            $NewLabel = $Node.Label[($LabelNumber -2)].Clone()
            $NewLabel.Name = "AppsLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null
            }
        $LabelNumber++
        $Script:YMargin = $YMargin + 28
        $AppsButtons = $AppsTab | Where-Object {($_.SubCategory -eq $SubCategory)}
        Foreach ($Button in $AppsButtons) {
            If ($ButtonNumber -eq 1) {
                $Script:Node.Button.SetAttribute("Name", "AppsButton$($ButtonNumber)") | Out-Null
                $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
                $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
                $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
                $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
                }
            ElseIf ($ButtonNumber -eq 2) {
                $NewButton = $Node.Button.Clone()
                $NewButton.Name = "AppsButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            Else {
                $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
                $NewButton.Name = "AppsButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            # Set Margin for Next Pass
            If ($XMargin -eq 296) {
                $Script:XMargin = 4
                $Script:YMargin = $YMargin + 42
                }
            Else {$Script:XMargin = $XMargin + 146}
            $ButtonNumber++
            }
        If ($XMargin -ne 4) {$Script:YMargin = $YMargin + 42}
        $Script:XMargin = 4
        }
    }
Else {
    $AppsButtons = $Matrix | Where-Object {$_.Tab -like "*Apps*"}
    $Script:XMargin = 4
    $Script:YMargin = 10
    Foreach ($Button in $AppsButtons) {
        If ($ButtonNumber -eq 1) {
            $Script:Node.Button.SetAttribute("Name", "AppsButton$($ButtonNumber)") | Out-Null
            $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
            $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
            $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($ButtonNumber -eq 2) {
            $NewButton = $Node.Button.Clone()
            $NewButton.Name = "AppsButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        Else {
            $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
            $NewButton.Name = "AppsButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        # Set Margin for Next Pass
        If ($XMargin -eq 296) {
            $Script:XMargin = 4
            $Script:YMargin = $YMargin + 45
            }
        Else {$Script:XMargin = $XMargin + 146}
        $ButtonNumber++
        }    
    }

# Create Tools Tab Buttons
$Script:ToolsTab = $Matrix | Where-Object {$_.Tab -like "*Tools*"}
$ToolsCategories = ($Matrix | Where-Object {$_.Tab -like "*Tools*"}).SubCategory | Select -Unique
$Script:Node = $XML_MAIN.Window.Grid.Grid.TabControl.TabItem[3].ScrollViewer.Grid
$Script:XMargin = 4
$Script:YMargin = 2
$Script:LabelNumber = 1
$Script:ButtonNumber = 1
If ($ToolsCategories) {
    Foreach ($SubCategory in $ToolsCategories) {
        If ($LabelNumber -eq 1) {
            $Script:Node.Label.SetAttribute("Name", "ToolsLabel$($LabelNumber)") | Out-Null
            $Script:Node.Label.SetAttribute("Content", "$($SubCategory)") | Out-Null
            $Script:Node.Label.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Label.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($LabelNumber -eq 2) {
            $NewLabel = $Node.Label.Clone()
            $NewLabel.Name = "ToolsLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null        
            }
        Else {
            $NewLabel = $Node.Label[($LabelNumber -2)].Clone()
            $NewLabel.Name = "ToolsLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null
            }
        $LabelNumber++
        $Script:YMargin = $YMargin + 28
        $ToolsButtons = $ToolsTab | Where-Object {($_.SubCategory -eq $SubCategory)}
        Foreach ($Button in $ToolsButtons) {
            If ($ButtonNumber -eq 1) {
                $Script:Node.Button.SetAttribute("Name", "ToolsButton$($ButtonNumber)") | Out-Null
                $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
                $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
                $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
                $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
                }
            ElseIf ($ButtonNumber -eq 2) {
                $NewButton = $Node.Button.Clone()
                $NewButton.Name = "ToolsButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            Else {
                $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
                $NewButton.Name = "ToolsButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            # Set Margin for Next Pass
            If ($XMargin -eq 296) {
                $Script:XMargin = 4
                $Script:YMargin = $YMargin + 42
                }
            Else {$Script:XMargin = $XMargin + 146}
            $ButtonNumber++
            }
        If ($XMargin -ne 4) {$Script:YMargin = $YMargin + 42}
        $Script:XMargin = 4
        }
    }
Else {
    $ToolsButtons = $Matrix | Where-Object {$_.Tab -like "*Tools*"}
    $Script:XMargin = 4
    $Script:YMargin = 10
    Foreach ($Button in $ToolsButtons) {
        If ($ButtonNumber -eq 1) {
            $Script:Node.Button.SetAttribute("Name", "ToolsButton$($ButtonNumber)") | Out-Null
            $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
            $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
            $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($ButtonNumber -eq 2) {
            $NewButton = $Node.Button.Clone()
            $NewButton.Name = "ToolsButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        Else {
            $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
            $NewButton.Name = "ToolsButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        # Set Margin for Next Pass
        If ($XMargin -eq 296) {
            $Script:XMargin = 4
            $Script:YMargin = $YMargin + 45
            }
        Else {$Script:XMargin = $XMargin + 146}
        $ButtonNumber++
        }    
    }

# Create General Tab Buttons
$Script:GeneralTab = $Matrix | Where-Object {$_.Tab -like "*General*"}
$GeneralCategories = ($Matrix | Where-Object {$_.Tab -like "*General*"}).SubCategory | Select -Unique
$Script:Node = $XML_MAIN.Window.Grid.Grid.TabControl.TabItem[4].ScrollViewer.Grid
$Script:XMargin = 4
$Script:YMargin = 2
$Script:LabelNumber = 1
$Script:ButtonNumber = 1
If ($GeneralCategories) {
    Foreach ($SubCategory in $GeneralCategories) {
        If ($LabelNumber -eq 1) {
            $Script:Node.Label.SetAttribute("Name", "GeneralLabel$($LabelNumber)") | Out-Null
            $Script:Node.Label.SetAttribute("Content", "$($SubCategory)") | Out-Null
            $Script:Node.Label.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Label.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($LabelNumber -eq 2) {
            $NewLabel = $Node.Label.Clone()
            $NewLabel.Name = "GeneralLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null        
            }
        Else {
            $NewLabel = $Node.Label[($LabelNumber -2)].Clone()
            $NewLabel.Name = "GeneralLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null
            }
        $LabelNumber++
        $Script:YMargin = $YMargin + 28
        $GeneralButtons = $GeneralTab | Where-Object {($_.SubCategory -eq $SubCategory)}
        Foreach ($Button in $GeneralButtons) {
            If ($ButtonNumber -eq 1) {
                $Script:Node.Button.SetAttribute("Name", "GeneralButton$($ButtonNumber)") | Out-Null
                $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
                $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
                $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
                $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
                }
            ElseIf ($ButtonNumber -eq 2) {
                $NewButton = $Node.Button.Clone()
                $NewButton.Name = "GeneralButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            Else {
                $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
                $NewButton.Name = "GeneralButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            # Set Margin for Next Pass
            If ($XMargin -eq 296) {
                $Script:XMargin = 4
                $Script:YMargin = $YMargin + 42
                }
            Else {$Script:XMargin = $XMargin + 146}
            $ButtonNumber++
            }
        If ($XMargin -ne 4) {$Script:YMargin = $YMargin + 42}
        $Script:XMargin = 4
        }
    }
Else {
    $GeneralButtons = $Matrix | Where-Object {$_.Tab -like "*General*"}
    $Script:XMargin = 4
    $Script:YMargin = 10
    Foreach ($Button in $GeneralButtons) {
        If ($ButtonNumber -eq 1) {
            $Script:Node.Button.SetAttribute("Name", "GeneralButton$($ButtonNumber)") | Out-Null
            $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
            $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
            $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($ButtonNumber -eq 2) {
            $NewButton = $Node.Button.Clone()
            $NewButton.Name = "GeneralButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        Else {
            $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
            $NewButton.Name = "GeneralButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        # Set Margin for Next Pass
        If ($XMargin -eq 296) {
            $Script:XMargin = 4
            $Script:YMargin = $YMargin + 45
            }
        Else {$Script:XMargin = $XMargin + 146}
        $ButtonNumber++
        }    
    }

# Create Microsoft Tab Buttons
$Script:MicrosoftTab = $Matrix | Where-Object {$_.Tab -like "*Microsoft*"}
$MicrosoftCategories = ($Matrix | Where-Object {$_.Tab -like "*Microsoft*"}).SubCategory | Select -Unique
$Script:Node = $XML_MAIN.Window.Grid.Grid.TabControl.TabItem[5].ScrollViewer.Grid
$Script:XMargin = 4
$Script:YMargin = 2
$Script:LabelNumber = 1
$Script:ButtonNumber = 1
If ($MicrosoftCategories) {
    Foreach ($SubCategory in $MicrosoftCategories) {
        If ($LabelNumber -eq 1) {
            $Script:Node.Label.SetAttribute("Name", "MicrosoftLabel$($LabelNumber)") | Out-Null
            $Script:Node.Label.SetAttribute("Content", "$($SubCategory)") | Out-Null
            $Script:Node.Label.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Label.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($LabelNumber -eq 2) {
            $NewLabel = $Node.Label.Clone()
            $NewLabel.Name = "MicrosoftLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null        
            }
        Else {
            $NewLabel = $Node.Label[($LabelNumber -2)].Clone()
            $NewLabel.Name = "MicrosoftLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null
            }
        $LabelNumber++
        $Script:YMargin = $YMargin + 28
        $MicrosoftButtons = $MicrosoftTab | Where-Object {($_.SubCategory -eq $SubCategory)}
        Foreach ($Button in $MicrosoftButtons) {
            If ($ButtonNumber -eq 1) {
                $Script:Node.Button.SetAttribute("Name", "MicrosoftButton$($ButtonNumber)") | Out-Null
                $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
                $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
                $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
                $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
                }
            ElseIf ($ButtonNumber -eq 2) {
                $NewButton = $Node.Button.Clone()
                $NewButton.Name = "MicrosoftButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            Else {
                $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
                $NewButton.Name = "MicrosoftButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            # Set Margin for Next Pass
            If ($XMargin -eq 296) {
                $Script:XMargin = 4
                $Script:YMargin = $YMargin + 42
                }
            Else {$Script:XMargin = $XMargin + 146}
            $ButtonNumber++
            }
        If ($XMargin -ne 4) {$Script:YMargin = $YMargin + 42}
        $Script:XMargin = 4
        }
    }
Else {
    $MicrosoftButtons = $Matrix | Where-Object {$_.Tab -like "*Microsoft*"}
    $Script:XMargin = 4
    $Script:YMargin = 10
    Foreach ($Button in $MicrosoftButtons) {
        If ($ButtonNumber -eq 1) {
            $Script:Node.Button.SetAttribute("Name", "MicrosoftButton$($ButtonNumber)") | Out-Null
            $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
            $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
            $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($ButtonNumber -eq 2) {
            $NewButton = $Node.Button.Clone()
            $NewButton.Name = "MicrosoftButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        Else {
            $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
            $NewButton.Name = "MicrosoftButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        # Set Margin for Next Pass
        If ($XMargin -eq 296) {
            $Script:XMargin = 4
            $Script:YMargin = $YMargin + 45
            }
        Else {$Script:XMargin = $XMargin + 146}
        $ButtonNumber++
        }    
    }

# Create Advanced Tab Buttons
$Script:AdvancedTab = $Matrix | Where-Object {$_.Tab -like "*Advanced*"}
$AdvancedCategories = ($Matrix | Where-Object {$_.Tab -like "*Advanced*"}).SubCategory | Select -Unique
$Script:Node = $XML_MAIN.Window.Grid.Grid.TabControl.TabItem[6].ScrollViewer.Grid
$Script:XMargin = 4
$Script:YMargin = 2
$Script:LabelNumber = 1
$Script:ButtonNumber = 1
If ($AdvancedCategories) {
    Foreach ($SubCategory in $AdvancedCategories) {
        If ($LabelNumber -eq 1) {
            $Script:Node.Label.SetAttribute("Name", "AdvancedLabel$($LabelNumber)") | Out-Null
            $Script:Node.Label.SetAttribute("Content", "$($SubCategory)") | Out-Null
            $Script:Node.Label.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Label.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($LabelNumber -eq 2) {
            $NewLabel = $Node.Label.Clone()
            $NewLabel.Name = "AdvancedLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null        
            }
        Else {
            $NewLabel = $Node.Label[($LabelNumber -2)].Clone()
            $NewLabel.Name = "AdvancedLabel$($LabelNumber)"
            $NewLabel.Content = "$($SubCategory)"
            $NewLabel.Margin = "$XMargin,$YMargin,0,0"
            $NewLabel.Visibility = "Visible"
            $Script:Node.AppendChild($NewLabel) | Out-Null
            }
        $LabelNumber++
        $Script:YMargin = $YMargin + 28
        $AdvancedButtons = $AdvancedTab | Where-Object {($_.SubCategory -eq $SubCategory)}
        Foreach ($Button in $AdvancedButtons) {
            If ($ButtonNumber -eq 1) {
                $Script:Node.Button.SetAttribute("Name", "AdvancedButton$($ButtonNumber)") | Out-Null
                $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
                $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
                $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
                $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
                }
            ElseIf ($ButtonNumber -eq 2) {
                $NewButton = $Node.Button.Clone()
                $NewButton.Name = "AdvancedButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            Else {
                $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
                $NewButton.Name = "AdvancedButton$($ButtonNumber)"
                $NewButton.Content = "$($Button.Name)"
                $NewButton.Margin = "$XMargin,$YMargin,0,0"
                $NewButton.ToolTip = "$($Button.Tooltip)"
                $NewButton.Visibility = "Visible"
                $Script:Node.AppendChild($NewButton) | Out-Null
                }
            # Set Margin for Next Pass
            If ($XMargin -eq 296) {
                $Script:XMargin = 4
                $Script:YMargin = $YMargin + 42
                }
            Else {$Script:XMargin = $XMargin + 146}
            $ButtonNumber++
            }
        If ($XMargin -ne 4) {$Script:YMargin = $YMargin + 42}
        $Script:XMargin = 4
        }
    }
Else {
    $AdvancedButtons = $Matrix | Where-Object {$_.Tab -like "*Advanced*"}
    $Script:XMargin = 4
    $Script:YMargin = 10
    Foreach ($Button in $AdvancedButtons) {
        If ($ButtonNumber -eq 1) {
            $Script:Node.Button.SetAttribute("Name", "AdvancedButton$($ButtonNumber)") | Out-Null
            $Script:Node.Button.SetAttribute("Content", "$($Button.Name)") | Out-Null
            $Script:Node.Button.SetAttribute("Margin", "$XMargin,$YMargin,0,0") | Out-Null
            $Script:Node.Button.SetAttribute("ToolTip", "$($Button.Tooltip)") | Out-Null
            $Script:Node.Button.SetAttribute("Visibility", "Visible") | Out-Null
            }
        ElseIf ($ButtonNumber -eq 2) {
            $NewButton = $Node.Button.Clone()
            $NewButton.Name = "AdvancedButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        Else {
            $NewButton = $Node.Button[($ButtonNumber -2)].Clone()
            $NewButton.Name = "AdvancedButton$($ButtonNumber)"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Margin = "$XMargin,$YMargin,0,0"
            $NewButton.ToolTip = "$($Button.Tooltip)"
            $NewButton.Visibility = "Visible"
            $Script:Node.AppendChild($NewButton) | Out-Null
            }
        # Set Margin for Next Pass
        If ($XMargin -eq 296) {
            $Script:XMargin = 4
            $Script:YMargin = $YMargin + 45
            }
        Else {$Script:XMargin = $XMargin + 146}
        $ButtonNumber++
        }    
    }

# Create Form from XML
$Form_Load_Textblock2.Text = "Creating WPF Forms from XML..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Try {$Form_Main = [Windows.Markup.XamlReader]::Load($(New-Object System.Xml.XmlNodeReader $XML_MAIN))}
Catch {
    [System.Windows.MessageBox]::Show("Could not compile XML_MAIN Form.`n`nPress OK to Exit.",'Cannot Compile XML1','OK','Error') | Out-Null
    Exit}
Try {$Form_Info = [Windows.Markup.XamlReader]::Load($(New-Object System.Xml.XmlNodeReader $XML_INFO))}
Catch {
    [System.Windows.MessageBox]::Show("Could not compile XML_INFO Form.`n`nPress OK to Exit.",'Cannot Compile XML2','OK','Error') | Out-Null
    Exit}
Try {$Form_Map = [Windows.Markup.XamlReader]::Load($(New-Object System.Xml.XmlNodeReader $XML_MAP))}
Catch {
    [System.Windows.MessageBox]::Show("Could not compile XML_MAP Form.`n`nPress OK to Exit.",'Cannot Compile XML3','OK','Error') | Out-Null
    Exit}
Try {$Form_Esc = [Windows.Markup.XamlReader]::Load($(New-Object System.Xml.XmlNodeReader $XML_ESC))}
Catch {
    [System.Windows.MessageBox]::Show("Could not compile XML_ESC Form.`n`nPress OK to Exit.",'Cannot Compile XML4','OK','Error') | Out-Null
    Exit}
Try {$Form_Pic = [Windows.Markup.XamlReader]::Load($(New-Object System.Xml.XmlNodeReader $XML_PIC))}
Catch {
    [System.Windows.MessageBox]::Show("Could not compile XML_PIC Form.`n`nPress OK to Exit.",'Cannot Compile XML5','OK','Error') | Out-Null
    Exit}

# Load XAML Objects
$Form_Load_Textblock2.Text = "Creating Variables from WPF Forms..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
$XML_MAIN.SelectNodes("//*[@Name]") | %{Set-Variable -Name "$($_.Name)" -Value $Form_Main.FindName($_.Name) -ErrorAction Stop}
$XML_INFO.SelectNodes("//*[@Name]") | %{Set-Variable -Name "$($_.Name)" -Value $Form_Info.FindName($_.Name) -ErrorAction Stop}
$XML_MAP.SelectNodes("//*[@Name]") | %{Set-Variable -Name "$($_.Name)" -Value $Form_Map.FindName($_.Name) -ErrorAction Stop}
$XML_ESC.SelectNodes("//*[@Name]") | %{Set-Variable -Name "$($_.Name)" -Value $Form_Esc.FindName($_.Name) -ErrorAction Stop}
$XML_PIC.SelectNodes("//*[@Name]") | %{Set-Variable -Name "$($_.Name)" -Value $Form_Pic.FindName($_.Name) -ErrorAction Stop}

<# Create Clipboard Tab Buttons
If ($ClipboardMatrix.Name) {
    Foreach ($Button in $ClipboardMatrix) {
        $NewButton = [Windows.Markup.XamlReader]::Load((New-Object -TypeName System.Xml.XmlNodeReader -ArgumentList $ButtonXml))
        $NewButton.Name = "$($Button.KEY)"
        $NewButton.Content = "$($Button.Name)"
        $NewButton.Tag = @{Script=$NewButton;Text="$($Button.TEXT)"}
        $NewButton.Add_Click({param($PassVar) Clipboard -Button $($PassVar.Tag.Script) -Form $Form_Main -Text $($PassVar.Tag.Text)})
        $NewButton.Margin = "$($Button.XMARGIN),$($Button.YMARGIN),0,0"
        $NewButton.ToolTip = "$($Button.TEXT)"
        $NewButton.Foreground = "$($Button.FORECOLOR)"
        $NewButton.Background = "$($Button.BACKCOLOR)"
        $NewButton.Visibility = "Visible"
        $ClipBoardGrid.AddChild($NewButton)
        }
    $LastButton = ($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1)
    $XMargin = [int]$LastButton.XMARGIN
    $YMargin = [int]$LastButton.YMARGIN
    If ($XMargin -eq 296) {
            $XMargin = 4
            $YMargin = $YMargin + 42
            }
    Else {$XMargin = $XMargin + 146}
    $ClipboardButtonADD.Margin = "$XMargin,$YMargin,0,0"
    }
#>

# Add Additional Properties and Assign Values to Buttons from Matrix
$Form_Load_Textblock2.Text = "Assigning Values to Tab Buttons..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Foreach ($Button in (Get-Variable -ValueOnly | Select-Object | Where-Object {$_.GetType() -eq [System.Windows.Controls.Button]})) {
    Add-Member -InputObject $Button -NotePropertyName Execute -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName Argument -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName Admin -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName SafeMode -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName WorkingDirectory -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName Tab -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName KB -NotePropertyValue $Null -Force
    Add-Member -InputObject $Button -NotePropertyName Keywords -NotePropertyValue $Null -Force
    If ($Button.Name.StartsWith('General')) {
        $GeneralButton = $GeneralTab | Where-Object {($_.Name -eq $($Button.Content))}
        $Button.Tab = $General.Name
        $Button.Tag = @{Script=$Button}
        $Button.Add_Click({param($PassVar) LeftClick -Button $($PassVar.Tag.Script)})
        $Button.Add_MouseUP({param($PassVar) RightClick -Button $($PassVar.Tag.Script)})
        $Button.Execute = $GeneralButton.Execute
        $Button.Argument = $GeneralButton.Argument
        $Button.Admin = $GeneralButton.Admin
        $Button.SafeMode = $GeneralButton.SafeMode
        $Button.WorkingDirectory = $GeneralButton.WorkingDirectory
        $Button.KB = $GeneralButton.KB
        }
    If ($Button.Name.StartsWith('Microsoft')) {
        $MicrosoftButton = $MicrosoftTab | Where-Object {($_.Name -eq $($Button.Content))}
        $Button.Tab = $Microsoft.Name
        $Button.Tag = @{Script=$Button}
        $Button.Add_Click({param($PassVar) LeftClick -Button $($PassVar.Tag.Script)})
        $Button.Add_MouseUP({param($PassVar) RightClick -Button $($PassVar.Tag.Script)})
        $Button.Execute = $MicrosoftButton.Execute
        $Button.Argument = $MicrosoftButton.Argument
        $Button.Admin = $MicrosoftButton.Admin
        $Button.SafeMode = $MicrosoftButton.SafeMode                 
        $Button.WorkingDirectory = $MicrosoftButton.WorkingDirectory
        $Button.KB = $MicrosoftButton.KB
        }
    If ($Button.Name.StartsWith('Advanced')) {
        $AdvancedButton = $AdvancedTab | Where-Object {($_.Name -eq $($Button.Content))}
        $Button.Tab = $Advanced.Name
        $Button.Tag = @{Script=$Button}
        $Button.Add_Click({param($PassVar) LeftClick -Button $($PassVar.Tag.Script)})
        $Button.Add_MouseUP({param($PassVar) RightClick -Button $($PassVar.Tag.Script)})
        $Button.Execute = $AdvancedButton.Execute
        $Button.Argument = $AdvancedButton.Argument
        $Button.Admin = $AdvancedButton.Admin
        $Button.SafeMode = $AdvancedButton.SafeMode
        $Button.WorkingDirectory = $AdvancedButton.WorkingDirectory
        $Button.KB = $AdvancedButton.KB
        }
    If ($Button.Name.StartsWith('Tools')) {
        $ToolsButton = $ToolsTab | Where-Object {($_.Name -eq $($Button.Content))}
        $Button.Tab = $Tools.Name
        $Button.Tag = @{Script=$Button}
        $Button.Add_Click({param($PassVar) LeftClick -Button $($PassVar.Tag.Script)})
        $Button.Add_MouseUP({param($PassVar) RightClick -Button $($PassVar.Tag.Script)})
        $Button.Execute = $ToolsButton.Execute
        $Button.Argument = $ToolsButton.Argument
        $Button.Admin = $ToolsButton.Admin
        $Button.SafeMode = $ToolsButton.SafeMode
        $Button.WorkingDirectory = $ToolsButton.WorkingDirectory
        $Button.KB = $ToolsButton.KB
        }
    If ($Button.Name.StartsWith('Links')) {
        $LinksButton = $LinksTab | Where-Object {($_.Name -eq $($Button.Content))}
        $Button.Tab = $Links.Name
        $Button.Tag = @{Script=$Button}
        $Button.Add_Click({param($PassVar) LeftClick -Button $($PassVar.Tag.Script)})
        $Button.Add_MouseUP({param($PassVar) RightClick -Button $($PassVar.Tag.Script)})
        $Button.Execute = $LinksButton.Execute
        $Button.Argument = $LinksButton.Argument
        $Button.Admin = $LinksButton.Admin
        $Button.SafeMode = $LinksButton.SafeMode
        $Button.WorkingDirectory = $LinksButton.WorkingDirectory
        $Button.KB = $LinksButton.KB
        }
    If ($Button.Name.StartsWith('Apps')) {
        $AppsButton = $AppsTab | Where-Object {($_.Name -eq $($Button.Content))}
        $Button.Tab = $Apps.Name
        $Button.Tag = @{Script=$Button}
        $Button.Add_Click({param($PassVar) LeftClick -Button $($PassVar.Tag.Script)})
        $Button.Add_MouseUP({param($PassVar) RightClick -Button $($PassVar.Tag.Script)})
        $Button.Execute = $AppsButton.Execute
        $Button.Argument = $AppsButton.Argument
        $Button.Admin = $AppsButton.Admin
        $Button.SafeMode = $AppsButton.SafeMode
        $Button.WorkingDirectory = $AppsButton.WorkingDirectory
        $Button.KB = $AppsButton.KB
        }
    }

# Enable Advanced tab for Authorized Roles
If ($LocalUserAd.costcenterdescription -notlike "*FIELD*") {
    If (($LocalUserAd.description -eq "YOURROLE") -or ($LocalUserAd.description -eq "YOURROLE")) {If (($LocalUserAd.jobfamilyname -eq "YOURROLE") -or ($LocalUserAd.jobfamilyname -eq "YOURROLE") -or ($LocalUserAd.jobfamilyname -eq "YOURROLE")) {$Advanced.Visibility = "Visible"}}
    If ($LocalUserAd.description -eq "YOURROLE") {$Advanced.Visibility = "Visible"}
    If ($LocalUserAd.description -eq "YOURROLE") {$Advanced.Visibility = "Visible"}
    If ($LocalUserAd.description -eq "YOURROLE") {$Advanced.Visibility = "Visible"}
    }

# Enable EMS for Authorized Roles
If (($LocalUserAd.employeesap -eq "YOURROLE") -or ($LocalUserAd.jobfamilyname -eq "YOURROLE") -or ($LocalUserAd.jobfamilyname -eq "YOURROLE")) {$EMS_Button.Visibility = "Visible"}

# Start EMS for Assigned Roles
If (($LocalUserAd.jobfamilyname -eq "Help Desk Specialist") -and ($LocalUserAd.employeesap -eq "YOURROLE")) {$Script:EMSMode = $True}
If ((!$LocalUserAd.jobfamilyname) -and ($LocalUserAd.employeesap -eq "YOURROLE") -and ($LocalUserAd.employeetype -eq "Non-Employee")) {$Script:EMSMode = $True}

# Start EMS if EMSMode is True
If ($EMSMode -eq $True) {Start-Process -FilePath "$CurrentDir\Agent Toolbox EMS.exe" -WindowStyle Hidden -ErrorAction SilentlyContinue}

# Create Array of Theme Options
$Form_Load_Textblock2.Text = "Creating Internal Arrays..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
$Themes = @(
	@{Theme="Main Default"; BackColor=$Backcolor; ForeColor=$TextColor; Background=$Background; Opacity=$Opacity; Index="0"}
	@{Theme="Safe Default"; BackColor=$SafeBackcolor; ForeColor=$SafeTextColor; Background=""; Opacity=""; Index="1"}
	@{Theme="BlackWhite"; BackColor="#FF2f2f2f"; ForeColor="#FFffffff"; Background=""; Opacity=""; Index="2"}
	@{Theme="Blimey"; BackColor="#FF7ec24f"; ForeColor="#FFffffff"; Background=""; Opacity=""; Index="3"}
	@{Theme="Blues"; BackColor="#FFadd5f5"; ForeColor="#FF285080"; Background=""; Opacity=""; Index="4"}
	@{Theme="Clean"; BackColor="#FFffffff"; ForeColor="#FF00b9ff"; Background=""; Opacity=""; Index="5"}
	@{Theme="ContrastUI"; BackColor="#FF182838"; ForeColor="#FFffffff"; Background=""; Opacity=""; Index="6"}
	@{Theme="Darknow"; BackColor="#FF333333"; ForeColor="#FFe51b24"; Background=""; Opacity=""; Index="7"}
	@{Theme="Rose"; BackColor="#FFcd5762"; ForeColor="#FFeeeeee"; Background=""; Opacity=""; Index="8"}
	@{Theme="System"; BackColor="#FF485563"; ForeColor="#FF6ab7ef"; Background=""; Opacity=""; Index="9"}
	@{Theme="Terminal"; BackColor="#FF222222"; ForeColor="#FF8ef03b"; Background=""; Opacity=""; Index="10"}
	@{Theme="USB"; BackColor="#FF0c2074"; ForeColor="#FF67b2e8"; Background=""; Opacity=""; Index="11"}
    )

# Create Array of Browser Options
$BrowserOptions = @(
	@{Browser="Internet Explorer"; Path="C:\Program Files (x86)\Internet Explorer\iexplore.exe"; Index="0"}
	@{Browser="Mozilla Firefox"; Path="C:\Program Files (x86)\Mozilla Firefox\firefox.exe"; Index="1"}
	@{Browser="Google Chrome"; Path="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"; Index="2"}
    )

# Create Array of OpenLink Options
$OpenLinkList = @(
	@{Type="In New Tab"; Command="C:\Program Files (x86)\Internet Explorer\iexplore.exe"; Index="0"}
	@{Type="In New Window"; Command="C:\Program Files (x86)\Mozilla Firefox\firefox.exe"; Index="1"}
    )

# Create Array of WindowsStyle Options
$WindowStyleList = @(
    @{Name="None"; Index="0"}	
    @{Name="ToolWindow"; Index="1"}
	@{Name="SingleBorderWindow"; Index="2"}
	@{Name="ThreeDBorderWindow"; Index="3"}
    )

# Create Array of Enabled Options
$EnabledOptions = @(
    @{Name="Enabled"; Index="0"}	
    @{Name="Disabled"; Index="1"}
    )

# Create Array of SN Redirect Issues
$SNIssuesArray = @(
    @{Name="Make your selection..."}
    @{Name="And using the SN search feature"}	
	@{Name="The Back Button in my Browser"}
    @{Name="The Back Button in SN"}
	@{Name="A Call Record link"}
	@{Name="An INC link"}
	@{Name="Other (Please Specify)"}
    )

# Create Array of CheckMarks
$Script:CheckMarks = (Get-Variable -ValueOnly | Select-Object | Where-Object {$_.GetType() -eq [System.Windows.Controls.Label] -and (!($_.Name).StartsWith('Esc')) -and $_.Name -like "*Check*"})

# Create Array of Font Options
Foreach ($_ in [System.Drawing.FontFamily]::Families) {If (($_.Name -notlike "*Webdings*") -and ($_.Name -notlike "*Wingdings*")) {$Script:FontList.add($_.Name) | Out-Null}}

# Add Themes to ThemeComboBox
Foreach ($_ in $Themes) {$ThemeComboBox.Items.add($_.Theme) | Out-Null}

# Add Themes to ConfigMainThemeComboBox
Foreach ($_ in $Themes) {$ConfigMainThemeComboBox.Items.add($_.Theme) | Out-Null}

# Add Themes to ConfigSafeThemeComboBox
Foreach ($_ in $Themes) {$ConfigSafeThemeComboBox.Items.add($_.Theme) | Out-Null}

# Add BrowserOptions to ConfigBrowserComboBox
Foreach ($_ in $BrowserOptions) {$ConfigBrowserComboBox.Items.add($_.Browser) | Out-Null}

# Add OpenLink to ConfigTabComboBox
Foreach ($_ in $OpenLinkList) {$ConfigTabComboBox.Items.add($_.Type) | Out-Null}

# Add Font to ConfigFontComboBox
Foreach ($_ in $FontList) {$ConfigFontComboBox.Items.add($_) | Out-Null}

# Add Styles to ConfigWindowComboBox
Foreach ($_ in $WindowStyleList) {$ConfigWindowComboBox.Items.add($_.Name) | Out-Null}

# Add Styles to ConfigOnTopComboBox
Foreach ($_ in $EnabledOptions) {$ConfigOnTopComboBox.Items.add($_.Name) | Out-Null}

# Add Issues to SNIssueComboBox
Foreach ($_ in $SNIssuesArray) {$SNIssueComboBox.Items.add($_.Name) | Out-Null}

# Add Colors to Various ComboBoxes
Foreach ($_ in ([Enum]::GetValues([System.ConsoleColor]) | Where-Object {$_ -ne "DarkYellow"})) {$AddButton_TextColor_ComboBox.Items.add($_) | Out-Null}
Foreach ($_ in ([Enum]::GetValues([System.ConsoleColor]) | Where-Object {$_ -ne "DarkYellow"})) {$AddButton_BackColor_ComboBox.Items.add($_) | Out-Null}
Foreach ($_ in ([Enum]::GetValues([System.ConsoleColor]) | Where-Object {$_ -ne "DarkYellow"})) {$EditButton_TextColor_ComboBox.Items.add($_) | Out-Null}
Foreach ($_ in ([Enum]::GetValues([System.ConsoleColor]) | Where-Object {$_ -ne "DarkYellow"})) {$EditButton_BackColor_ComboBox.Items.add($_) | Out-Null}

# Add Sorted Options from Matrix to MainSearchComboBox
Foreach ($_ in $Matrix) {$SortedMatrix.Add($_.Name) | Out-Null}
$SortedMatrix.Sort()
Foreach ($_ in $SortedMatrix) {$MainSearchComboBox.Items.Add($_) | Out-Null}

# Create Array of Forms
$FormsMatrix = @(
	@{Main="Applications"; Sub="Citrix"}
	@{Main="Applications"; Sub="Database"}
	@{Main="Applications"; Sub="Desktop Application"}
	@{Main="Applications"; Sub="Global Learning Lab"}
	@{Main="Applications"; Sub="Intranet/Internet"}
	@{Main="Applications"; Sub="Lotus Notes/USB Mail"}
	@{Main="Applications"; Sub="Mainframe Application"}
	@{Main="Applications"; Sub="Mobility"}
	@{Main="Applications"; Sub="VPN"}
	@{Main="Applications"; Sub="Wizard"}
	@{Main="Credit Card Partners"; Sub="Credit Card Partners"}
	@{Main="E Pay Customer"; Sub="E Pay Customer"}
	@{Main="Hardware"; Sub="Computer"}
	@{Main="Hardware"; Sub="Server Hardware"}
	@{Main="Internet/Intranet"; Sub="Intranet/Internet"}
	@{Main="Network"; Sub="Network"}
	@{Main="Printer"; Sub="Epson-Nexus"}
	@{Main="Printer"; Sub="Printer"}
	@{Main="Security"; Sub="Drive Mapping-Role"}
	@{Main="Security"; Sub="Info Security Password"}
	@{Main="Server"; Sub="Database"}
	@{Main="Server"; Sub="File Restore"}
	@{Main="Server"; Sub="Server"}
	@{Main="Server"; Sub="Server Hardware"}
	@{Main="Templates"; Sub="IBM PC Replacement"}
	@{Main="Templates"; Sub="Log and Route"}
	@{Main="Templates"; Sub="Natural Disaster"}
	@{Main="Templates"; Sub="Server Patching/Reboot"}
	@{Main="Templates"; Sub="SM Request"}
	@{Main="Templates"; Sub="Software Delete"}
	@{Main="Transmission"; Sub="Transmission"}
	@{Main="Voice"; Sub="IVR"}
	@{Main="Voice"; Sub="Voice"}
	@{Main="Voice"; Sub="Voice Mail"}
	@{Main="Voice"; Sub="Webex"}
    )

# Create Array of Assignment Groups (SANITIZED)
$AssignmentGroups = @(
    @{Name="YOURGROUP"}
    )

# Create Array of Mobile Device Brands
$PhoneBrands = @(
	@{Name="Select Brand"}
	@{Name="Blackberry"}
	@{Name="iPhone"}
	@{Name="iPad"}
	@{Name="Android"}
	@{Name="Other"}
    )

# Create Array of Phone Types
$PhoneTypes = @(
	@{Name="Select Type"}
	@{Name="Cisco"}
	@{Name="Avaya"}
	@{Name="Other"}
    )

# Create Array of Device Ownership
$DeviceOwner = @(
	@{Name="Select Ownership"}
	@{Name="Corporate Owned"}
	@{Name="Personal Device"}
    )

# Create Functions
$Form_Load_Textblock2.Text = "Creating Internal Functions..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
Function UpdateClipboard {
    Foreach ($Child in ($ClipBoardGrid.Children | Where-Object {$_.Name -notlike "*Clipboard*"})) {$ClipBoardGrid.Children.Remove($Child)}
    [PSObject[]]$Script:ClipboardMatrix = Import-Csv $ClipboardFile
    $ClipboardMatrix | % {$_.NUMBER = [int]$_.NUMBER}
    # Create Clipboard Tab Buttons
    If ($ClipboardMatrix.Name) {
        Foreach ($Button in ($ClipboardMatrix | Sort -Property NUMBER)) {
            $NewButton = [Windows.Markup.XamlReader]::Load((New-Object -TypeName System.Xml.XmlNodeReader -ArgumentList $ButtonXml))
            $NewButton.Name = "$(-join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_}))"
            $NewButton.Content = "$($Button.Name)"
            $NewButton.Tag = @{Script=$NewButton;Text="$($Button.TEXT)"}
            $NewButton.Add_Click({param($PassVar) Clipboard -Button $($PassVar.Tag.Script) -Form $Form_Main -Text $($PassVar.Tag.Text)})
            $NewButton.Add_MouseUP({param($PassVar) EditButtonMenu -Button $($PassVar.Tag.Script)})
            $NewButton.Margin = "$($Button.XMARGIN),$($Button.YMARGIN),0,0"
            $NewButton.ToolTip = "$($Button.TEXT)"
            $NewButton.Foreground = "$($Button.FORECOLOR)"
            $NewButton.Background = "$($Button.BACKCOLOR)"
            $NewButton.Visibility = "Visible"
            $ClipBoardGrid.AddChild($NewButton)
            }
        $LastButton = ($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1)
        $XMargin = [int]$LastButton.XMARGIN
        $YMargin = [int]$LastButton.YMARGIN
        If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
        Else {$XMargin = $XMargin + 146}
        $ClipboardButtonADD.Margin = "$XMargin,$YMargin,0,0"
        }
    Else {
        $XMargin = [int]$ClipBoardButtonPWD.Margin.Left
        $YMargin = [int]$ClipBoardButtonPWD.Margin.Top
        If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
        Else {$XMargin = $XMargin + 146}
        $ClipboardButtonADD.Margin = "$XMargin,$YMargin,0,0"        
        }
    $Script:ClipboardMatrix | Sort -Property NUMBER | Export-CSV -Path $ClipboardFile -NoTypeInformation
    }

Function SetEMSmsg {
    If ($Credentials) {               
        $credentialss = $credentials.GetNetworkCredential
        $Logon32ProviderDefault = 0
        $Logon32LogonInteractive = 2
        $tokenHandle = [IntPtr]::Zero
        $userName = Split-Path $credentials.UserName -Leaf
        $domain = Split-Path $credentials.UserName
        $unmanagedString = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode($credentials.Password);
        $success = $AdvApi32::LogonUser($userName, $domain, [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unmanagedString), $Logon32LogonInteractive, $Logon32ProviderDefault, [Ref] $tokenHandle)
        [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($unmanagedString);
        $Script:newIdentity = New-Object System.Security.Principal.WindowsIdentity($tokenHandle)        
        # Start Impersonation
        $context = $newIdentity.Impersonate()
        # Map Drive to Update Folder
        If (!(Test-Path -Path M:)) {New-PSDrive -Name "M" -PSProvider "FileSystem" -Root "\\YOURLOCATION" -Persist  | Out-Null}
        $EMSWriter = New-Object System.IO.StreamWriter "M:\Agent Toolbox MSG.txt", $False
        $EMSWriter.WriteLine("$($MSG_Send_Textbox.Text)")
        $EMSWriter.Close()        
        #Set-Content -Path "M:\Agent Toolbox MSG.txt" -Value "$($MSG_Send_Textbox.Text)"
        # End Impersonation
        $context.Undo()            
        }
    Else {
        Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Domain User Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
        Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
            $Script:Credentials = $Null
            Return
            }  
        If ($Credentials) {               
            $credentialss = $credentials.GetNetworkCredential
            $Logon32ProviderDefault = 0
            $Logon32LogonInteractive = 2
            $tokenHandle = [IntPtr]::Zero
            $userName = Split-Path $credentials.UserName -Leaf
            $domain = Split-Path $credentials.UserName
            $unmanagedString = [System.Runtime.InteropServices.Marshal]::SecureStringToGlobalAllocUnicode($credentials.Password);
            $success = $AdvApi32::LogonUser($userName, $domain, [System.Runtime.InteropServices.Marshal]::PtrToStringUni($unmanagedString), $Logon32LogonInteractive, $Logon32ProviderDefault, [Ref] $tokenHandle)
            [System.Runtime.InteropServices.Marshal]::ZeroFreeGlobalAllocUnicode($unmanagedString);
            $Script:newIdentity = New-Object System.Security.Principal.WindowsIdentity($tokenHandle)        
            # Start Impersonation
            $context = $newIdentity.Impersonate()
            $EMSWriter = New-Object System.IO.StreamWriter "M:\Agent Toolbox MSG.txt", $False
            $EMSWriter.WriteLine("$($MSG_Send_Textbox.Text)")
            $EMSWriter.Close()            
            #Set-Content -Path "\\YOURLOCATION\Agent Toolbox MSG.txt" -Value "$($MSG_Send_Textbox.Text)"
            # End Impersonation
            $context.Undo()            
            }
        }
    }

Function ReportSNIssue {
    param($LogAgentid,$LogMisDirect,$LogRealted)
    $SqlCmdLOG.CommandText = "INSERT INTO YOUR.TABLE ([agent],[misdirect],[related]) VALUES ('$LogAgentid','$LogMisDirect','$LogRealted')"
    # Clear and Fill Dataset
    $Script:SqlDataSetLOG.Clear()
    $SqlAdapterLOG.Fill($SqlDataSetLOG) | Out-Null
    }

Function WriteLog {
    param($LogDatetime,$LogAgentid,$LogTab,$LogAction,$LogWsid,$LogUserid,$LogSearch)
    $SqlCmdLOG.CommandText = "INSERT INTO YOURTABLE ([datetime],[agentid],[tab],[action],[wsid],[userid],[search]) VALUES ('$LogDatetime','$LogAgentid','$LogTab','$LogAction','$LogWsid','$LogUserid','$LogSearch')"
    # Clear and Fill Dataset
    $SqlDataSetLOG.Clear()
    Try {$SqlAdapterLOG.Fill($SqlDataSetLOG) | Out-Null}
    Catch {WriteBackupLog $LogDatetime $LogAgentid $LogTab $LogAction $LogWsid $LogUserid $LogSearch}
    }

Function WriteBackupLog {
    param($BackLogDatetime,$BackLogAgentid,$BackLogTab,$BackLogAction,$BackLogWsid,$BackLogUserid,$BackLogSearch)
    If (!(Test-Path -Path $LogFile)) {
        $LogWriter = New-Object System.IO.StreamWriter $LogFile, $True
        $LogWriter.WriteLine("DATETIME,AGENTID,TAB,ACTION,WSID,USERID,SEARCH")
        $LogWriter.WriteLine("$BackLogDatetime,$BackLogAgentid,$BackLogTab,$BackLogAction,$BackLogWsid,$BackLogUserid,$BackLogSearch")
        $LogWriter.Close()
        }
    Else {
        $LogWriter = New-Object System.IO.StreamWriter $LogFile, $True
        $LogWriter.WriteLine("$BackLogDatetime,$BackLogAgentid,$BackLogTab,$BackLogAction,$BackLogWsid,$BackLogUserid,$BackLogSearch")
        $LogWriter.Close()        
        }
    }

Function Clipboard($Form,$Button,$Text) {
    $Script:ClearTimer.Dispose()
    If ($Button.Text) {$SavedText = $Button.Text} Else {$SavedText = $Button.Content}
    Set-Clipboard -Value $Text
    If ($Button.Text) {$Button.Text = "Copied to clipboard!"} Else {$Button.Content = "Copied to clipboard!"}
    $Form.Dispatcher.Invoke([action]{$Button},"Render")
    Start-Sleep -m 500
    If ($Button.Text) {$Button.Text = $SavedText} Else {$Button.Content = $SavedText}    
    $Form.Dispatcher.Invoke([action]{$Button},"Render")
    }

Function SetTextColor($Color) {
    # Set Labels Foreground Color
    $TestLabel.Foreground = $Color
    $MainToolboxVersion.Foreground = $Color
    $StartMenuLabel1.Foreground = $Color
    $StartMenuLabel2.Foreground = $Color
    $MainBlankLabel.Foreground = $Color
    $GatherToolboxVersion.Foreground = $Color
    $GatherMenuLabel.Foreground = $Color
    $ConfigOptionsLabel.Foreground = $Color
    $ConfigBrowserLabel.Foreground = $Color
    $ConfigTabLabel.Foreground = $Color
    $ConfigWindowLabel.Foreground = $Color
    $ConfigMainForeLabel.Foreground = $Color
    $ConfigMainBackLabel.Foreground = $Color
    $ConfigSafeForeLabel.Foreground = $Color
    $ConfigSafeBackLabel.Foreground = $Color
    $ConfigMainThemeLabel.Foreground = $Color
    $ConfigSafeThemeLabel.Foreground = $Color
    $ConfigFontLabel.Foreground = $Color
    $ConfigOnTopLabel.Foreground = $Color
    $ConfigBackgroundLabel.Foreground = $Color
    $ConfigOpacityLabel.Foreground = $Color
    $MainMenuLabel.Foreground = $Color
    $LeftTopLine.Foreground = $Color
    $LeftMidLine.Foreground = $Color
    $LeftBottomLine.Foreground = $Color
    $RightTopLine.Foreground = $Color
    $RightMidLine.Foreground = $Color
    $RightBottomLine.Foreground = $Color
    $ThemeLabelLeft.Foreground = $Color
    $ThemeLabelRight.Foreground = $Color
    $InfoStartLabel.Foreground = $Color
    $InfoWSIDLabel.Foreground = $Color
    $InfoIPLabel.Foreground = $Color
    $InfoMANUFACTURERLabel.Foreground = $Color
    $InfoMODELLabel.Foreground = $Color
    $InfoSERIALLabel.Foreground = $Color
    $InfoCHASSISLabel.Foreground = $Color
    $InfoPWDEXPIRESLabel.Foreground = $Color
    $InfoDOCKLabel.Foreground = $Color
    $InfoCPUINFOLabel.Foreground = $Color
    $InfoCPUDATALabel.Foreground = $Color
    $InfoHDDINFOLabel.Foreground = $Color
    $InfoHDDDATALabel.Foreground = $Color
    $InfoVERSIONINFOLabel.Foreground = $Color
    $InfoVERSIONDATALabel.Foreground = $Color
    $InfoNETINFOLabel.Foreground = $Color
    $InfoNETDATALabel.Foreground = $Color
    $InfoSCCMINFOLabel.Foreground = $Color
    $InfoCCMCLIENTVERSIONLabel.Foreground = $Color
    $InfoCCMSETUPSTATUSLabel.Foreground = $Color
    $InfoCCMSTATEMSGLabel.Foreground = $Color
    $InfoCCMMODELabel.Foreground = $Color
    $InfoCCMEXECSTATUSLabel.Foreground = $Color
    $InfoBITSSTATUSLabel.Foreground = $Color
    $InfoWUAUSERVSTATUSLabel.Foreground = $Color
    $InfoWINMGMTSTATUSLabel.Foreground = $Color
    $InfoRREGISTRYSTATUSLabel.Foreground = $Color
    $InfoMEMORYLabel.Foreground = $Color
    $InfoOSLabel.Foreground = $Color
    $InfoRELEASEIDLabel.Foreground = $Color
    $InfoINSTALLLabel.Foreground = $Color
    $InfoTZLabel.Foreground = $Color
    $InfoDATETIMELabel.Foreground = $Color
    $InfoUSERIDLabel.Foreground = $Color
    $InfoFULLNAMELabel.Foreground = $Color
    $InfoEMAILADDRESSLabel.Foreground = $Color
    $InfoPHONELabel.Foreground = $Color
    $InfoMOBILELabel.Foreground = $Color
    $InfoMANAGERNAMELabel.Foreground = $Color
    $InfoEMPLOYEELabel.Foreground = $Color
    $InfoJOBTITLELabel.Foreground = $Color
    $InfoLOCATIONLabel.Foreground = $Color
    $InfoDEPTNAMELabel.Foreground = $Color
    $InfoDIVISIONLabel.Foreground = $Color
    $InfoBUSINESSLINELabel.Foreground = $Color
    $InfoENTERPRISEROLELabel.Foreground = $Color
    $InfoToolboxVersion.Foreground = $Color
    $InfoLabel.Foreground = $Color
    $MapStartLabel.Foreground = $Color
    $MapUserLabel.Foreground = $Color
    $MapTimeLabel.Foreground = $Color
    $MapRoleLabel.Foreground = $Color
    $MapServerLabel.Foreground = $Color
    $MapDrivesLabel.Foreground = $Color
    $MapTitleLabel.Foreground = $Color
    $SNIssueToolboxVersion.Foreground = $Color
    $SNIssueMenuLabel.Foreground = $Color
    $SNIssueTitleLabel.Foreground = $Color
    $MSG_Send_ToolboxVersion.Foreground = $Color
    $MSG_Send_MainLabel.Foreground = $Color
    $MSG_Send_TitleLabel.Foreground = $Color
    $AddButton_TitleLabel.Foreground = $Color
    $AddButton_Name_Label.Foreground = $Color
    $AddButton_Text_Label.Foreground = $Color
    $AddButton_ToolboxVersion.Foreground = $Color
    $AddButton_TextColor_Label.Foreground = $Color
    $AddButton_BackColor_Label.Foreground = $Color
    $AddButton_Position_Label.Foreground = $Color
    $EditButton_TitleLabel.Foreground = $Color
    $EditButton_Name_Label.Foreground = $Color
    $EditButton_Text_Label.Foreground = $Color
    $EditButton_ToolboxVersion.Foreground = $Color
    $EditButton_TextColor_Label.Foreground = $Color
    $EditButton_BackColor_Label.Foreground = $Color
    $EditButton_Position_Label.Foreground = $Color
    $RemoveButton_TitleLabel.Foreground = $Color
    $RemoveButton_Name_Label.Foreground = $Color
    $AddButton_Warning_Label.Foreground = $Color
    $EditButton_Warning_Label.Foreground = $Color
    # Set TextBlocks Foreground Color
    $GatherMenuTextblock.Foreground = $Color
    $InfoWSIDTextblock.Foreground = $Color
    $InfoIPTextblock.Foreground = $Color
    $InfoMAKETextblock.Foreground = $Color
    $InfoMODELTextblock.Foreground = $Color
    $InfoSERIALTextblock.Foreground = $Color
    $InfoCHASSISTextblock.Foreground = $Color
    $InfoPWDEXPIRESLabel.Foreground = $Color
    $InfoPWDEXPIRESTextblock.Foreground = $Color
    $InfoDOCKTextblock.Foreground = $Color
    $InfoCPUINFOTextblock.Foreground = $Color
    $InfoCPUDATATextblock.Foreground = $Color
    $InfoHDDINFOTextblock.Foreground = $Color
    $InfoHDDDATATextblock.Foreground = $Color
    $InfoVERSIONINFOTextblock.Foreground = $Color
    $InfoVERSIONDATATextblock.Foreground = $Color
    $InfoNETINFOTextblock.Foreground = $Color
    $InfoNETDATATextblock.Foreground = $Color
    $InfoSCCMINFOTextblock.Foreground = $Color
    $InfoCCMCLIENTVERSIONTextblock.Foreground = $Color
    $InfoCCMSETUPSTATUSTextblock.Foreground = $Color
    $InfoCCMSTATEMSGTextblock.Foreground = $Color
    $InfoCCMMODETextblock.Foreground = $Color
    $InfoCCMEXECSTATUSTextblock.Foreground = $Color
    $InfoBITSSTATUSTextblock.Foreground = $Color
    $InfoWUAUSERVSTATUSTextblock.Foreground = $Color
    $InfoWINMGMTSTATUSTextblock.Foreground = $Color
    $InfoRREGISTRYSTATUSTextblock.Foreground = $Color
    $InfoMEMORYTextblock.Foreground = $Color
    $InfoOSTextblock.Foreground = $Color
    $InfoRELEASEIDTextblock.Foreground = $Color
    $InfoINSTALLTextblock.Foreground = $Color
    $InfoTZTextblock.Foreground = $Color
    $InfoDATETIMETextblock.Foreground = $Color
    $InfoUSERIDTextblock.Foreground = $Color
    $InfoFULLNAMETextblock.Foreground = $Color
    $InfoEMAILADDRESSTextblock.Foreground = $Color
    $InfoPHONETextblock.Foreground = $Color
    $InfoMOBILETextblock.Foreground = $Color
    $InfoMANAGERNAMETextblock.Foreground = $Color
    $InfoEMPLOYEETextblock.Foreground = $Color
    $InfoJOBTITLETextblock.Foreground = $Color
    $InfoLOCATIONTextblock.Foreground = $Color
    $InfoDEPTNAMETextblock.Foreground = $Color
    $InfoDIVISIONTextblock.Foreground = $Color
    $InfoBUSINESSLINETextblock.Foreground = $Color
    $InfoENTERPRISEROLETextblock.Foreground = $Color
    $MapUserTextblock.Foreground = $Color
    $MapTimeTextblock.Foreground = $Color
    $MapRoleTextblock.Foreground = $Color
    $MapServerTextblock.Foreground = $Color
    $MSG_Send_MainTextblock.Foreground = $Color
    $MSG_Send_TitleTextblock.Foreground = $Color
    $AddButton_TitleTextblock.Foreground = $Color
    $AddButton_MainTextblock.Foreground = $Color
    $AddButton_Text_Textblock.Foreground = $Color
    $AddButton_TextColor_Textblock.Foreground = $Color
    $AddButton_BackColor_Textblock.Foreground = $Color
    $RemoveButton_TitleTextblock.Foreground = $Color
    $RemoveButton_MainTextblock.Foreground = $Color
    # Set Buttons Foreground Color
    $HelpButton.Foreground = $Color
    $ExitButton.Foreground = $Color
    $MinimizeButton.Foreground = $Color
    $WSIDButton.Foreground = $Color
    $IPButton.Foreground = $Color
    $OSButton.Foreground = $Color
    $PWDEXPIRESButton.Foreground = $Color
    $USERIDButton.Foreground = $Color
    $UPTIMEButton.Foreground = $Color
    $MapScriptButton.Foreground = $Color
    }

Function SetBorderBrush($Color) {
    # Set Labels BorderBrush Color To TextColor
    $TestLabel.BorderBrush = $Color
    $MainToolboxVersion.BorderBrush = $Color
    $StartMenuLabel1.BorderBrush = $Color
    $StartMenuLabel2.BorderBrush = $Color
    $MainBlankLabel.BorderBrush = $Color
    $GatherToolboxVersion.BorderBrush = $Color
    $GatherMenuLabel.BorderBrush = $Color
    $ConfigOptionsLabel.BorderBrush = $Color
    $ConfigBrowserLabel.BorderBrush = $Color
    $ConfigTabLabel.BorderBrush = $Color
    $ConfigWindowLabel.BorderBrush = $Color
    $ConfigMainForeLabel.BorderBrush = $Color
    $ConfigMainBackLabel.BorderBrush = $Color
    $ConfigSafeForeLabel.BorderBrush = $Color
    $ConfigSafeBackLabel.BorderBrush = $Color
    $ConfigMainThemeLabel.BorderBrush = $Color
    $ConfigSafeThemeLabel.BorderBrush = $Color
    $ConfigFontLabel.BorderBrush = $Color
    $ConfigOnTopLabel.BorderBrush = $Color
    $ConfigBackgroundLabel.BorderBrush = $Color
    $ConfigOpacityLabel.BorderBrush = $Color
    $MainMenuLabel.BorderBrush = $Color
    $LeftTopLine.BorderBrush = $Color
    $LeftMidLine.BorderBrush = $Color
    $LeftBottomLine.BorderBrush = $Color
    $RightTopLine.BorderBrush = $Color
    $RightMidLine.BorderBrush = $Color
    $RightBottomLine.BorderBrush = $Color
    $ThemeLabelLeft.BorderBrush = $Color
    $ThemeLabelRight.BorderBrush = $Color
    $InfoStartLabel.BorderBrush = $Color
    $InfoWSIDLabel.BorderBrush = $Color
    $InfoIPLabel.BorderBrush = $Color
    $InfoMANUFACTURERLabel.BorderBrush = $Color
    $InfoMODELLabel.BorderBrush = $Color
    $InfoSERIALLabel.BorderBrush = $Color
    $InfoCHASSISLabel.BorderBrush = $Color
    $InfoPWDEXPIRESLabel.BorderBrush = $Color
    $InfoDOCKLabel.BorderBrush = $Color
    $InfoCPUINFOLabel.BorderBrush = $Color
    $InfoCPUDATALabel.BorderBrush = $Color
    $InfoHDDINFOLabel.BorderBrush = $Color
    $InfoHDDDATALabel.BorderBrush = $Color
    $InfoVERSIONINFOLabel.BorderBrush = $Color
    $InfoVERSIONDATALabel.BorderBrush = $Color
    $InfoNETINFOLabel.BorderBrush = $Color
    $InfoNETDATALabel.BorderBrush = $Color
    $InfoSCCMINFOLabel.BorderBrush = $Color
    $InfoCCMCLIENTVERSIONLabel.BorderBrush = $Color
    $InfoCCMSETUPSTATUSLabel.BorderBrush = $Color
    $InfoCCMSTATEMSGLabel.BorderBrush = $Color
    $InfoCCMMODELabel.BorderBrush = $Color
    $InfoCCMEXECSTATUSLabel.BorderBrush = $Color
    $InfoBITSSTATUSLabel.BorderBrush = $Color
    $InfoWUAUSERVSTATUSLabel.BorderBrush = $Color
    $InfoWINMGMTSTATUSLabel.BorderBrush = $Color
    $InfoRREGISTRYSTATUSLabel.BorderBrush = $Color
    $InfoMEMORYLabel.BorderBrush = $Color
    $InfoOSLabel.BorderBrush = $Color
    $InfoINSTALLLabel.BorderBrush = $Color
    $InfoTZLabel.BorderBrush = $Color
    $InfoDATETIMELabel.BorderBrush = $Color
    $InfoUSERIDLabel.BorderBrush = $Color
    $InfoFULLNAMELabel.BorderBrush = $Color
    $InfoEMAILADDRESSLabel.BorderBrush = $Color
    $InfoPHONELabel.BorderBrush = $Color
    $InfoMOBILELabel.BorderBrush = $Color
    $InfoMANAGERNAMELabel.BorderBrush = $Color
    $InfoEMPLOYEELabel.BorderBrush = $Color
    $InfoJOBTITLELabel.BorderBrush = $Color
    $InfoLOCATIONLabel.BorderBrush = $Color
    $InfoDEPTNAMELabel.BorderBrush = $Color
    $InfoDIVISIONLabel.BorderBrush = $Color
    $InfoBUSINESSLINELabel.BorderBrush = $Color
    $InfoENTERPRISEROLELabel.BorderBrush = $Color
    $InfoToolboxVersion.BorderBrush = $Color
    $InfoLabel.BorderBrush = $Color
    $MapStartLabel.BorderBrush = $Color
    $MapUserLabel.BorderBrush = $Color
    $MapTimeLabel.BorderBrush = $Color
    $MapRoleLabel.BorderBrush = $Color
    $MapServerLabel.BorderBrush = $Color
    $MapDrivesLabel.BorderBrush = $Color
    $MapTitleLabel.BorderBrush = $Color
    $AddButton_TitleLabel.BorderBrush = $Color
    $AddButton_Name_Label.BorderBrush = $Color
    $AddButton_Text_Label.BorderBrush = $Color
    $AddButton_ToolboxVersion.BorderBrush = $Color
    $AddButton_TextColor_Label.BorderBrush = $Color
    $AddButton_BackColor_Label.BorderBrush = $Color
    $RemoveButton_TitleLabel.BorderBrush = $Color
    $RemoveButton_Name_Label.BorderBrush = $Color
    # Set Buttons BorderBrush Color
    $HelpButton.BorderBrush = $Color
    $ExitButton.BorderBrush = $Color
    $MinimizeButton.BorderBrush = $Color
    $WSIDButton.BorderBrush = $Color
    $IPButton.BorderBrush = $Color
    $OSButton.BorderBrush = $Color
    $PWDEXPIRESButton.BorderBrush = $Color
    $USERIDButton.BorderBrush = $Color
    $UPTIMEButton.BorderBrush = $Color
    $MapScriptButton.BorderBrush = $Color
    }

Function SetFontFamily($FontFamily) {
    # Set Labels FontFamily
    $TestLabel.FontFamily = $FontFamily
    $MainToolboxVersion.FontFamily = $FontFamily
    $StartMenuLabel1.FontFamily = $FontFamily
    $StartMenuLabel2.FontFamily = $FontFamily
    $MainBlankLabel.FontFamily = $FontFamily
    $GatherToolboxVersion.FontFamily = $FontFamily
    $GatherMenuLabel.FontFamily = $FontFamily
    $ConfigOptionsLabel.FontFamily = $FontFamily
    $ConfigBrowserLabel.FontFamily = $FontFamily
    $ConfigTabLabel.FontFamily = $FontFamily
    $ConfigWindowLabel.FontFamily = $FontFamily
    $ConfigMainForeLabel.FontFamily = $FontFamily
    $ConfigMainBackLabel.FontFamily = $FontFamily
    $ConfigSafeForeLabel.FontFamily = $FontFamily
    $ConfigSafeBackLabel.FontFamily = $FontFamily
    $ConfigMainThemeLabel.FontFamily = $FontFamily
    $ConfigSafeThemeLabel.FontFamily = $FontFamily
    $ConfigFontLabel.FontFamily = $FontFamily
    $ConfigOnTopLabel.FontFamily = $FontFamily
    $ConfigBackgroundLabel.FontFamily = $FontFamily
    $ConfigOpacityLabel.FontFamily = $FontFamily
    $MainMenuLabel.FontFamily = $FontFamily
    $LeftTopLine.FontFamily = $FontFamily
    $LeftMidLine.FontFamily = $FontFamily
    $LeftBottomLine.FontFamily = $FontFamily
    $RightTopLine.FontFamily = $FontFamily
    $RightMidLine.FontFamily = $FontFamily
    $RightBottomLine.FontFamily = $FontFamily
    $ThemeLabelLeft.FontFamily = $FontFamily
    $ThemeLabelRight.FontFamily = $FontFamily
    $InfoStartLabel.FontFamily = $FontFamily
    $InfoWSIDLabel.FontFamily = $FontFamily
    $InfoIPLabel.FontFamily = $FontFamily
    $InfoMANUFACTURERLabel.FontFamily = $FontFamily
    $InfoMODELLabel.FontFamily = $FontFamily
    $InfoSERIALLabel.FontFamily = $FontFamily
    $InfoCHASSISLabel.FontFamily = $FontFamily
    $InfoMEMORYLabel.FontFamily = $FontFamily
    $InfoOSLabel.FontFamily = $FontFamily
    $InfoINSTALLLabel.FontFamily = $FontFamily
    $InfoTZLabel.FontFamily = $FontFamily
    $InfoDATETIMELabel.FontFamily = $FontFamily
    $InfoUSERIDLabel.FontFamily = $FontFamily
    $InfoFULLNAMELabel.FontFamily = $FontFamily
    $InfoEMAILADDRESSLabel.FontFamily = $FontFamily
    $InfoPHONELabel.FontFamily = $FontFamily
    $InfoMOBILELabel.FontFamily = $FontFamily
    $InfoMANAGERNAMELabel.FontFamily = $FontFamily
    $InfoEMPLOYEELabel.FontFamily = $FontFamily
    $InfoJOBTITLELabel.FontFamily = $FontFamily
    $InfoLOCATIONLabel.FontFamily = $FontFamily
    $InfoDEPTNAMELabel.FontFamily = $FontFamily
    $InfoDIVISIONLabel.FontFamily = $FontFamily
    $InfoBUSINESSLINELabel.FontFamily = $FontFamily
    $InfoENTERPRISEROLELabel.FontFamily = $FontFamily
    $InfoToolboxVersion.FontFamily = $FontFamily
    $InfoLabel.FontFamily = $FontFamily
    $MapStartLabel.FontFamily = $FontFamily
    $MapUserLabel.FontFamily = $FontFamily
    $MapTimeLabel.FontFamily = $FontFamily
    $MapRoleLabel.FontFamily = $FontFamily
    $MapServerLabel.FontFamily = $FontFamily
    $MapDrivesLabel.FontFamily = $FontFamily
    $MapTitleLabel.FontFamily = $FontFamily
    $AddButton_TitleLabel.FontFamily = $FontFamily
    $AddButton_Name_Label.FontFamily = $FontFamily
    $AddButton_Text_Label.FontFamily = $FontFamily
    $AddButton_ToolboxVersion.FontFamily = $FontFamily
    # Set TextBlocks FontFamily
    $GatherMenuTextblock.FontFamily = $FontFamily
    $InfoWSIDTextblock.FontFamily = $FontFamily
    $InfoIPTextblock.FontFamily = $FontFamily
    $InfoMAKETextblock.FontFamily = $FontFamily
    $InfoMODELTextblock.FontFamily = $FontFamily
    $InfoSERIALTextblock.FontFamily = $FontFamily
    $InfoCHASSISTextblock.FontFamily = $FontFamily
    $InfoMEMORYTextblock.FontFamily = $FontFamily
    $InfoOSTextblock.FontFamily = $FontFamily
    $InfoRELEASEIDTextblock.FontFamily = $FontFamily
    $InfoINSTALLTextblock.FontFamily = $FontFamily
    $InfoTZTextblock.FontFamily = $FontFamily
    $InfoDATETIMETextblock.FontFamily = $FontFamily
    $InfoUSERIDTextblock.FontFamily = $FontFamily
    $InfoFULLNAMETextblock.FontFamily = $FontFamily
    $InfoEMAILADDRESSTextblock.FontFamily = $FontFamily
    $InfoPHONETextblock.FontFamily = $FontFamily
    $InfoMOBILETextblock.FontFamily = $FontFamily
    $InfoMANAGERNAMETextblock.FontFamily = $FontFamily
    $InfoEMPLOYEETextblock.FontFamily = $FontFamily
    $InfoJOBTITLETextblock.FontFamily = $FontFamily
    $InfoLOCATIONTextblock.FontFamily = $FontFamily
    $InfoDEPTNAMETextblock.FontFamily = $FontFamily
    $InfoDIVISIONTextblock.FontFamily = $FontFamily
    $InfoBUSINESSLINETextblock.FontFamily = $FontFamily
    $InfoENTERPRISEROLETextblock.FontFamily = $FontFamily
    $MapUserTextblock.FontFamily = $FontFamily
    $MapTimeTextblock.FontFamily = $FontFamily
    $MapRoleTextblock.FontFamily = $FontFamily
    $MapServerTextblock.FontFamily = $FontFamily
    $AddButton_TitleTextblock.FontFamily = $FontFamily
    $AddButton_MainTextblock.FontFamily = $FontFamily
    $AddButton_Text_Textblock.FontFamily = $FontFamily
    # Set Buttons FontFamily
    $WSIDButton.FontFamily = $FontFamily
    $IPButton.FontFamily = $FontFamily
    $OSButton.FontFamily = $FontFamily
    $PWDEXPIRESButton.FontFamily = $FontFamily
    $USERIDButton.FontFamily = $FontFamily
    $UPTIMEButton.FontFamily = $FontFamily
    $MapScriptButton.FontFamily = $FontFamily
    }

Function SetBackground($Back) {
    $Main_Window.Background = $Back
    $Info_Window.Background = $Back
    $Map_Window.Background = $Back
    $Esc_Window.Background = $Back
    }

Function ResetThemes {
    # Reset Array of Theme Options
    $Script:Themes = @(
	    @{Theme="Main Default"; BackColor=$Backcolor; ForeColor=$TextColor; Background=$Background; Opacity=$Opacity; Index="0"}
	    @{Theme="Safe Default"; BackColor=$SafeBackcolor; ForeColor=$SafeTextColor; Background=""; Opacity=""; Index="1"}
	    @{Theme="BlackWhite"; BackColor="#FF2f2f2f"; ForeColor="#FFffffff"; Background=""; Opacity=""; Index="2"}
	    @{Theme="Blimey"; BackColor="#FF7ec24f"; ForeColor="#FFffffff"; Background=""; Opacity=""; Index="3"}
	    @{Theme="Blues"; BackColor="#FFadd5f5"; ForeColor="#FF285080"; Background=""; Opacity=""; Index="4"}
	    @{Theme="Clean"; BackColor="#FFffffff"; ForeColor="#FF00b9ff"; Background=""; Opacity=""; Index="5"}
	    @{Theme="ContrastUI"; BackColor="#FF182838"; ForeColor="#FFffffff"; Background=""; Opacity=""; Index="6"}
	    @{Theme="Darknow"; BackColor="#FF333333"; ForeColor="#FFe51b24"; Background=""; Opacity=""; Index="7"}
	    @{Theme="Rose"; BackColor="#FFcd5762"; ForeColor="#FFeeeeee"; Background=""; Opacity=""; Index="8"}
	    @{Theme="System"; BackColor="#FF485563"; ForeColor="#FF6ab7ef"; Background=""; Opacity=""; Index="9"}
	    @{Theme="Terminal"; BackColor="#FF222222"; ForeColor="#FF8ef03b"; Background=""; Opacity=""; Index="10"}
	    @{Theme="USB"; BackColor="#FF0c2074"; ForeColor="#FF67b2e8"; Background=""; Opacity=""; Index="11"}
        )
    # Add Reset Themes to ThemeComboBox
    $ThemeComboBox.Items.Clear()
    Foreach ($_ in $Themes) {$ThemeComboBox.Items.add($_.Theme) | Out-Null}
    # Add Reset Themes to ConfigMainThemeComboBox
    $ConfigMainThemeComboBox.Items.Clear()
    Foreach ($_ in $Themes) {$ConfigMainThemeComboBox.Items.add($_.Theme) | Out-Null}
    # Add Reset Themes to ConfigSafeThemeComboBox
    $ConfigSafeThemeComboBox.Items.Clear()
    Foreach ($_ in $Themes) {$ConfigSafeThemeComboBox.Items.add($_.Theme) | Out-Null}
    }

Function ChangeTheme {
    If ($Menu -eq "Start") {
        If ($Theme_Grid.Visibility -eq 'Hidden') {$Theme_Grid.Visibility = 'Visible'}
        Else {$Theme_Grid.Visibility = 'Hidden'}
        }
    If ($Menu -eq "Main") {
        If ($Theme_Grid.Visibility -eq 'Hidden') {
            $Title_Grid.Visibility = 'Hidden'
            $Theme_Grid.Visibility = 'Visible'
            }
        Else {
            $Theme_Grid.Visibility = 'Hidden'
            $Title_Grid.Visibility = 'Visible'
            }        
        }
    }
  
Function GetConfig {
    # Get Configuration from Config File
    If (Test-Path $ConfigFile) {
        $Script:Config = Import-Csv $ConfigFile
        $Script:Browser = $Config.Browser
        $Script:OpenLink =  $Config.OpenLink
        $Script:WindowStyle = $Config.WindowStyle
        $Script:TextColor = $Config.TextColor
        $Script:BackColor = $Config.BackColor
        $Script:SafeTextColor = $Config.SafeTextColor
        $Script:SafeBackColor = $Config.SafeBackColor
        $Script:MainTheme = $Config.MainTheme
        $Script:SafeTheme = $Config.SafeTheme
        $Script:SavedMainTheme = $Config.MainTheme
        $Script:SavedSafeTheme = $Config.SafeTheme
        $Script:Font = $Config.Font
        If ($Config.Background -ne $Null) {$Script:Background = $Config.Background} Else {$Script:Background = $Null}
        If ($Config.Opacity -ne $Null) {$Script:Opacity = $Config.Opacity} Else {$Script:Opacity = $Null}
        If ($Config.OnTop -ne $Null) {$Script:AlwaysOnTop = $Config.OnTop} Else {$Script:AlwaysOnTop = "Disabled"}
        }
    # Test Configuration Settings and Set to Default if they Fail
    Try {$Main_Window.Background = $BackColor}
    Catch {$Script:BackColor = "#FF00438F"}
    Try {$Main_Window.Background = $SafeBackColor}
    Catch {$Script:SafeBackColor = "#FF9B132D"}
    Try {$Script:WSIDButton.Foreground = $TextColor}
    Catch {$Script:TextColor = "#FFFFFFFF"}
    Try {$Script:WSIDButton.Foreground = $SafeTextColor}
    Catch {$Script:SafeTextColor = "#FFFFFFFF"}            
    Try {$Form_Main.WindowStyle = $WindowStyle}
    Catch {$Script:WindowStyle = "SingleBorderWindow"}
    Try {$Form_Info.WindowStyle = $WindowStyle}
    Catch {$Script:WindowStyle = "SingleBorderWindow"}
    Try {$Form_Map.WindowStyle = $WindowStyle}
    Catch {$Script:WindowStyle = "SingleBorderWindow"}                    
    Try {$Main_Window.WindowStyle = $WindowStyle}
    Catch {$Script:WindowStyle = "SingleBorderWindow"}
    Try {$StartMenuLabel1.FontFamily = $Font}
    Catch {$Script:Font = "Segoe UI"}
    Try {
        $Script:TestImage = New-Object System.Uri("$Background")
        $Script:TestImageSource = New-Object System.Windows.Media.Imaging.BitmapImage $TestImage
        $Script:TestImageBrush = New-Object System.Windows.Media.ImageBrush  $TestImageSource
        }
    Catch {$Script:Background = $Null}
    If (($TestImageBrush) -and ($Opacity)) {
        Try {$Script:TestImageBrush.Opacity = $Opacity}
        Catch {$Script:Opacity = $Null}        
        }
    Else {$Script:Opacity = $Null}
    ResetThemes
    }

Function SetWindowStyle {
    # Adjust Window Style and Size
    If (($Form_Main.WindowStyle -eq "None") -or ($Main_Window.WindowStyle -eq "None")) {
            $Form_Info.WindowStyle = "None"
            $Form_Map.WindowStyle = "None"
            $Form_Main.Height = "486"
            $Form_Info.Height = "818"
            $Form_Map.Height = "301"
            $Form_Main.Width = "487"
            $Form_Info.Width = "317"
            $Form_Map.Width = "487"
            $HelpButton.Margin="459,4,2,0"
            $ExitButton.Margin="474,2,2,0"
            $MinimizeButton.Margin="452,2,13,0"
            $ExitButton.Visibility = 'Visible'
            $InfoExitButton.Visibility = 'Visible'
            $MapExitButton.Visibility = 'Visible'
            $MinimizeButton.Visibility = 'Visible'
            }
    If (($Form_Main.WindowStyle -eq "ToolWindow") -or ($Main_Window.WindowStyle -eq "ToolWindow")) {
            $Form_Info.WindowStyle = "ToolWindow"
            $Form_Map.WindowStyle = "ToolWindow"
            $Form_Main.Height = "516"
            $Form_Info.Height = "845"
            $Form_Map.Height = "331"
            $Form_Main.Width = "493"
            $Form_Info.Width = "324"
            $Form_Map.Width = "493"
            $HelpButton.Margin = "474,4,2,0"
            $ExitButton.Margin = "475,2,2,0"
            $MinimizeButton.Margin = "464,2,13,0"
            $ExitButton.Visibility = 'Hidden'
            $InfoExitButton.Visibility = 'Hidden'
            $MapExitButton.Visibility = 'Hidden'
            $MinimizeButton.Visibility = 'Visible'
            }
    If (($Form_Main.WindowStyle -eq "SingleBorderWindow") -or ($Main_Window.WindowStyle -eq "SingleBorderWindow")) {
            $Form_Info.WindowStyle = "SingleBorderWindow"
            $Form_Map.WindowStyle = "SingleBorderWindow"
            $Form_Main.Height = "516"
            $Form_Info.Height = "848"
            $Form_Map.Height = "331"
            $Form_Main.Width = "493"
            $Form_Info.Width = "324"
            $Form_Map.Width = "493"
            $HelpButton.Margin = "476,4,2,0"
            $ExitButton.Margin = "475,2,2,0"
            $MinimizeButton.Margin = "465,2,13,0"
            $ExitButton.Visibility = 'Hidden'
            $InfoExitButton.Visibility = 'Hidden'
            $MapExitButton.Visibility = 'Hidden'
            $MinimizeButton.Visibility = 'Hidden'
            }
    If (($Form_Main.WindowStyle -eq "ThreeDBorderWindow") -or ($Main_Window.WindowStyle -eq "ThreeDBorderWindow")) {
            $Form_Info.WindowStyle = "ThreeDBorderWindow"
            $Form_Map.WindowStyle = "ThreeDBorderWindow"
            $ExitButton.Visibility = 'Hidden'
            $Form_Main.Height = "516"
            $Form_Info.Height = "848"
            $Form_Map.Height = "334"
            $Form_Main.Width = "498"
            $Form_Info.Width = "324"
            $Form_Map.Width = "498"
            $HelpButton.Margin = "474,4,2,0"
            $ExitButton.Margin = "475,2,2,0"
            $MinimizeButton.Margin = "465,2,13,0"
            $ExitButton.Visibility = 'Hidden'
            $InfoExitButton.Visibility = 'Hidden'
            $MapExitButton.Visibility = 'Hidden'
            $MinimizeButton.Visibility = 'Hidden'
            }    
    }

Function SaveConfig($Option) {
    # Convert Values to Array for Export
    $TempArray = New-Object PSObject
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'Browser' -Value $Browser
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'OpenLink' -Value $OpenLink
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'WindowStyle' -Value $WindowStyle
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'MainTheme' -Value $MainTheme
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeTheme' -Value $SafeTheme
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'Font' -Value $Font
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'OnTop' -Value $AlwaysOnTop
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'Background' -Value $Background
    Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'Opacity' -Value $Opacity
    If ($Option -eq "Full") {
        Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'TextColor' -Value $TextColor
        Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'BackColor' -Value $BackColor
        Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeTextColor' -Value $SafeTextColor
        Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeBackColor' -Value $SafeBackColor
        ResetThemes
        }
    If ($Option -eq "Main") {
        If (Test-Path $ConfigFile) {
            $Config = Import-Csv $ConfigFile
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'TextColor' -Value $TextColor
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'BackColor' -Value $BackColor
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeTextColor' -Value $Config.SafeTextColor
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeBackColor' -Value $Config.SafeBackColor
            ResetThemes
            }
        }
    If ($Option -eq "Safe") {
        If (Test-Path $ConfigFile) {
            $Config = Import-Csv $ConfigFile
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'TextColor' -Value $Config.TextColor
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'BackColor' -Value $Config.BackColor
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeTextColor' -Value $SafeTextColor
            Add-Member -InputObject $TempArray -MemberType NoteProperty -Name 'SafeBackColor' -Value $SafeBackColor
            ResetThemes
            }        
        }
    # Export Configuration Array to File
    $ConfigArray = @()
    $ConfigArray += $TempArray
    $ConfigArray | Export-Csv -Path $ConfigFile -NoTypeInformation -Force
    }

Function SetConfig {
    SetWindowStyle
    # Apply Font Settings
    SetFontFamily -FontFamily $Font
    # Apply Background Settings
    If ($Background) {
        $Script:Image = New-Object System.Uri("$Background")
        $Script:ImageSource = New-Object System.Windows.Media.Imaging.BitmapImage $Image 
        $Script:ImageBrush = New-Object System.Windows.Media.ImageBrush  $ImageSource
        $Script:ImageBrush.Stretch = "UniformToFill"
        $Script:ImageBrush.AlignmentY = "Top"
        $Script:ImageBrush.AlignmentX = "Center"
        If ($SafeMode -ne $True) {SetBackground -Back $ImageBrush}
        Else {SetBackground -Back $SafeBackColor}     
        }
    If (($Opacity) -and ($ImageBrush)) {
        $Script:ImageBrush.Opacity = $Opacity
        }
    If ($AlwaysOnTop -eq "Enabled") {
        $Form_Main.Topmost = $True
        $Form_Info.Topmost = $True
        $Form_Map.Topmost = $True
        $Form_Esc.Topmost = $True
        }
    Else {
        $Form_Main.Topmost = $False
        $Form_Info.Topmost = $False
        $Form_Map.Topmost = $False
        $Form_Esc.Topmost = $False
        }
    ResetThemes
    }

Function FirstConfig {
# Disable RunAs for Explorer.exe for use with opening C$ Shares
New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT -ErrorAction SilentlyContinue | Out-Null
If (Get-ItemProperty -Path "HKCR:\AppID\{CDCBCFCA-3CDC-436f-A4E2-0E02075250C2}" | Select-Object -ExpandProperty "_RunAs" -ErrorAction SilentlyContinue) {
$Definition = @"
    using System;
    using System.Runtime.InteropServices; 
    namespace Win32Api
        {
            public class NtDll
    	    {
    		    [DllImport("ntdll.dll", EntryPoint="RtlAdjustPrivilege")]
		        public static extern int RtlAdjustPrivilege(ulong Privilege, bool Enable, bool CurrentThread, ref bool Enabled);
	        }
        }
"@ #Do not indent this line
    Add-Type -TypeDefinition $definition -PassThru | Out-Null
 
    # Enable SeTakeOwnershipPrivilege
    $bEnabled = $False
    $res = [Win32Api.NtDll]::RtlAdjustPrivilege(9, $True, $False, [ref]$bEnabled)

    # Take Ownership
    $regKey = [Microsoft.Win32.Registry]::ClassesRoot.OpenSubKey("AppID\{CDCBCFCA-3CDC-436f-A4E2-0E02075250C2}", [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree,[System.Security.AccessControl.RegistryRights]::takeownership)
    $regACL = $regKey.GetAccessControl()
    $regACL.SetOwner([System.Security.Principal.NTAccount]"Administrators")
    $regKey.SetAccessControl($regACL)

    # Change Permissions
    $regRule = New-Object System.Security.AccessControl.RegistryAccessRule (".\Administrators","FullControl",@("ObjectInherit","ContainerInherit"),"None","Allow")
    $regACL = $regKey.GetAccessControl()
    $regACL.SetAccessRule($regRule)
    $regKey.SetAccessControl($regACL)
    Rename-ItemProperty -Path "HKCR:\AppID\{CDCBCFCA-3CDC-436f-A4E2-0E02075250C2}" -Name _RunAs -NewName RunAs -ErrorAction SilentlyContinue
        }
    Remove-PSDrive -Name HKCR -ErrorAction SilentlyContinue    
    }

Function ResetCheckMarks {
    $MainForeCheckLabel.Foreground = "Green"
    $MainBackCheckLabel.Foreground = "Green"
    $SafeForeCheckLabel.Foreground = "Green"
    $SafeBackCheckLabel.Foreground = "Green"
    $SafeBackGroundCheckLabel.Foreground = "Green"
    $SafeOpactiyCheckLabel.Foreground = "Green"
    $MainForeCheckLabel.Content = "$([char]0xFC)"
    $MainBackCheckLabel.Content = "$([char]0xFC)"
    $SafeForeCheckLabel.Content = "$([char]0xFC)"
    $SafeBackCheckLabel.Content = "$([char]0xFC)"
    $SafeBackGroundCheckLabel.Content = "$([char]0xFC)"
    $SafeOpactiyCheckLabel.Content = "$([char]0xFC)"
    $MainForeCheckLabel.Visibility = 'Hidden'
    $MainBackCheckLabel.Visibility = 'Hidden'
    $SafeForeCheckLabel.Visibility = 'Hidden'
    $SafeBackCheckLabel.Visibility = 'Hidden'
    $SafeBackGroundCheckLabel.Visibility = 'Hidden'
    $SafeOpactiyCheckLabel.Visibility = 'Hidden'    
    }

Function ShowCheckMarks {
    $MainForeCheckLabel.Visibility = 'Visible'
    $MainBackCheckLabel.Visibility = 'Visible'
    $SafeForeCheckLabel.Visibility = 'Visible'
    $SafeBackCheckLabel.Visibility = 'Visible'
    $SafeBackGroundCheckLabel.Visibility = 'Visible'
    $SafeOpactiyCheckLabel.Visibility = 'Visible'    
    }

Function StartMenu {
    # Update Clipboard
    UpdateClipboard
    # Clear Garbage Collection
    [System.GC]::Collect()
    # Set Menu
    $Script:Menu = "Start"
    # Reset Cursor to Arrow
    $Form_Main.Cursor = 'Arrow'
    # Clear ComputerName
    $Script:ComputerName = $Null
    # Clear WSIDEnterComboBox Text
    $WSIDEnterComboBox.Text = $Null
    # Ensure WSIDEnterComboBox is editable
    $WSIDEnterComboBox.IsEditable = $True
    $WSIDEnterComboBox.IsReadOnly = $False 
    # Clear Variables
    $Script:WMI = $Null
    $Script:BIOS = $Null
    $Script:OS = $Null
    $Script:ENCLOSURE = $Null
    $Script:USERAD = $Null
    $Script:MANAGERAD = $Null
    $Script:IPAddress = $Null
    $Script:UserID = $Null
    $Script:SID = $Null
    $Script:WSID = $Null
    $Script:Model = $Null
    $Script:Mobile = $Null
    $Script:Serial = $Null
    $Script:Memory = $Null
    $Script:OSVersion = $Null
    $Script:LastBootTime = $Null
    $Script:UPTime = $Null
    $Script:FullName = $Null
    $Script:EmailAddress = $Null
    $Script:PhoneNumber = $Null
    $Script:ManagerName = $Null
    $Script:DeptName = $Null
    $Script:JobTitle = $Null
    $Script:Location = $Null
    $Script:Division = $Null
    $Script:BusinessLine = $Null
    $Script:EnterpriseRole = $Null
    $Script:JobFamily = $Null
    $Script:Employee = $Null
    $Script:ManagerUserID = $Null
    $Script:ManagerName = $Null
    $Script:ManagerEmail = $Null
    $Script:InputUserID = $Null
    $Script:Verified = 'No'
    $Script:Username = $Null
    $Script:EnterpriseRole = $Null
    $Script:LogonServer = $Null
    $Script:LogonScript = $Null
    $Script:MapTimeStamp = $Null
    $Script:SiteCodeCheck = $Null
    $Script:Dock = $Null
    $Script:FixList.Clear()
    # Reset MapMenu Items
    $Script:MapDrivesTextbox.Clear()
    $Script:MapList.Clear()
    $Script:LogonInfo = $Null
    # Reset User Picture
    $UserPicture.Source = $Null
    # Disable SafeMode
    $Script:SafeMode = $False
    # Reset Text Colors
    SetTextColor -Color $TextColor
    # Reset Form Titles
    $Form_Main.Title = "Agent Toolbox"
    # Reset Label Texts
    $StartMenuLabel2.Content = "Enter WSID/IP/USERID and Click Search"
    $MainMenuLabel.ToolTip = "Double Left-Click to Toggle Configuration options"
    $MapStartLabel.Content = "Please Connect to a WSID with a User Present"
    $InfoStartLabel.Content = "Please Connect to a WSID"
    # Enable Enter Button for Start
    $StartButton.IsDefault = 'True'
    # Disble Default on Search Buttons
    $MainGoButton.IsDefault = $False
    $MainSearchButton.IsDefault = $False
    # Set ThemeComboBox to Current Theme
    Foreach ($_ in $Themes) {
        If (($_.Theme -eq $MainTheme) -and ($SafeMode -eq $False)) {$ThemeComboBox.SelectedIndex = $_.Index}
        If (($_.Theme -eq $SafeTheme) -and ($SafeMode -eq $True)) {$ThemeComboBox.SelectedIndex = $_.Index}
        }
    # Set Background Image
    If (($Background) -and ($ImageBrush) -and ($ThemeComboBox.SelectedIndex -eq 0)) {SetBackground -Back $ImageBrush}
    Else {SetBackground -Back $BackColor}
    # Make all Elements of StartMenu Visable
    $Info_Start.Visibility = 'Visible'
    $Info_List.Visibility = 'Hidden'
    $Map_Start.Visibility = 'Visible'
    $Map_Info.Visibility = 'Hidden'
    $Test_Grid.Visibility = 'Hidden'
    $Restart_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Hidden'
    $SNIssue_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $Start_Grid.Visibility = 'Visible'
    <# Set Elements of Workstation Info Window
    $Info_Advanced.Visibility = 'Hidden'
    $Info_General.Visibility = 'Visible'
    $InfoSwitchButton.Content = "Advanced"#>
    # Focus on Main Search Combo Box
    $WSIDEnterComboBox.Focus() | Out-Null
    If ($UpdateSwitch -eq $True) {updatetoolbox}
    If ($EMSMode -eq $True) {If (!(Get-Process -Name "Agent Toolbox EMS" -ErrorAction SilentlyContinue -WarningAction SilentlyContinue)) {Start-Process -FilePath "$CurrentDir\Agent Toolbox EMS.exe" -WindowStyle Hidden}}
    }

Function InfoMenu {
    # Set Form Style and Background to Match MainMenu
    $Script:Form_Info.WindowStyle = $Form_Main.WindowStyle
    # Show InfoMenu
    $Form_Info.Show() | Out-Null
    }

Function MapMenu($Searchuser) {
    If ((!$MapList) -or ($MapList.Count -eq 0)) {
        If ($Searchuser) {
            # Reset LogonInfo
            $Script:LogonFile = $Null
            $Script:LogonInfo = $Null
            # Gather Logon Info
            If ($DriveMapping -eq $True) {
                If (Test-Path "X:\$Searchuser") {$Script:LogonFile = (Get-ChildItem -Path "X:\$Searchuser" -ErrorAction SilentlyContinue | Sort LastWriteTime -Descending | Select-Object -First 1).Fullname}
                }
            ElseIf (Test-Path "\\YOURFILEPATH") {(Get-ChildItem -Path "\\YOURFILEPATH\$Searchuser" -ErrorAction SilentlyContinue | Sort LastWriteTime -Descending | Select-Object -First 1).Fullname}
            If ($LogonFile) {$Script:LogonInfo = Get-Content -Path $LogonFile -ErrorAction SilentlyContinue}
            If ($LogonInfo) {
                $Script:MapDrivesTextbox.Clear()
                $Script:MapList.Clear()
                $Script:LogonScript = (((($LogonInfo | Select-String 'User Site:' -ErrorAction SilentlyContinue).ToString()).replace("User Site: ","")).Split("-",2)[1]).Trim()
                If (!$ComputerName) {$Script:ComputerName = (($LogonInfo | Select-String 'Workstation:' -ErrorAction SilentlyContinue).ToString()).replace("  Workstation: ","")}
                $Script:LogonServer = (($LogonInfo | Select-String 'Logon Server: \\' -ErrorAction SilentlyContinue).ToString()).replace("  Logon Server: \\","")
                $Script:Username = (($LogonInfo | Select-String 'User:' -ErrorAction SilentlyContinue).ToString()).replace("  User: ","")
                $Script:EnterpriseRole = (((($LogonInfo | Select-String 'User Enterprise Role:' -ErrorAction SilentlyContinue).ToString()).replace("User Enterprise Role: ","")).Split("-",2)[1]).Trim()
                $Script:MapTimeStamp = (($LogonInfo | Select-String 'Start Time:' -ErrorAction SilentlyContinue).ToString()).replace("  Start Time: ","")
                Foreach ($_ in $LogonInfo) {
                    If ($_ -like "*Drive Mapping Succeeded, *") {
                        $Script:MapList.Add(((($_.Split(" - ",5)[4]).ToString()).replace(" Drive Mapping Succeeded, ","")).replace(",",":")) | Out-Null
                        }
                    }
                If (!$MapList) {$Script:MapList.Add("None")}
                # Set All TextBox to Values
                If ($Username) {$Script:MapUserTextblock.Text = "User: $Username"} Else {$Script:MapUserTextblock.Text = "User: Absent"}
                If ($EnterpriseRole) {$Script:MapRoleTextblock.Text = "Role: $EnterpriseRole"} Else {$Script:MapRoleTextblock.Text = "Role: Absent"}
                If ($LogonServer) {$Script:MapServerTextblock.Text = "Server: $LogonServer"} Else {$Script:MapServerTextblock.Text = "Server: Absent"}
                If ($LogonScript) {$Script:MapScriptButton.Content = "Site Code: $LogonScript"} Else {$Script:MapScriptButton.Content = "Site Code: Absent"}
                If ($MapTimeStamp) {$Script:MapTimeTextblock.Text = "Timestamp: $MapTimeStamp"} Else {$Script:MapTimeTextblock.Text = "Timestamp: Absent"}
                $Script:MapDrivesTextbox.Clear()
                If ($MapList) {Foreach ($_ in $MapList) {$Script:MapDrivesTextbox.AppendText($_ + "`r`n")}}
                If (!$ComputerName) {[System.Windows.MessageBox]::Show("Unable to find Computer Name in logon records for $Searchuser.`n`nPlease check your entry and try again.",'No Records Found','OK','Error') | Out-Null}
                return
                }
            Else {
                [System.Windows.MessageBox]::Show("Unable to find logon records for $Searchuser.`n`nPress OK to close this message.",'Cannot Find User','OK','Error') | Out-Null
                return
                }
            }
        }
    }

Function MainMenu {
    # Update Cliboard
    UpdateClipboard
    # Set Menu
    $Script:Menu = "Main"
    # Reset Cursor to Arrow
    $Form_Main.Cursor = 'Arrow'
    # Disble Default on Search Buttons
    $MainGoButton.IsDefault = $False
    $MainSearchButton.IsDefault = $False
    # Show Elements based on Mode
    #If (($SafeMode -eq $False) -and ($ComputerName)) {
    If ($SafeMode -eq $False) {
        # Set Labels to Values
        If (($WSID) -and ($WSID -ne "Error")) {
            $Form_Main.Title = "Agent Toolbox: $WSID"
            $Script:WSIDButton.Content = "WSID: $WSID"
            $Script:WSIDButton.Foreground = $TextColor
            }
        Else {
            $Form_Main.Title = "Agent Toolbox: $ComputerName"
            $Script:WSIDButton.Content = "WSID: $ComputerName"
            $Script:WSIDButton.Foreground = "Red"
            }
        If (($OSVersion) -and ($OSVersion -ne "Error")) {
            $Script:OSButton.Content = "OS: $OSVersion"
            $Script:OSButton.Foreground = $TextColor
            }
        Else {
            $Script:OSButton.Content = "OS: $OSVersion"
            $Script:OSButton.Foreground = "Red"
            }
        If (($UserID -ne "Error") -and ($UserID -ne "No User Found")) {
            $Form_Main.Title = $Form_Main.Title + " / $($USERID.ToUpper())"
            $Script:USERIDButton.Content = "USERID: $UserID"
            $Script:USERIDButton.Foreground = $TextColor
            }
        Else {
            $Form_Main.Title = $Form_Main.Title + " / NO USER"
            $Script:USERIDButton.Content = "USERID: $UserID"
            $Script:USERIDButton.Foreground = "Red"
            }
        If (($UPTime) -and ($UPTime -ne "Error")) {
            $Script:UPTIMEButton.Content = "UPTIME: $UPTime"
            }
        Else {
            $Script:UPTIMEButton.Content = "UPTIME: $UPTime"
            $Script:UPTIMEButton.Foreground = "Red"
            }
        If (($IPAddress) -and ($IPAddress -ne "Error")) {
            $Script:IPButton.Content = "IP: $IPAddress"
            $Script:IPButton.Foreground = $TextColor
            }
        Else {
            $Script:IPButton.Content = "IP: $IPAddress"
            $Script:IPButton.Foreground = "Red"
            }
        If (($PwdExpires) -and ($PwdExpires -ne "Error") -and ($PwdExpires -notlike "*LOCKED*")) {
            $Script:PWDEXPIRESButton.Content = "PWD: $PwdExpires"
            #$Script:PWDEXPIRESButton.Foreground = $TextColor
            }
        Else {
            $Script:PWDEXPIRESButton.Content = "PWD: $PwdExpires"
            #$Script:PWDEXPIRESButton.Foreground = "Red"
            }
        }
    Else {
        $Script:SafeMode = $True
        $Form_Main.Title = "Agent Toolbox: Safe Mode"
        $WSIDButton.Content = "WSID: Absent"
        $OSButton.Content = "OS: Absent"
        $USERIDButton.Content = "USERID: Absent"
        $UPTIMEButton.Content = "UPTIME: Absent"
        $IPButton.Content = "IP: Absent"
        $PWDEXPIRESButton.Content = "PWD: Absent"
        SetTextColor -Color $SafeTextColor
        }
    # Reset MainMenuLabel Tooltip
    $MainMenuLabel.ToolTip = "Double Left-Click to Toggle Configuration options"
    # Set ThemeComboBox to Current Theme
    Foreach ($_ in $Themes) {
        If (($_.Theme -eq $MainTheme) -and ($SafeMode -eq $False)) {$ThemeComboBox.SelectedIndex = $_.Index}
        If (($_.Theme -eq $SafeTheme) -and ($SafeMode -eq $True)) {$ThemeComboBox.SelectedIndex = $_.Index}
        }
    # Set MainSearchComboBox for first time use
    $MainSearchComboBox.Items.Clear()
    $SortedMatrix.Clear()
    $MainSearchComboBox.Text = $Null
    Foreach ($_ in $Matrix) {$SortedMatrix.Add($_.Name) | Out-Null}
    $SortedMatrix.Sort()
    Foreach ($_ in $SortedMatrix) {$MainSearchComboBox.Items.Add($_) | Out-Null}            
    # Set Background Image
    If ($SafeMode -ne $True) {
        If (($Background) -and ($ImageBrush) -and ($ThemeComboBox.SelectedIndex -eq 0)) {SetBackground -Back $ImageBrush}
        Else {SetBackground -Back $BackColor}
        }
    Else {SetBackground -Back $SafeBackColor}
    # Hide KB Labels
    $KBLabel1.Visibility = 'Hidden'
    $KBLabel2.Visibility = 'Hidden'         
    # Make all Elements of MainMenu Visable
    $Start_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $SNIssue_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Visible'
    $Main_Grid.Visibility = 'Visible'
    # MLO Warning
    If (($EnterpriseRole) -and ($USERID)) {If ($EnterpriseRole -like "*YOURROLE*") {[System.Windows.MessageBox]::Show("Note: $USERID IS a YOURSPECIALUSERTYPE!`n`nPlease send any escalations to YOURESCALTIONGROUP.`n`nPress OK to continue.",'YOURSPECIALUSERTYPE Check','OK','Error') | Out-Null}}
    # SCCM Provisioning Mode Fix Warning Message
    If ($InfoCCMMODETextblock.Text -like "*Reset*") {[System.Windows.MessageBox]::Show("The Agent Toolbox corrected the SCCM Provisioning state of Enabled on Workstation: $ComputerName.`n`nPlease notate this in your Interaction.`n`n(Note: SCCM Provisioning should always be Disabled)",'SCCM Provisioning Enabled Fix','OK','Warning') | Out-Null}
    $MainSearchComboBox.Focus() | Out-Null
    }

Function ConfigMenu($LastMenu) {
    # Set Return
    $Script:ReturnMenu = $LastMenu
    # Set Menu
    $Script:Menu = "Config"
    # Set Comboboxes to current configuration
    Foreach ($Theme in $Themes) {
        If ($Theme.Theme -eq $SavedMainTheme) {
            $ConfigMainThemeComboBox.SelectedIndex = $Theme.Index
            $ConfigMainForeTextBox.Text = $Theme.ForeColor
            $ConfigMainBackTextBox.Text = $Theme.BackColor
            $ConfigBackgroundTextBox.Text = $Theme.Background
            If (($Theme.Opacity -ne "") -and ($Theme.Opacity -ne 0) -and ($Theme.Opacity -ne $Null) -and ($Theme.Opacity -ne "0")) {$ConfigOpacityTextBox.Text = [int]([decimal]$($Theme.Opacity) * 100)} 
            Else {$ConfigOpacityTextBox.Text = ""}
            If ($SafeMode -ne $True) {
                SetBackground -Back $Theme.BackColor
                SetTextColor -Color $Theme.ForeColor
                SetBorderBrush -Color $Theme.ForeColor
                }
            }
        }
    Foreach ($Theme in $Themes) {
        If ($Theme.Theme -eq $SavedSafeTheme) {
            $ConfigSafeThemeComboBox.SelectedIndex = $Theme.Index
            $ConfigSafeForeTextBox.Text = $Theme.ForeColor
            $ConfigSafeBackTextBox.Text = $Theme.BackColor
            If ($SafeMode -eq $True) {
                SetBackground -Back $Theme.BackColor
                SetTextColor -Color $Theme.ForeColor
                SetBorderBrush -Color $Theme.ForeColor
                }
            }
        }
    Foreach ($_ in $WindowStyleList) {If ($_.Name -eq $WindowStyle) {$ConfigWindowComboBox.SelectedIndex = $_.Index}}
    Foreach ($_ in $OpenLinkList) {If ($_.Type -eq $OpenLink) {$ConfigTabComboBox.SelectedIndex = $_.Index}}
    Foreach ($_ in $FontList) {If ($_ -eq $Font) {$ConfigFontComboBox.SelectedIndex = $FontList.IndexOf($_)}}
    Foreach ($_ in $BrowserOptions) {If ($_.Path -like "*$Browser*") {$ConfigBrowserComboBox.SelectedIndex = $_.Index}}
    Foreach ($_ in $EnabledOptions) {If ($_.Name -like "*$AlwaysOnTop*") {$ConfigOnTopComboBox.SelectedIndex = $_.Index}}
    # Set Background Image
    If (($Background) -and ($ImageBrush) -and ($SafeMode -ne $True) -and ($ConfigMainThemeComboBox.SelectedIndex -eq 0)) {SetBackground -Back $ImageBrush}
    # Make all Elements of ConfigMenu Visable
    $Test_Grid.Visibility = 'Hidden'
    $Start_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Visible'
    $Config_Grid.Visibility = 'Visible'
    # Clear MainMenuLabel Tooltip
    $MainMenuLabel.ToolTip = $Null
    # Enable Save Config
    $ConfigConfirmButton.IsEnabled = $True
    }

Function SNIssueMenu {
    # Reset Margins
    $SNIssueButton.Margin = "180,252,0,0"
    $SNIssueCancelButton.Margin = "218,287,0,0"
    # Reset Combobox
    $SNIssueComboBox.SelectedIndex = 0
    # Hide Textbox until Needed
    $SNIssueTextbox.Visibility = 'Hidden'
    # Reset Textbox
    $SNIssueTextbox.Text = ""
    # Set Cancel
    $SNIssueCancelButton.IsCancel = $True
    # Make all Elements of SNIssueMenu Visable
    $Test_Grid.Visibility = 'Hidden'
    $Restart_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $Start_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Visible'
    $SNIssue_Grid.Visibility = 'Visible'
    # Focus on Combo Box
    $SNIssueComboBox.Focus() | Out-Null
    }

Function EditButtonMenu($Button) {
    # Set EditButton
    $Script:EditButtonName = ($ClipBoardGrid.Children | Where-Object {$_.Content -eq "$($Button.Content)"}).Content
    # Update Cliboard
    UpdateClipboard
    # Set Position Combobox
    $EditButton_Position_ComboBox.Items.Clear()
    Foreach ($_ in ($ClipBoardGrid.Children | Where-Object {$_.Name -notlike "*Clipboard*"} | Select -Unique)) {$EditButton_Position_ComboBox.Items.add($_.Content) | Out-Null}
    $EditButton_Position_ComboBox.SelectedIndex = [int]$EditButton_Position_ComboBox.Items.IndexOf("$($Button.Content)") -1
    # Set Text Boxes
    $EditButton_Name_Textbox.Text = $Button.Content
    $EditButton_TextColor_ComboBox.Text = $Button.Foreground
    $EditButton_BackColor_ComboBox.Text = $Button.Background
    $EditButton_Text_Textbox.Text = $Button.ToolTip
    # Show/Hide Grids
    $Start_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $SNIssue_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Visible'
    $EditButton_Grid.Visibility = 'Visible'
    }

Function GatherInfo {
    # Set Menu to Gathering Info
    $Script:Menu = "GatherInfo"
    # Set Cursor to Waiting
    $Form_Main.Cursor = 'AppStarting'
    # Make all Elements of GatherInfo Visable
    $Test_Grid.Visibility = 'Hidden'
    $Start_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $SNIssue_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Visible'
    $Map_Start.Visibility = 'Visible'
    $Map_Info.Visibility = 'Hidden'
    $Info_Start.Visibility = 'Visible'
    $Info_List.Visibility = 'Hidden'
    $CancelButton.Visibility = 'Visible'
    # Change Labels to Show Gathering System Info
    $Script:GatherMenuTextblock.Text = "Clearing Previous Data..."
    $MapStartLabel.Content = "Clearing Previous Data..."
    $InfoStartLabel.Content = "Clearing Previous Data..."
    $Form_Main.Dispatcher.Invoke([action]{$GatherMenuTextblock},"Render")
    $Form_Info.Dispatcher.Invoke([action]{$InfoStartLabel},"Render")
    $Form_Map.Dispatcher.Invoke([action]{$MapStartLabel},"Render")
    [System.Windows.Forms.Application]::DoEvents()
    # Remove all jobs
    Get-Job -ErrorAction SilentlyContinue | Remove-Job -ErrorAction SilentlyContinue -Force | Out-Null
    # Remove All Sessions to Remote Computers
    Get-PSSession -ErrorAction SilentlyContinue | Remove-PSSession -ErrorAction SilentlyContinue
    # Clear Trusted Hosts
    Clear-Item WSMan:\localhost\Client\TrustedHosts -Force -ErrorAction SilentlyContinue
    # Reset Cancel Switch
    $Script:CancelActions = $False
    # Reset Trust Switch
    $Trust = $True
    # Reset Session
    $Session = $Null
    # Change Labels to Show Gathering System Info
    If ($WSID) {$Script:GatherMenuTextblock.Text = "Attempting Connection to $WSID..."}
    Else {$Script:GatherMenuTextblock.Text = "Attempting Connection to $ComputerName..."}
    $MapStartLabel.Content = "Gathering Mapping information"
    $InfoStartLabel.Content = "Gathering System info" 
    $Form_Main.Dispatcher.Invoke([action]{$GatherMenuTextblock},"Render")
    $Form_Info.Dispatcher.Invoke([action]{$InfoStartLabel},"Render")
    $Form_Map.Dispatcher.Invoke([action]{$MapStartLabel},"Render")
    [System.Windows.Forms.Application]::DoEvents()
    # Add Remote Computer to Trusted Hosts
    Try {Set-Item WSMan:\localhost\Client\TrustedHosts -Value $ComputerName -ErrorAction Stop -Force}
    Catch {$Trust = $False}
    If ($Trust -eq $True) {
        Try {$Session = New-PSSession -ComputerName $ComputerName -Authentication Negotiate -ErrorAction Stop}
        Catch {$Session = $Null}
        }
    Else {
        If ((Test-Connection -Count 1 -Quiet -ComputerName $ComputerName -ErrorAction SilentlyContinue) -eq $True) {
            [System.Windows.MessageBox]::Show("Cannot add $ComputerName to Trusted Hosts.`n`nPlease confirm that the correct Computer Name or IP Address was entered. If so, please ensure the Agent Toolbox was opened with a Service ID account with Domain Admin Privledges.`n`nPress OK to Search again.",'Permissions Issue','OK','Error') | Out-Null
            StartMenu
            Return
            }
        Else {
            [System.Windows.MessageBox]::Show("Cannot find $ComputerName on the Network using DNS.`n`nPlease try using the IP Address if you used the Computer Name and check to make sure the unit is pingable.`n`nHave the user do an ipconfig /flushdns followed by a release/renew.`n`nPress OK to Search again.",'Network DNS Issue','OK','Error') | Out-Null
            StartMenu
            Return
            }
        }
    If ($Session) {
        # Change Labels to Show Gathering System Info
        If ($WSID) {$Script:GatherMenuTextblock.Text = "Gathering System info from $WSID..."}
        Else {$Script:GatherMenuTextblock.Text = "Gathering System info from $ComputerName..."}
        $Form_Main.Dispatcher.Invoke([action]{$GatherMenuTextblock},"Render")
        [System.Windows.Forms.Application]::DoEvents()     
        # Connect to Session and Obtain WMI information
        Invoke-Command -Session $Session -AsJob -JobName "DataRequest" -ScriptBlock {
            # Set progresspreference
	        $progresspreference = 'SilentlyContinue'
            # Set Variables
            $provisioningModeReset = $False
            # Gather Info From WMI
            $WMIERROR = $Null
            Try {[wmi]$os = Get-WmiObject -Class win32_operatingsystem -ErrorAction Stop}
            Catch {$WMIERROR = $($_.Exception.Message)}
            If ($WMIERROR -eq $Null) {
                If (((Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\CCM\CcmExec').ProvisioningMode) -eq $True) {
                    Invoke-WmiMethod -Namespace root\CCM -Class SMS_Client -Name SetClientProvisioningMode -ArgumentList $False -ErrorAction SilentlyContinue | Out-Null
                    $CcmExecCheck = $Null
                    #While ($CcmExecCheck -ne 'Running') {$CcmExecCheck = "$(Get-Service -Name CcmExec | %{$_.status})"}
                    $datetime = Get-Date -Format "yyyy/MM/dd HH:mm:ss"
                    If (!(Test-Path "c:\Logs")) {New-Item -Path "c:\Logs" -ItemType directory -Force | Out-Null}
                    $Script:LogFile = "c:\Logs\SCCM_Provisioning_Fix_History.log"
                    $LogWriter = New-Object System.IO.StreamWriter $LogFile, $True
                    $LogWriter.WriteLine("$datetime,Agent Toolbox Disabled SCCM Provisioning")
                    $LogWriter.Close()
                    $Script:provisioningModeReset = $True
                    }                
                # Set Remote Registry
                Set-Service -Name RemoteRegistry -StartupType Automatic -ErrorAction SilentlyContinue
                Get-Service -Name RemoteRegistry -ErrorAction SilentlyContinue | Set-Service -Status Running -ErrorAction SilentlyContinue
                # Apply DNS Fix
                If ($os.Caption -like "*10*") {New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters" -Name "smbservernamehardeninglevel" -PropertyType "DWord" -Value '0' -ErrorAction Stop -Force | Out-Null}
                # Gather WMI Info
                [wmi]$cs = Get-WmiObject -Class win32_computersystem
                [wmi]$bios = Get-WmiObject -Class Win32_BIOS
                [wmi]$se = Get-WmiObject -Class Win32_SystemEnclosure
                [wmi]$tz = Get-WmiObject -Class Win32_TimeZone
                [wmi]$cpu = Get-WmiObject -Class Win32_Processor
                If ($($cs.Username).Length -gt 0) {$Username = (($cs.Username).split('\')[1])} Else {$Username = $Null}
                # Gather Dock Info from PnP
                $Dock = (Get-PnpDevice | Where {($_.Class -eq "USBDevice") -and ($_.FriendlyName -like "*dock*")} | Select-Object -First 1).FriendlyName
                # Gather Release ID From Registry
                $ReleaseID = (Get-ItemProperty -Path ‘HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion’).ReleaseId
                # Gather Network Adapter Information
                $NetworkInterface = [System.Net.NetworkInformation.NetworkInterface]::GetAllNetworkInterfaces() | Where {$_.NetworkInterfaceType -ne "Loopback" -and $_.NetworkInterfaceType -ne "Tunnel" -and $_.OperationalStatus -eq "Up"}
                $NetAdapaters = @()
                Foreach ($_ in $NetworkInterface) {
                    $IpInfo = ($_.GetIPProperties().UnicastAddresses.Address.IPAddressToString) | Where {$_ -notlike "*:*"}
                    $MACAddress = ($_.GetPhysicalAddress()) -replace '(..(?!$))','$1:'
                    $TempArray = New-Object -TypeName PSObject
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'IPAddress' -Value $IpInfo
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'MACAddress' -Value $MACAddress
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'NetworkInterfaceType' -Value ($_.NetworkInterfaceType).Value
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'Description' -Value $_.Description
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'OperationalStatus' -Value $_.OperationalStatus
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'Name' -Value $_.Name
                    $NetAdapaters += $TempArray
                    }
                $NetAdapaters = $NetAdapaters | Sort-Object IPAddress | Sort-Object OperationalStatus
                # Gather Service Info
                [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                $RequiredClientVersion = (New-object System.Net.WebClient).DownloadString("https://YOURSIGFILE")
                $CcmClientVersion = (Get-WmiObject -Namespace root\ccm -Class SMS_Client -ErrorAction SilentlyContinue).ClientVersion
                $CcmExecStatus = "$(Get-Service -Name CcmExec | %{$_.status})"
	            $BITSStatus = "$(Get-Service -Name BITS | %{$_.status})"
	            $wuauservStatus = "$(Get-Service -Name wuauserv | %{$_.status})"
                $wuauservStartup = Test-Path -Path 'HKLM:\SYSTEM\CurrentControlSet\Services\wuauserv\TriggerInfo\' -ErrorAction SilentlyContinue
	            $WinmgmtStatus = "$(Get-Service -Name Winmgmt | %{$_.status})"
	            $RRegistryStatus = "$(Get-Service -Name RemoteRegistry | %{$_.status})"               
                # Gather SCCM Information
                $ccmClientVersion = (Get-WmiObject -Namespace root\ccm -Class SMS_Client -ErrorAction SilentlyContinue).ClientVersion
                If (Test-Path -Path "c:\windows\ccmsetup\logs\ccmsetup.log") {$ccmSetupEnd = Get-Content "c:\windows\ccmsetup\logs\ccmsetup.log" | select -last 1}
                Else {$ccmSetupEnd = "File Not Found"}
                If (($ccmSetupEnd -match "return code") -or ($ccmSetupEnd -match "error code")) {$ccmSetupCheck = (($ccmSetupEnd -split 'LOG',3)[1] -replace '[][]','') -split ' ' | select -last 1}
                Else {$ccmSetupCheck = ($ccmSetupEnd -split 'LOG',3)[1] -replace '[][]',''}
                If (($ccmSetupCheck -like "*0*") -or ($ccmSetupCheck -like "*7*")) {$ccmSetupStatus = "Successful"} 
                ElseIf ($ccmSetupCheck  -match '[a-zA-Z]') {$ccmSetupStatus = "Error Detected"}
                Else {$ccmSetupStatus = "Error Code: $ccmSetupCheck"}
                If (Test-Path -Path "c:\windows\ccm\logs\StateMessage.log") {$StateMessage = Get-Content("c:\windows\ccm\logs\StateMessage.log")}
                Else {$StateMessage = "File Not Found"}
                If ($StateMessage -match 'Successfully forwarded State Messages to the MP') {$ccmStateMessage = "Successful"}
                Else {$ccmStateMessage = "Error Detected"}
                If (Test-Path -Path 'HKLM:\SOFTWARE\Microsoft\CCM\CcmExec') {$provisioningMode = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\CCM\CcmExec').ProvisioningMode}
                Else {$provisioningMode = "Regkey Not Found"}
                If (($provisioningMode -eq $False) -and ($provisioningModeReset -eq $True)) {$ccmprovisioningMode = "Reset"}
                ElseIf ($provisioningMode -eq $True) {$ccmprovisioningMode = "Enabled"}
                Else {$ccmprovisioningMode = "Disabled"}
                # Convert ChassisType Number to Text
                If ($se.Chassistypes -eq '3'){$Script:Chassis = "Desktop"}  
                ElseIf ($se.Chassistypes -eq '4'){$Script:Chassis = "Low Profile Desktop"}  
                ElseIf ($se.Chassistypes -eq '5'){$Script:Chassis = "Pizza Box"}  
                ElseIf ($se.Chassistypes -eq '6'){$Script:Chassis = "Mini Tower"}  
                ElseIf ($se.Chassistypes -eq '7'){$Script:Chassis = "Tower"}  
                ElseIf ($se.Chassistypes -eq '8'){$Script:Chassis = "Portable"}  
                ElseIf ($se.Chassistypes -eq '9'){$Script:Chassis = "Laptop"}  
                ElseIf ($se.Chassistypes -eq '10'){$Script:Chassis = "Notebook"}  
                ElseIf ($se.Chassistypes -eq '11'){$Script:Chassis = "Hand Held"}  
                ElseIf ($se.Chassistypes -eq '12'){$Script:Chassis = "Docking Station"}  
                ElseIf ($se.Chassistypes -eq '13'){$Script:Chassis = "All in One"}  
                ElseIf ($se.Chassistypes -eq '14'){$Script:Chassis = "Sub Notebook"}  
                ElseIf ($se.Chassistypes -eq '15'){$Script:Chassis = "Space-Saving"}   
                ElseIf ($se.Chassistypes -eq '16'){$Script:Chassis = "Lunch Box"}  
                ElseIf ($se.Chassistypes -eq '17'){$Script:Chassis = "Main System Chassis"}  
                ElseIf ($se.Chassistypes -eq '18'){$Script:Chassis = "Expansion Chassis"}  
                ElseIf ($se.Chassistypes -eq '19'){$Script:Chassis = "Sub Chassis"}  
                ElseIf ($se.Chassistypes -eq '20'){$Script:Chassis = "Bus Expansion Chassis"}  
                ElseIf ($se.Chassistypes -eq '21'){$Script:Chassis = "Peripheral Chassis"}  
                ElseIf ($se.Chassistypes -eq '22'){$Script:Chassis = "Storage Chassis"}  
                ElseIf ($se.Chassistypes -eq '23'){$Script:Chassis = "Rack Mount Chassis"}  
                ElseIf ($se.Chassistypes -eq '24'){$Script:Chassis = "Sealed-Case PC"}
                ElseIf ($se.Chassistypes -eq '25'){$Script:Chassis = "Multi-system chassis"}  
                ElseIf ($se.Chassistypes -eq '26'){$Script:Chassis = "Compact PCI"} 
                ElseIf ($se.Chassistypes -eq '27'){$Script:Chassis = "Advanced TCA"} 
                ElseIf ($se.Chassistypes -eq '28'){$Script:Chassis = "Blade"} 
                ElseIf ($se.Chassistypes -eq '29'){$Script:Chassis = "Blade es"} 
                ElseIf ($se.Chassistypes -eq '30'){$Script:Chassis = "Tablet"} 
                ElseIf ($se.Chassistypes -eq '31'){$Script:Chassis = "Convertible"} 
                ElseIf ($se.Chassistypes -eq '32'){$Script:Chassis = "Detachable"} 
                ElseIf ($se.Chassistypes -eq '33'){$Script:Chassis = "IoT Gateway"} 
                ElseIf ($se.Chassistypes -eq '34'){$Script:Chassis = "Embedded PC"} 
                ElseIf ($se.Chassistypes -eq '35'){$Script:Chassis = "Mini PC"} 
                ElseIf ($se.Chassistypes -eq '36'){$Script:Chassis = "Stick PC"} 
                Else {$Script:Chassis = "Unknown"}
                # Convert LastBootUpTime to Common Date/Time Stamp
                $LastBootFormated = [System.Management.ManagementDateTimeConverter]::ToDateTime($($os.LastBootUpTime))
                $CurrentTime = Get-Date
                # Calculate the difference to find the Up Time
                $Script:Difference = (New-TimeSpan -Start $LastBootFormated -End $CurrentTime -ErrorAction SilentlyContinue).TotalSeconds
                If ($Difference -gt 172800) {
                    $TempUpTime = New-TimeSpan -Hours $([math]::Round([int](($Difference / 60)/ 60)))
                    $Script:UPTime = "$($TempUpTime.days) days $($TempUpTime.Hours) hrs"
                    }
                ElseIf (($Difference -ge 86400) -and ($Difference -lt 172800)) {
                    $TempUpTime = New-TimeSpan -Hours $([math]::Round([int](($Difference / 60)/ 60)))
                    $Script:UPTime = "$($TempUpTime.days) day $($TempUpTime.Hours) hrs"
                    }
                ElseIf ($Difference -lt 3600) {
                    $Script:UPTime = "< 1 hr"
                    }
                Else {
                    $Script:UPTime = "$([math]::Round([int](($Difference / 60)/ 60))) hrs"
                    }           
                # Gather Previous OS Information and Parse into Readable Format
                $SourceOS = Get-ChildItem -Path 'hklm:\SYSTEM\Setup' | Where-Object {$_.Name -like "*Source OS*"}
                $SouceData = @()
                Foreach ($_ in $SourceOS) {
                    $SourceOSProps = Get-ItemProperty -Path $_.PSPath
                    $TempArray = New-Object -TypeName PSObject
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'UpdateDate' -Value ([datetime](($SourceOSProps.PSChildName).Replace("Source OS (Updated on ","")).Replace(")","")).ToString("MM/dd/yyyy hh:mm:ss tt")
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'ReleaseId' -Value $SourceOSProps.ReleaseId
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'ProductName' -Value $SourceOSProps.ProductName
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'InstallDate' -Value ([DateTime]::FromFileTime($SourceOSProps.InstallTime)).ToString("MM/dd/yyyy hh:mm:ss tt")
                    Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'CSDVersion' -Value $SourceOSProps.CSDVersion
                    $SouceData += $TempArray
                    }
                # Create Array of Current OS Data
                $OriginalOS = New-Object -TypeName PSObject
                Add-Member -InputObject $OriginalOS -MemberType 'NoteProperty' -Name 'UpdateDate' -Value $([System.Management.ManagementDateTimeConverter]::ToDateTime($os.InstallDate).ToString("MM/dd/yyyy hh:mm:ss tt"))
                Add-Member -InputObject $OriginalOS -MemberType 'NoteProperty' -Name 'ReleaseId' -Value $ReleaseID
                Add-Member -InputObject $OriginalOS -MemberType 'NoteProperty' -Name 'ProductName' -Value $(($os.Caption).Replace('Microsoft ',''))
                Add-Member -InputObject $OriginalOS -MemberType 'NoteProperty' -Name 'InstallDate' -Value $([System.Management.ManagementDateTimeConverter]::ToDateTime($os.InstallDate).ToString("MM/dd/yyyy hh:mm:ss tt"))
                Add-Member -InputObject $OriginalOS -MemberType 'NoteProperty' -Name 'CSDVersion' -Value $($os.CSDVersion)   
                # Combine Previous OS data with Current OS and Sort by InstallDate
                $SouceData = $SouceData + $OriginalOS
                $SouceData = $SouceData | Sort-Object {$_.InstallDate -as [datetime]} -Descending
                # Create Hashtable of Collected Information
                [hashtable]$osProperties = @{
                   'UserID'=$Username;
                   'WSID'=$cs.Name;
                   'OS'=($os.Caption).Replace('Microsoft ','');
                   ‘OSVersion’=$os.version;
                   ‘OSBuild’=$os.buildnumber;
                   ‘SPVersion’=$os.servicepackmajorversion;
                   ‘Architecture’=$os.OSArchitecture;
                   'ReleaseID'=$ReleaseID;
                   'InstallDate'=[System.Management.ManagementDateTimeConverter]::ToDateTime($os.InstallDate).ToString("MM/dd/yyyy hh:mm:ss tt");
                   'DateTime'=[System.Management.ManagementDateTimeConverter]::ToDateTime($os.LocalDateTime).ToString("MM/dd/yyyy hh:mm:ss tt");
                   'TimeZone'=$tz.StandardName;
                   'NetAdapters'=$NetAdapaters;
                   'UpTime'=$UpTime;
                   'Make'=$cs.Manufacturer;
                   ‘Model’=$cs.model;
                   ‘Serial’=$bios.serialnumber;
                   ‘Manufacturer’=$cs.manufacturer;
                   'Chassis'=$Chassis;
                   ‘RAM’=$cs.totalphysicalmemory / 1GB -as [int];
                   ‘Sockets’=$cs.numberofprocessors;
                   ‘Cores’=$cpu.NumberOfCores;
                   ‘CPU’=$cpu.name;
                   'PreviousVersions'=$SouceData;
                   ‘SystemType’=$cs.SystemType;
                   'RequiredClientVersion'=$RequiredClientVersion;
                   'ccmClientVersion'=$ccmClientVersion;
                   'ccmSetupStatus'=$ccmSetupStatus;
                   'ccmStateMessage'=$ccmStateMessage;
                   'ccmprovisioningMode'=$ccmprovisioningMode;
	               'CcmExecStatus'=$CcmExecStatus;
	               'BITSStatus'=$BITSStatus;
	               'wuauservStatus'=$wuauservStatus;
                   'wuauservStartup'=$wuauservStartup;
	               'WinmgmtStatus'=$WinmgmtStatus;
	               'RRegistryStatus'=$RRegistryStatus;
                   'Dock'=$Dock;
                   }
                [array]$disks = Get-WmiObject -Class win32_logicaldisk -filter ‘drivetype = 3’ |
                    Select-Object -Property @{L = ‘drive’; E = {$_.DeviceID}},
                    @{L = ‘size’; E = {[math]::Round($_.size /1gb,2)}},
                    @{L = ‘free’; E ={[math]::Round($_.freespace /1gb,2)}},
                    @{L = ‘percent’; E = {[math]::Round(($_.freespace/$_.size)*100,2)}}
                [hashtable]$osproperties.Add(‘disks’,$disks)
                $Data = New-Object -TypeName PSCustomObject -Property $osProperties
                Return $Data
                }
            Else {
                $Data = "WMI ERROR: $($WMIERROR)"
                Return $Data
                }
            } | Out-Null
        # Wait for Job to Complete
        While (((Get-Job).State -match 'Running') -and ($CancelButton.IsPRessed -eq $False)) {[System.Windows.Forms.Application]::DoEvents()}
        # Cancel if Button is Pressed
        If (($CancelActions -eq $True) -or ($CancelButton.IsPRessed -eq $True)) {
            Get-Job | Remove-Job -Force | Out-Null
            startmenu            
            return
            }
        # Receive Data from Remote Computer
        $Script:OsData = Receive-Job -Name "DataRequest" -ErrorAction SilentlyContinue
        Remove-Job -Name "DataRequest" -Force | Out-Null
        $CancelButton.Visibility = 'Hidden'
        If ($OsData -notlike "*WMI ERROR:*") {
            # Set USERID Variable
            $Script:UserID = $OsData.UserID
            # If User is Present Gather Active Directory Information
            If ($UserID) {
                # Change Labels to Show Gathering Info
                If ($UserID) {$Script:GatherMenuTextblock.Text = "Gathering Active Directory for $UserID..."}
                Else {$Script:GatherMenuTextblock.Text = "Gathering Active Directory info..."}
                $Form_Main.Dispatcher.Invoke([action]{$GatherMenuTextblock},"Render")
                [System.Windows.Forms.Application]::DoEvents()          
                $USERAD = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
                    PageSize = 1000
                    Filter = "(&(objectCategory=User)(SAMAccountName=$UserID))"
                    SearchScope = 'Subtree'
                    SearchRoot = 'LDAP://YOURDOMAIN'
                    }).FindAll().Properties
                $ManagerAD = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
                    PageSize = 1000
                    Filter = "(&(objectCategory=User)(SAMAccountName=$($UserAD.managerpreferredid)))"
                    SearchScope = 'Subtree'
                    SearchRoot = 'LDAP://YOURDOMAIN'
                    }).FindAll().Properties
                $Script:AD = [PSCustomObject]@{User = $USERAD; Manager = $ManagerAD;}
                # Convert AD Mobile Number Value to Text
                $Result = $AD.User.msexchrecipienttypedetails
                If ($Result -eq '2') {$Script:Mobile = "MaaS360"}
                ElseIf ($Result -eq '2147483648') {$Script:Mobile = "Outlook"}
                Else {$Script:Mobile = "No Value Found"}
                If (("$($USERAD.lockouttime)" -eq "0") -or ("$($USERAD.lockouttime)" -eq "")) {$PwdState = (([System.TimeZoneInfo]::ConvertTimeFromUtc(([datetime]::fromfiletime($AD.User.pwdlastset[0])).ToUniversalTime(), [System.TimeZoneInfo]::FindSystemTimeZoneById($OsData.TimeZone))).AddDays(90).ToString("MM/dd/yyyy hh:mm tt"))} Else {$PwdState = "LOCKED"}
                # Create HashTable of User Infromation
                [hashtable]$adProperties = @{
                    'UserName'=$AD.User.displayname;
                    'UserEmail'=$AD.User.mail;
                    'UserPhone'=$AD.User.telephonenumber;
                    'UserMobile'=$Mobile;
                    'PwdExpires'=$PwdState;
                    'ManagerID'=$AD.User.managerpreferredid;
                    'ManagerName'=$AD.Manager.displayname;
                    'ManagerEmail'=$AD.Manager.mail;
                    'ManagerPhone'=$AD.Manager.telephonenumber;
                    'ManagerPicture'=$AD.Manager.photourl;
                    'Type'=$AD.User.employeetype;
                    'Title'=$AD.User.jobfamilyname;
                    'Location'=$AD.User.physicaldeliveryofficename;
                    'Dept'=$AD.User.costcenterdescription;
                    'Division'=$AD.User.pslevel4costcenternm;
                    'BL'=$AD.User.pslevel3costcenternm;
                    'EntRole'=$AD.User.description;
                    'Picture'=$AD.User.photourl;
                    }
                }
            Else {
                $Script:UserID = "No User Found"
                # Create HashTable of Blank User Infromation
                [hashtable]$adProperties = @{
                    'UserName'="No User Found";
                    'UserEmail'="No User Found";
                    'UserPhone'="No User Found";
                    'UserMobile'="No User Found";
                    'PwdExpires'="No User Found";
                    'ManagerID'="No User Found";
                    'ManagerName'="No User Found";
                    'ManagerEmail'="No User Found";
                    'ManagerPhone'="No User Found";
                    'Type'="No User Found";
                    'Title'="No User Found";
                    'Location'="No User Found";
                    'Dept'="No User Found";
                    'Division'="No User Found";
                    'BL'="No User Found";
                    'EntRole'="No User Found";
                    'Picture'=$Null;
                    }       
                }
            # Create Array from HashTable
            $AdData = New-Object -TypeName PSCustomObject -Property $adProperties
            # Get IP Address of Remote unit
            $Script:IPAddress = ([System.Net.Dns]::GetHostByName($ComputerName).AddressList[0]).IpAddressToString
            # Populate Variables Based on Gathered Information
            If ($OsData.ccmSetupStatus) {$Script:ccmSetupStatus = "$($OsData.ccmSetupStatus)"} Else {$Script:ccmSetupStatus = "Missing from SCCM"}
            If ($OsData.ccmStateMessage) {$Script:ccmStateMessage = "$($OsData.ccmStateMessage)"} Else {$Script:ccmStateMessage = "Missing from SCCM"}
            If ($OsData.ccmprovisioningMode) {$Script:ccmprovisioningMode = "$($OsData.ccmprovisioningMode)"} Else {$Script:ccmprovisioningMode = "Missing from SCCM"}
            If ($OsData.WSID) {$Script:WSID = "$($OsData.WSID)"} Else {$Script:WSID = "Missing from System"}
            If ($OsData.Model) {$Script:Model = $OsData.Model} Else {$Script:Model = "Missing from System"}
            If ($OsData.RAM) {$Script:Memory = $OsData.RAM} Else {$Script:Memory = "Missing from System"}
            If ($OsData.Make) {$Script:Maker = $OsData.Make} Else {$Script:Maker = "Missing from System"}
            If ($OsData.Serial) {$Script:Serial = $OsData.Serial} Else {$Script:Serial = "Missing from BIOS"}
            If ($OsData.ReleaseID) {$Script:ReleaseID = $OsData.ReleaseID} Else {$Script:ReleaseID = "Missing from OS"}
            If ($OsData.Chassis) {$Script:Chassis = $OsData.Chassis} Else {$Script:Chassis = "Missing from Enclosure"}
            If ($OsData.InstallDate) {$Script:InstallDate = $OsData.InstallDate} Else {$Script:InstallDate = "Missing from OS"}
            If ($OsData.SPVersion) {$Script:SPVersion = $OsData.SPVersion} Else {$Script:SPVersion = "Missing from OS"}
            If ($OsData.NetAdapters) {
                $Count = 0
                $Script:NetAdaptersFormatted = $Null
                Foreach ($_ in $OsData.NetAdapters) {
                    $Count++
                    If (($Count -eq $OsData.NetAdapters.count) -or ($OsData.NetAdapters.count -eq $Null)) {
                        If ($_.name -like "*Bluetooth*") {$InterfaceAlias = "Bluetooth"}
                        ElseIf (($_.name -like "*Local Area Connection*") -and (($_.ipaddress -like "*10.133*") -or ($_.ipaddress -like "*10.136*"))) {$InterfaceAlias = ($_.name).Replace("$($_.name)","VPN")}
                        ElseIf ($_.name -like "*Local Area Connection*") {$InterfaceAlias = "LAN"}
                        ElseIf ($_.name -like "*Ethernet*") {$InterfaceAlias = "LAN"}
                        Else {$InterfaceAlias = ($_.name).Substring(0, 5)}
                        $Script:NetAdaptersFormatted = $NetAdaptersFormatted + "$InterfaceAlias`t- $($_.ipaddress)`r`n`t- $($_.macaddress)"                        
                        }
                    Else {
                        If ($_.name -like "*Bluetooth*") {$InterfaceAlias = "Bluetooth"}
                        ElseIf (($_.name -like "*Local Area Connection*") -and (($_.ipaddress -like "*10.133*") -or ($_.ipaddress -like "*10.136*"))) {$InterfaceAlias = ($_.name).Replace("$($_.name)","VPN")}
                        ElseIf ($_.name -like "*Local Area Connection*") {$InterfaceAlias = "LAN"}
                        ElseIf ($_.name -like "*Ethernet*") {$InterfaceAlias = "LAN"}
                        Else {$InterfaceAlias = ($_.name).Substring(0, 5)}
                        $Script:NetAdaptersFormatted = $NetAdaptersFormatted + "$InterfaceAlias`t- $($_.ipaddress)`r`n`t- $($_.macaddress)`r`n"                        
                        }
                    }
                $Script:NetAdapters = $NetAdaptersFormatted
                }
            Else {$Script:NetAdapters = "Missing from OS"}
            If ($OsData.PreviousVersions) {
                $Count = 0
                $Script:VersionsFormatted = $Null
                Foreach ($_ in $OsData.PreviousVersions) {
                    $Count++
                    If (($Count -eq $OsData.PreviousVersions.count) -or ($OsData.PreviousVersions.count -eq $Null)) {
                        If ($_.ReleaseId -ne $Null) {$Script:VersionsFormatted = $VersionsFormatted + "$($_.ProductName) Version $($_.ReleaseId)`r`nInstalled on: $($_.InstallDate)"}
                        ElseIf ($_.CSDVersion -ne $Null) {$Script:VersionsFormatted = $VersionsFormatted +  "$($_.ProductName) $($_.CSDVersion)`r`nInstalled on: $($_.InstallDate)"}
                        Else {$Script:VersionsFormatted = $VersionsFormatted +  "$($_.ProductName)`r`nInstalled on: $($_.InstallDate)"}                                
                        }
                    Else {
                        If ($_.ReleaseId -ne $Null) {$Script:VersionsFormatted = $VersionsFormatted + "$($_.ProductName) Version $($_.ReleaseId)`r`nInstalled on: $($_.InstallDate)`r`n`r`n"}
                        ElseIf ($_.CSDVersion -ne $Null) {$Script:VersionsFormatted = $VersionsFormatted +  "$($_.ProductName) $($_.CSDVersion)`r`nInstalled on: $($_.InstallDate)`r`n`r`n"}
                        Else {$Script:VersionsFormatted = $VersionsFormatted +  "$($_.ProductName)`r`nInstalled on: $($_.InstallDate)`r`n`r`n"}                        
                        }
                    }                
                $Script:PreviousVersions = $VersionsFormatted
                }
            Else {$Script:PreviousVersions = "Missing from OS"}
            If ($OsData.OS) {$Script:OSVersion = $OsData.OS} Else {$Script:OSVersion = "Missing from OS"}
            If ($OsData.UpTime) {$Script:UpTime = $OsData.UpTime} Else {$Script:UpTime = "Missing from OS"}
            If ($OsData.TimeZone) {$Script:TimeZone = $OsData.TimeZone} Else {$Script:TimeZone = "Missing from TimeZone"}
            If ($OsData.DateTime) {$Script:DateTime = $OsData.DateTime} Else {$Script:DateTime = "Missing from OS"}
            If ($OsData.CPU) {$Script:CPU = $OsData.CPU} Else {$Script:CPU = "Missing from Processor"}
            If ($OsData.cores) {$Script:Cores = $OsData.cores} Else {$Script:CPU = "Missing from Processor"}
            If ($OsData.Dock -ne "") {$Script:CDock = "$($OsData.Dock)"} Else {$Script:CDock = "Not Present"}
            If ($OsData.Architecture) {$Script:Architecture = $OsData.Architecture} Else {$Script:Architecture = "Missing from Processor"}
            If ($OsData.disks) {$Script:Disks = $OsData.disks} Else {$Script:Disks = "Missing from Disk"}
            If ($OsData.ccmClientVersion) {$Script:InfoCCMCLIENTVERSIONTextblock.Text = "SCCM Version: $($OsData.ccmClientVersion)"} Else {$Script:InfoCCMCLIENTVERSIONTextblock.Text = "SCCM Version: Unknown"}
            If ($OsData.ccmClientVersion -lt $OsData.RequiredClientVersion) {$InfoCCMCLIENTVERSIONTextblock.Foreground = "Red"} Else {$InfoCCMCLIENTVERSIONTextblock.Foreground = $TextColor}
            If ($OsData.CcmExecStatus) {$Script:InfoCCMEXECSTATUSTextblock.Text = "CCM Service: $($OsData.CcmExecStatus)"} Else {$Script:InfoCCMEXECSTATUSTextblock.Text = "CCM Service: Unknown"}
            If ($OsData.CcmExecStatus -eq "Running") {$Script:InfoCCMEXECSTATUSTextblock.Foreground = $TextColor} Else {$Script:InfoCCMEXECSTATUSTextblock.Foreground = "Red"}
            If ($OsData.BITSStatus) {$Script:InfoBITSSTATUSTextblock.Text = "BITS Service: $($OsData.BITSStatus)"} Else {$Script:InfoBITSSTATUSTextblock.Text = "BITS Service: Unknown"}
            If ($OsData.BITSStatus -eq "Running") {$Script:InfoBITSSTATUSTextblock.Foreground = $TextColor} Else {$Script:InfoBITSSTATUSTextblock.Foreground = "Red"}
            If (($OsData.wuauservStatus) -and ($OsData.wuauservStartup -eq $True)) {$Script:InfoWUAUSERVSTATUSTextblock.Text = "WUAU Service: Triggered"}
            ElseIf (($OsData.wuauservStatus) -and ($OsData.wuauservStartup -eq $False)) {$Script:InfoWUAUSERVSTATUSTextblock.Text = "WUAU Service: $($OsData.wuauservStatus)"}
            Else {$Script:InfoWUAUSERVSTATUSTextblock.Text = "WUAU Service: Unknown"}
            If (($OsData.wuauservStatus -eq "Running") -or ($OsData.wuauservStartup -eq $True)) {$Script:InfoWUAUSERVSTATUSTextblock.Foreground = $TextColor} Else {$Script:InfoWUAUSERVSTATUSTextblock.Foreground = "Red"}
            If ($OsData.WinmgmtStatus) {$Script:InfoWINMGMTSTATUSTextblock.Text = "WINMGMT Service: $($OsData.WinmgmtStatus)"} Else {$Script:InfoWINMGMTSTATUSTextblock.Text = "WINMGMT Service: Unknown"}
            If ($OsData.WinmgmtStatus -eq "Running") {$Script:InfoWINMGMTSTATUSTextblock.Foreground = $TextColor} Else {$Script:InfoWINMGMTSTATUSTextblock.Foreground = "Red"}
            If ($OsData.RRegistryStatus) {$Script:InfoRREGISTRYSTATUSTextblock.Text = "REMREG Service: $($OsData.RRegistryStatus)"} Else {$Script:InfoRREGISTRYSTATUSTextblock.Text = "REMREG Service: Unknown"}
            If ($OsData.RRegistryStatus -eq "Running") {$Script:InfoRREGISTRYSTATUSTextblock.Foreground = $TextColor} Else {$Script:InfoRREGISTRYSTATUSTextblock.Foreground = "Red"}
            If ($AdData.UserName) {$Script:FullName = $AdData.UserName} Else {$Script:FullName = "Missing from AD"}
            If ($AdData.UserEmail) {$Script:EmailAddress = $AdData.UserEmail} Else {$Script:EmailAddress = "Missing from AD"}
            If ($AdData.Dept) {$Script:DeptName = $AdData.Dept} Else {$Script:DeptName = "Missing from AD"}
            If ($AdData.Type) {$Script:Employee = $AdData.Type} Else {$Script:Employee = "Missing from AD"}
            If ($AdData.Title) {$Script:JobTitle = $AdData.Title} Else {$Script:JobTitle = "Missing from AD"}
            If ($AdData.Division) {$Script:Division = $AdData.Division} Else {$Script:Division = "Missing from AD"}
            If ($AdData.BL) {$Script:BusinessLine = $AdData.BL} Else {$Script:BusinessLine = "Missing from AD"}
            If ($AdData.EntRole) {$Script:EnterpriseRole = $AdData.EntRole} Else {$Script:EnterpriseRole = "Missing from AD"}
            If ($AdData.Location) {$Script:Location = $AdData.Location} Else {$Script:Location = "Missing from AD"}
            If ($AdData.UserPhone) {$Script:PhoneNumber = $AdData.UserPhone} Else {$Script:PhoneNumber = "Missing from AD"}
            If ($AdData.UserMobile) {$Script:Mobile = $AdData.UserMobile} Else {$Script:Mobile = "Missing from AD"}
            If ($AdData.ManagerID) {$Script:ManagerUserID = $AdData.ManagerID} Else {$Script:ManagerUserID = "Missing from AD"}
            If ($AdData.ManagerName) {$Script:ManagerName = $AdData.ManagerName} Else {$Script:ManagerName = "Missing from AD"}
            If ($AdData.ManagerEmail) {$Script:ManagerEmail = $AdData.ManagerEmail} Else {$Script:ManagerEmail = "Missing from AD"}
            If ($AdData.ManagerPhone) {$Script:ManagerPhoneNumber = $AdData.ManagerPhone} Else {$Script:ManagerPhoneNumber = "Missing from AD"}
            If ($AdData.PwdExpires) {$Script:PwdExpires = $AdData.PwdExpires} Else {$Script:PwdExpires = "Missing from AD"}
            If ($AdData.Picture -ne $Null) {
                $Script:UserPictureButton.Visibility = "Visible"
                $Script:UserPictureButton.IsEnabled = "True"
                $UserPicSource = "$FilesFolder\temptbpic.jpg"
                Invoke-WebRequest -Uri "$($AdData.Picture)" -OutFile $UserPicSource -ErrorAction SilentlyContinue
                $Script:UserImage = New-Object System.Windows.Media.Imaging.BitmapImage
                $UserImage.BeginInit()
                $UserImage.CacheOption = "OnLoad"
                $UserImage.CreateOptions = "IgnoreImageCache"
                $UserImage.UriSource = New-Object System.Uri("$UserPicSource")
                $UserImage.EndInit()
                $UserPicture.Source = $UserImage
                }
            Else {
                $Script:UserPictureButton.Visibility = "Hidden"
                $Script:UserPictureButton.IsEnabled = "False"
                $UserPicture.Source = $Null
                }
            If ($UpTime -like "*Day*") {$UPTIMEButton.Foreground = "Red"} Else {$UPTIMEButton.Foreground = $TextColor}
            If ("$($PwdExpires)" -like "*Locked*") {$PWDEXPIRESButton.Foreground = "Red"}
            ElseIf ((New-TimeSpan -Start (([System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), [System.TimeZoneInfo]::FindSystemTimeZoneById($CurrentTimeZone))).ToString("MM/dd/yyyy hh:mm tt")) -End (([System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date $($AdData.PwdExpires)).ToUniversalTime(), [System.TimeZoneInfo]::FindSystemTimeZoneById($CurrentTimeZone))).ToString("MM/dd/yyyy hh:mm tt"))) -lt 0) {$PWDEXPIRESButton.Foreground = "Red"}
            ElseIf (((New-TimeSpan -Start (([System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date).ToUniversalTime(), [System.TimeZoneInfo]::FindSystemTimeZoneById($CurrentTimeZone))).ToString("MM/dd/yyyy hh:mm tt")) -end (([System.TimeZoneInfo]::ConvertTimeFromUtc((Get-Date $($AdData.PwdExpires)).ToUniversalTime(), [System.TimeZoneInfo]::FindSystemTimeZoneById($CurrentTimeZone))).ToString("MM/dd/yyyy hh:mm tt"))).Days) -le 5){$PWDEXPIRESButton.Foreground = "Yellow"}
            Else {$PWDEXPIRESButton.Foreground = $TextColor}
            # Clean Variables
            If ($WSID) {$Script:WSID = $WSID.Replace(' ','')}
            # Set Info Window
            If ($ccmSetupStatus) {$Script:InfoCCMSETUPSTATUSTextblock.Text = "SCCM Setup Status: $ccmSetupStatus"} Else {$Script:InfoCCMSETUPSTATUSTextblock.Text = "SCCM Setup Status: Absent"}
            If ($ccmSetupStatus -like "*Success*") {$InfoCCMSETUPSTATUSTextblock.Foreground = $Textcolor} Else {$InfoCCMSETUPSTATUSTextblock.Foreground = "Red"}
            If ($ccmStateMessage) {$Script:InfoCCMSTATEMSGTextblock.Text = "SCCM State Message: $ccmStateMessage"} Else {$Script:InfoCCMSTATEMSGTextblock.Text = "SCCM State Message:  Absent"}
            If ($ccmStateMessage -like "*Success*") {$InfoCCMSTATEMSGTextblock.Foreground = $Textcolor} Else {$InfoCCMSTATEMSGTextblock.Foreground = "Red"}
            If ($ccmprovisioningMode) {$Script:InfoCCMMODETextblock.Text = "SCCM Provisioning: $ccmprovisioningMode"} Else {$Script:InfoCCMMODETextblock.Text = "SCCM Provisioning: Absent"}
            If ($ccmprovisioningMode -eq "Reset") {$InfoCCMMODETextblock.Foreground = "Yellow"}
            ElseIf ($ccmprovisioningMode -eq "Disabled") {$InfoCCMMODETextblock.Foreground = $Textcolor}
            Else {$InfoCCMMODETextblock.Foreground = "Red"}
            If ($WSID) {$Script:InfoWSIDTextblock.Text = "WSID: $WSID"} Else {$Script:InfoWSIDTextblock.Text = "WSID: Absent"}
            If ($IPAddress) {$Script:InfoIPTextblock.Text = "IP: $IPAddress"} Else {$Script:InfoIPTextblock.Text = "IP: Absent"}
            If ($USERID) {$Script:InfoUSERIDTextblock.Text = "USERID: $USERID"} Else {$Script:InfoUSERIDTextblock.Text = "USERID: Absent"}
            If ($Mobile) {$Script:InfoMOBILETextblock.Text = "MOBILE: $Mobile"} Else {$Script:InfoMOBILETextblock.Text = "MOBILE: Absent"}
            If ($Model) {$Script:InfoMODELTextblock.Text = "MODEL: $Model"} Else {$Script:InfoMODELTextblock.Text = "MODEL: Absent"}
            If ($Serial) {$Script:InfoSERIALTextblock.Text = "SERIAL: $Serial"} Else {$Script:InfoSERIALTextblock.Text = "SERIAL: Absent"}
            If ($Chassis) {$Script:InfoCHASSISTextblock.Text = "CHASSIS: $Chassis"} Else {$Script:InfoCHASSISTextblock.Text = "CHASSIS: Absent"}
            If ($CDock) {$Script:InfoDockTextblock.Text = "USB-C DOCK: $CDock"} Else {$Script:InfoDockTextblock.Text = "USB-C DOCK: Not Detected"}
            If ($Memory) {$Script:InfoMEMORYTextblock.Text = "MEMORY: $Memory GB"} Else {$Script:InfoMEMORYTextblock.Text = "MEMORY: Absent"}
            If ($OSVersion) {$Script:InfoOSTextblock.Text = "OS: $OSVersion"} Else {$Script:InfoOSTextblock.Text = "OS: Absent"}
            If ($FullName) {$Script:InfoFULLNAMETextblock.Text = "NAME: $FullName"} Else {$Script:InfoFULLNAMETextblock.Text = "NAME: Absent"}
            If ($EmailAddress) {$Script:InfoEMAILADDRESSTextblock.Text = "EMAIL: $EmailAddress"} Else {$Script:InfoEMAILADDRESSTextblock.Text = "EMAIL: Absent"}
            If ($ManagerName) {$Script:InfoMANAGERNAMETextblock.Text = "MANAGER: $ManagerName"} Else {$Script:InfoMANAGERNAMETextblock.Text = "MANAGER: Absent"}
            If ($DeptName) {$Script:InfoDEPTNAMETextblock.Text = "DEPT: $DeptName"} Else {$Script:InfoDEPTNAMETextblock.Text = "DEPT: Absent"}
            If ($JobTitle) {$Script:InfoJOBTITLETextblock.Text = "TITLE: $JobTitle"} Else {$Script:InfoJOBTITLETextblock.Text = "TITLE: Absent"}
            If ($Location) {$Script:InfoLOCATIONTextblock.Text = "LOCATION: $Location"} Else {$Script:InfoLOCATIONTextblock.Text = "LOCATION: Absent"}
            If ($Division) {$Script:InfoDIVISIONTextblock.Text = "DIVISION: $Division"} Else {$Script:InfoDIVISIONTextblock.Text = "DIVISION: Absent"}
            If ($BusinessLine) {$Script:InfoBUSINESSLINETextblock.Text = "BL: $BusinessLine"} Else {$Script:InfoBUSINESSLINETextblock.Text = "BL: Absent"}
            If ($EnterpriseRole) {$Script:InfoENTERPRISEROLETextblock.Text = "ENTROLE: $EnterpriseRole"} Else {$Script:InfoENTERPRISEROLETextblock.Text = "ENTROLE: Absent"}
            If ($Employee) {$Script:InfoEMPLOYEETextblock.Text = "TYPE: $Employee"} Else {$Script:InfoEMPLOYEETextblock.Text = "TYPE: Absent"}
            If ($PhoneNumber) {$Script:InfoPHONETextblock.Text = "PHONE: $PhoneNumber"} Else {$Script:InfoPHONETextblock.Text = "PHONE: Absent"}
            If ($PreviousVersions -ne "Missing From OS") {$Script:InfoVERSIONDATATextblock.Text = "$PreviousVersions"} Else {$Script:InfoRELEASEIDTextblock.Text = "Previous Versions Data Absent"}
            If ($NetAdapters -ne "Missing From OS") {$Script:InfoNETDATATextblock.Text = "$NetAdapters"} Else {$Script:InfoNETDATATextblock.Text = "Net Adapter Data Absent"}
            If ($ReleaseID -ne "Missing From OS") {$Script:InfoRELEASEIDTextblock.Text = "VERSION: $ReleaseID"}            
            ElseIf ($SPVersion -ne "Missing From OS") {$Script:InfoRELEASEIDTextblock.Text = "VERSION: Service Pack $SPVersion"} 
            Else {$Script:InfoRELEASEIDTextblock.Text = "VERSION: Absent"}
            If ($CPU -like "*@*") {$CPU = $CPU.replace("@","`n@")}
            If ($CPU) {$Script:InfoCPUDATATextblock.Text = "$CPU $Architecture with $Cores Cores"} Else {$Script:InfoCPUDATATextblock.Text = "CPU Data Absent"}
            If ($Disks) {
                $Script:DisksFormatted = $Null
                Foreach ($_ in $Disks) {$Script:DisksFormatted = $DisksFormatted + "$($_.Drive) Size $($_.size)gb Free $($_.free)gb $($_.percent)%"}
                If ($Disks.percent -lt 10) {$InfoCPUDATATextblock.Foreground = "Red"} Else {$InfoCPUDATATextblock.Foreground = $TextColor}
                $Script:InfoHDDDATATextblock.Text = "$DisksFormatted"
                }
            Else {$Script:InfoHDDINFOTextblock.Text = "HDD Data Absent"}
            If ($Maker) {$Script:InfoMAKETextblock.Text = "MAKE: $Maker"} Else {$Script:InfoMAKETextblock.Text = "MAKE: Absent"}
            If (($UserID -ne "No User Found") -and (!$LogonInfo)) {MapMenu -Searchuser $($UserID.ToLower())}
            If ($TimeZone -ne $Null) {$Script:InfoTZTextblock.Text = "TIMEZONE: $TimeZone"} Else {$Script:InfoTZTextblock.Text = "TIMEZONE: Absent"}
            If ($DateTime -ne $Null) {$Script:InfoDATETIMETextblock.Text = "DATETIME: $DateTime"} Else {$Script:InfoDATETIMETextblock.Text = "DATETIME: Absent"}
            If ($PwdExpires -ne $Null) {$Script:InfoPWDEXPIRESTextblock.Text = "PWD: $PwdExpires"} Else {$Script:InfoPWDEXPIRESTextblock.Text = "PWD: Absent"}
            $Info_List.Visibility = 'Visible'
            $Info_Start.Visibility = 'Hidden'
            If (($UserID -ne $Null) -and ($UserID -ne "No User Found")) {
                $Map_Info.Visibility = 'Visible'
                $Map_Start.Visibility = 'Hidden'
                }
            Else {
                $MapStartLabel.Content = "Please Connect to a WSID with a User Present"
                $Map_Start.Visibility = 'Visible'
                $Map_Info.Visibility = 'Hidden'
                }
            MainMenu
            Return
            }
        Else {
            [System.Windows.MessageBox]::Show("There was an error collecting data from: $ComputerName.`n`n$OsData`n`nPress OK to Search again.",'WMI Data Error','OK','Error') | Out-Null
            StartMenu
            Return            
            }
        }
    Else {
        If ((Test-Connection -Count 1 -Quiet -ComputerName $ComputerName -ErrorAction SilentlyContinue) -eq $True) {
            [System.Windows.MessageBox]::Show("Could not connect to Windows Management Framework on Remote Computer: $ComputerName.`n`nYou may still be able to remote into the unit, but the Agent Toolbox cannot connect to the WINMGMT Service.`n`nTo resolve this issue attempt the following:`n`n• Verify the WINMGMT service is running on $ComputerName.`n• If missing, verify Windows Management Framework is Installed.`n`nPress OK to Search again.",'Windows Management Framework Issue','OK','Error') | Out-Null
            StartMenu
            Return
            }
        Else {
            [System.Windows.MessageBox]::Show("Cannot find $ComputerName on the Network using DNS.`n`nPlease try using the IP Address if you used the Computer Name and check to make sure the unit is pingable.`n`nHave the user do an ipconfig /flushdns followed by a release/renew.`n`nPress OK to Search again.",'Network DNS Issue','OK','Error') | Out-Null
            StartMenu
            Return
            }
        }
    }

Function LeftClick($Button) {
    If (!$InputUserID) {$Script:Verified = 'Yes'}
    If ($Button.Execute) {
        $LocalFile = Get-ChildItem -Path $pwd -Include $Button.Execute -Recurse -Force -ErrorAction SilentlyContinue
        If (($SafeMode -eq $True) -and ($Button.SafeMode -like "N")) {
            [System.Windows.MessageBox]::Show("This option is not available in SafeMode.`n`nPress OK to close this message.",'SafeMode Enabled','OK','Error') | Out-Null
            }
        Else {
            If (($Button.Execute).StartsWith("http")) { # If HTTP
                $Script:Bit32 = $False
                $Script:Bit64 = $False
                If (!$Credentials) { # If Credentials are Absent
                    Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
                    Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                        $Script:Credentials = $Null
                        Return
                        }
                    }
                If ($Credentials) { # If Credentials are Present
                    If ($Button.Content) {
                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                        }
                    Else {
                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}
                        }
                    If ($Browser -eq "C:\Program Files (x86)\Internet Explorer\iexplore.exe") { # Internet Explorer
                        If ($OpenLink -like "*In New Tab*") {
                            If ((Get-Process -name iexplore -ErrorAction SilentlyContinue -IncludeUserName).where({$_.username -and $_.username -like "*DOMAIN\$LocalUser*"})) {
                                Try {Start-Process -WindowStyle Hidden -FilePath "C:\WINDOWS\system32\cmd.exe" -argumentlist "/C start $($Button.Execute)" -Credential $Credentials -ErrorAction Stop}
                                Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                                    $Script:Credentials = $Null
                                    }
                                }
                            Else {                    
                                Try {Start-Process -FilePath $Browser -ArgumentList $Button.Execute -Credential $Credentials -ErrorAction Stop}
                                Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                                    $Script:Credentials = $Null
                                    }
                                }
                            }
                        Else {
                            Try {Start-Process -FilePath $Browser -ArgumentList $Button.Execute -Credential $Credentials -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','OK','Error') | Out-Null
                                $Script:Credentials = $Null
                                }                            
                            }                       
                        }
                    If ($Browser -eq "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe") { # Google Chrome
                        If ($OpenLink -like "*In New Tab*") {
                            If (Get-Process chrome -ErrorAction SilentlyContinue) {
                                Try {Start-Process -FilePath $Browser -ArgumentList "$($Button.Execute)",'--profile-directory="Default"','--allow-no-sandbox-job' -Credential $Credentials -ErrorAction Stop}
                                Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','OK','Error') | Out-Null
                                    $Script:Credentials = $Null
                                    }                             
                                }
                            Else {
                                Try {Start-Process -FilePath $Browser -ArgumentList "$($Button.Execute)",'--profile-directory="Default"' -Credential $Credentials -ErrorAction Stop}
                                Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','OK','Error') | Out-Null
                                    $Script:Credentials = $Null
                                    }                            
                                }
                            }
                        Else {
                            Try {Start-Process -FilePath $Browser -ArgumentList "$($Button.Execute)",'--profile-directory="Default"','--new-window' -Credential $Credentials -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','OK','Error') | Out-Null
                                $Script:Credentials = $Null
                                }                             
                            }
                        }
                    If ($Browser -eq "C:\Program Files (x86)\Mozilla Firefox\firefox.exe") { # Mozilla FireFox
                        If ($OpenLink -like "*In New Tab*") {
                            Try {Start-Process -FilePath $Browser -ArgumentList "-new-tab",$Button.Execute -Credential $Credentials -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','OK','Error') | Out-Null
                                $Script:Credentials = $Null
                                }
                            }
                        Else {
                            Try {Start-Process -FilePath $Browser -ArgumentList "-new-window",$Button.Execute -Credential $Credentials -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','OK','Error') | Out-Null
                                $Script:Credentials = $Null
                                }
                            }                       
                        }                                      
                    }
                }
            Else { # If Not HTTP
                If ($LocalFile.Fullname) { # If Local File
                    If ($Button.Admin -eq 'N') { # If Admin
                        If (!$Credentials) { # If Credentials are Absent
                            Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                                $Script:Credentials = $Null
                                Return
                                }
                            }
                        If ($Credentials) { # If Credentials are Present
                            If ((Split-Path -Path $LocalFile) -eq $ScriptsFolder) { # If in Scripts Folder
                                If (Test-Path ($LocalFile.DirectoryName + "\" + $ComputerFile)) {Remove-Item -Path ($LocalFile.DirectoryName + "\" + $ComputerFile) -Force -ErrorAction SilentlyContinue}
                                    If ($ComputerName) {Set-Content -Path ($LocalFile.DirectoryName + "\" + $ComputerFile) -Value $ComputerName}
                                    If ($Button.Argument) { # If Argument is Present
                                        If (($InputUserID) -and ($Verified -eq 'No')) {[System.Windows.MessageBox]::Show("User ID search detected.`n`nDid you verify the WSID: $WSID with the User?",'Verify WSID','YesNo','Error')}
                                        If ($Verified -eq 'Yes') {
                                            If ($ErrorLog.IsPresent) { # If Errorlog is Present
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList "$($Button.Argument) -ErrorLog" -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }                                                
                                                }
                                            Else { # If Errorlog is Absent
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList $Button.Argument -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }                                                
                                                }
                                            }
                                        }
                                    Else { # If Argument is Absent
                                        If (($InputUserID) -and ($Verified -eq 'No')) {$Script:Verified = [System.Windows.MessageBox]::Show("User ID search detected.`n`nDid you verify the WSID: $WSID with the User?",'Verify WSID','YesNo','Error')}
                                        If ($Verified -eq 'Yes') {
                                            If ($ErrorLog.IsPresent) { # If Errorlog is Present
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList "-ErrorLog" -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }
                                                }
                                            Else { # If Errorlog is Absent
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                                        }
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }
                                                }
                                            }
                                        }
                                    }
                            Else { # If Not in Scripts Folder
                                If ((Split-Path -Path $LocalFile) -eq $FilesFolder) { # If in Files Folder
                                    If ($Button.Argument) { # If Argument is Present
                                        Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList $Button.Argument -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                        }
                                    Else { # If Argument is Absent
                                        Try {Start-Process -FilePath $LocalFile.Fullname -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                        }
                                    }
                                Else { # If Not in Files Folder
                                    If ((Split-Path -Path $LocalFile) -eq $DocsFolder) {# If in Docs Folder
                                        If ($Button.Argument) { # If Argument is Present
                                            Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList $Button.Argument -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                            }
                                        Else { # If Argument is Absent
                                            Try {Start-Process -FilePath $LocalFile.Fullname -WorkingDirectory $LocalFile.DirectoryName -Credential $Credentials -ErrorAction Stop}
                                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    Else { # If Not Admin
                        If ((Split-Path -Path $LocalFile) -eq $ScriptsFolder) { # If in Scripts Folder
                            If (Test-Path ($LocalFile.DirectoryName + "\" + $ComputerFile)) {Remove-Item -Path ($LocalFile.DirectoryName + "\" + $ComputerFile) -Force -ErrorAction SilentlyContinue}
                                If ($ComputerName) {Set-Content -Path ($LocalFile.DirectoryName + "\" + $ComputerFile) -Value $ComputerName}
                                    If ($Button.Argument) { # If Argument is Present
                                        If (($InputUserID) -and ($Verified -eq 'No')) {$Script:Verified = [System.Windows.MessageBox]::Show("User ID search detected.`n`nDid you verify the WSID: $WSID with the User?",'Verify WSID','YesNo','Error')}
                                        If ($Verified -eq 'Yes') {
                                            If ($ErrorLog.IsPresent) { # If Errorlog is Present
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList "$($Button.Argument) -ErrorLog" -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }                                                
                                                }
                                            Else { # If Errorlog is Absent
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID }
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList $Button.Argument -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }                                                
                                                }
                                            }
                                        }
                                    Else { # If Argument is Absent
                                        If (($InputUserID) -and ($Verified -eq 'No')) {$Script:Verified = [System.Windows.MessageBox]::Show("User ID search detected.`n`nDid you verify the WSID: $WSID with the User?",'Verify WSID','YesNo','Error')}
                                        If ($Verified -eq 'Yes') {
                                            If ($ErrorLog.IsPresent) { # If Errorlog is Present
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList "-ErrorLog" -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }
                                                }
                                            Else { # If Errorlog is Absent
                                                If ($Computername) {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute) on $WSID.`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                Else {$Choice = [System.Windows.MessageBox]::Show("This will run $($Button.Execute).`n`nDo you wish to continue?",'Run Remote Fix','YesNo','Error')}
                                                If ($Choice -eq 'Yes') {
                                                    If ($Button.Content) {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Content) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                                        }
                                                    Else {
                                                        If (($Button.Tab -like "*General*") -or ($Button.Tab -like "*Microsoft*") -or ($Button.Tab -like "*Advanced*")) {$Script:FixList.Add("Ran $($Button.Name) from the Toolbox.") | Out-Null}
                                                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                                        }                                                    
                                                    Try {Start-Process -FilePath $LocalFile.Fullname -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                                    }
                                                }
                                            }
                                        }
                                    }
                            Else { # If Not in Scripts Folder
                                If ($Button.Content) {
                                    If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                                    Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                                    }
                                Else {
                                    If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                                    Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                                    }                                
                                If ((Split-Path -Path $LocalFile) -eq $FilesFolder) { # If in Files Folder
                                    If ($Button.Argument) { # If Argument is Present
                                        Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList $Button.Argument -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                        }
                                    Else { # If Argument is Absent
                                        Try {Start-Process -FilePath $LocalFile.Fullname -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                        }
                                    }
                                Else { # If Not in Files Folder
                                    If ((Split-Path -Path $LocalFile) -eq $DocsFolder) {# If in Docs Folder
                                        If ($Button.Argument) { # If Argument is Present
                                            Try {Start-Process -FilePath $LocalFile.Fullname -ArgumentList $Button.Argument -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                            }
                                        Else { # If Argument is Absent
                                            Try {Start-Process -FilePath $LocalFile.Fullname -WorkingDirectory $LocalFile.DirectoryName -ErrorAction Stop}
                                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                                            }
                                        }
                                    }
                                }                              
                            }
                        }
                Else { # If Not Local File
                    If ($Button.Content) {
                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $WSID $USERID}
                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Content) $ComputerName $USERID}
                        }
                    Else {
                        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $WSID $USERID}
                        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) $($Button.Name) $ComputerName $USERID}            
                        }                    
                    If ($Button.Admin -eq 'N') {
                        If (!$Credentials) { # If Credentials are Absent
                            Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                                $Script:Credentials = $Null
                                Return
                                }
                            }
                        If ($Credentials) { # If Credentials are Present
                            If ($Button.Argument) { # If Argument is Present
                                Try {Start-Process -FilePath $Button.Execute -ArgumentList $Button.Argument -Credential $Credentials -ErrorAction Stop}
                                Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null
                                    $Script:Credentials = $Null
                                    }
                                }
                            Else { # If Argument is Absent
                                Try {Start-Process -FilePath $Button.Execute -Credential $Credentials -ErrorAction Stop}
                                Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null
                                    $Script:Credentials = $Null
                                    }
                                }                                
                            }
                        }
                    Else {
                        If ($Button.Argument) { # If Argument is Present
                            Try {Start-Process -FilePath $Button.Execute -ArgumentList $Button.Argument -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                            }
                        Else { # If Argument is Absent
                            Try {Start-Process -FilePath $Button.Execute -ErrorAction Stop}
                            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Execute Command','Ok','Error') | Out-Null}
                            }
                        }
                    }
                }
            }
        }
    }

Function RightClick($Button) {
    If ($Button.KB) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) "Opened $($Button.KB)" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser $($Button.Tab) "Opened $($Button.KB)" $ComputerName $USERID}
        $Script:Bit32 = $False
        $Script:Bit64 = $False
        If (!$Credentials) { # If Credentials are Absent
            Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                $Script:Credentials = $Null
                Return
                }
            }
        If ($Credentials) { # If Credentials are Present
            If ($Browser -eq "C:\Program Files (x86)\Internet Explorer\iexplore.exe") { # Internet Explorer
                If ($OpenLink -like "*In New Tab*") {
                    If ((Get-Process -name iexplore -ErrorAction SilentlyContinue -IncludeUserName).where({$_.username -and $_.username -like "*DOMAIN\$LocalUser*"})) {
                        Try {Start-Process -WindowStyle Hidden -FilePath "C:\WINDOWS\system32\cmd.exe" -argumentlist "/C start https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)" -Credential $Credentials -ErrorAction Stop}
                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                            $Script:Credentials = $Null
                            }
                        }
                    Else {                    
                        Try {Start-Process -FilePath $Browser -ArgumentList "https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)" -Credential $Credentials -ErrorAction Stop}
                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                            $Script:Credentials = $Null
                            }
                        }
                    }
                Else {
                    Try {Start-Process -FilePath $Browser -ArgumentList "https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)" -Credential $Credentials -ErrorAction Stop}
                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                        $Script:Credentials = $Null
                        }                            
                    }                       
                }
            If ($Browser -eq "C:\Program Files (x86)\Google\Chrome\Application\chrome.exe") { # Google Chrome
                If ($OpenLink -like "*In New Tab*") {
                    If (Get-Process chrome -ErrorAction SilentlyContinue) {
                        Try {Start-Process -FilePath $Browser -ArgumentList "https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)",'--profile-directory="Default"','--allow-no-sandbox-job' -Credential $Credentials -ErrorAction Stop}
                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                            $Script:Credentials = $Null
                            }                             
                        }
                    Else {
                        Try {Start-Process -FilePath $Browser -ArgumentList "https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)",'--profile-directory="Default"' -Credential $Credentials -ErrorAction Stop}
                        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                            $Script:Credentials = $Null
                            }                            
                        }
                    }
                Else {
                    Try {Start-Process -FilePath $Browser -ArgumentList "https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)",'--profile-directory="Default"','--new-window' -Credential $Credentials -ErrorAction Stop}
                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                        $Script:Credentials = $Null
                        }                             
                    }
                }
            If ($Browser -eq "C:\Program Files (x86)\Mozilla Firefox\firefox.exe") { # Mozilla FireFox
                If ($OpenLink -like "*In New Tab*") {
                    Try {Start-Process -FilePath $Browser -ArgumentList "-new-tab","https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)" -Credential $Credentials -ErrorAction Stop}
                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                        $Script:Credentials = $Null
                        }
                    }
                Else {
                    Try {Start-Process -FilePath $Browser -ArgumentList "-new-window","https://itsmnow.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3D$($Button.KB)" -Credential $Credentials -ErrorAction Stop}
                    Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Cannot Open Weblink','OK','Error') | Out-Null
                        $Script:Credentials = $Null
                        }
                    }                       
                }                                      
            }
        }
    }

Function GetInfo($Target){
    If ($Target) {
        $Script:UserADEsc = $Null
        $Target = ($Target).Replace(' ','')
        #$Esc01LastThreeTextBox.Text = ($Esc01LastThreeTextBox.Text).Replace(' ','')
        #$SqlConnectionLCM.Open()
        $SqlCmdLCM.CommandText = "SELECT * FROM YOURVIEW('$($Target)','$($Esc01LastThreeTextBox.Text)')"
        $SqlDataSetLCM.Clear()
        $SqlAdapterLCM.Fill($SqlDataSetLCM) | Out-Null
        #$SqlConnectionLCM.Close()
        If ($SqlDataSetLCM.Tables.WorkstationName -ne $Null) {
            $Esc01ComputerNameLabel2.Content = $SqlDataSetLCM.Tables.WorkstationName
            $Esc01ComputerNameLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerNameLabel2.Content = "Missing From DB"
            $Esc01ComputerNameLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.ServerName -ne $Null) {
            $Esc01ComputerServerLabel2.Content = $SqlDataSetLCM.Tables.ServerName
            $Esc01ComputerServerLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerServerLabel2.Content = "Missing From DB"
            $Esc01ComputerServerLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.ServerName -ne $Null) {$Esc02IDFTextBox.Text = $SqlDataSetLCM.Tables.ServerName}
        If ($SqlDataSetLCM.Tables.FSPESP -ne $Null) {
            $Esc01ComputerFSPLabel2.Content = $SqlDataSetLCM.Tables.FSPESP
            $Esc01ComputerFSPLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerFSPLabel2.Content = "Missing From DB"
            $Esc01ComputerFSPLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.Make -ne $Null) {
            $Esc01ComputerMakeLabel2.Content = $SqlDataSetLCM.Tables.Make
            $Esc01ComputerMakeLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerMakeLabel2.Content = "Missing From DB"
            $Esc01ComputerMakeLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.Model -ne $Null) {
            $Esc01ComputerModelLabel2.Content = $SqlDataSetLCM.Tables.Model
            $Esc01ComputerModelLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerModelLabel2.Content = "Missing From DB"
            $Esc01ComputerModelLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.SerialNumber -ne $Null) {
            $Esc01ComputerSerialLabel2.Content = $SqlDataSetLCM.Tables.SerialNumber
            $Esc01ComputerSerialLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerSerialLabel2.Content = "Missing From DB"
            $Esc01ComputerSerialLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.MachineType -ne $Null) {
            $Esc01ComputerTypeLabel2.Content = $SqlDataSetLCM.Tables.MachineType
            $Esc01ComputerTypeLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerTypeLabel2.Content = "Missing From DB"
            $Esc01ComputerTypeLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.WorkstationName -ne $Null) {
            $Esc01ComputerNameLabel2.Tooltip = $SqlDataSetLCM.Tables.WorkstationName
            $Esc01ComputerNameLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerNameLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerNameLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.ServerName -ne $Null) {
            $Esc01ComputerServerLabel2.Tooltip = $SqlDataSetLCM.Tables.ServerName
            $Esc01ComputerServerLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerServerLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerServerLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.ServerName -ne $Null) {$Esc02IDFTextBox.Text = $SqlDataSetLCM.Tables.ServerName}
        If ($SqlDataSetLCM.Tables.FSPESP -ne $Null) {
            $Esc01ComputerFSPLabel2.Tooltip = $SqlDataSetLCM.Tables.FSPESP
            $Esc01ComputerFSPLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerFSPLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerFSPLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.Make -ne $Null) {
            $Esc01ComputerMakeLabel2.Tooltip = $SqlDataSetLCM.Tables.Make
            $Esc01ComputerMakeLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerMakeLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerMakeLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.Model -ne $Null) {
            $Esc01ComputerModelLabel2.Tooltip = $SqlDataSetLCM.Tables.Model
            $Esc01ComputerModelLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerModelLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerModelLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.SerialNumber -ne $Null) {
            $Esc01ComputerSerialLabel2.Tooltip = $SqlDataSetLCM.Tables.SerialNumber
            $Esc01ComputerSerialLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerSerialLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerSerialLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.ImageProfile -ne $Null) {
            $Esc01ComputerImageLabel2.Tooltip = $SqlDataSetLCM.Tables.ImageProfile
            $Esc01ComputerImageLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerImageLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerImageLabel2.Foreground = 'Red'
            }
        If ($SqlDataSetLCM.Tables.MachineType -ne $Null) {
            $Esc01ComputerTypeLabel2.Tooltip = $SqlDataSetLCM.Tables.MachineType
            $Esc01ComputerTypeLabel2.Foreground = 'Black'
            }
        Else {
            $Esc01ComputerTypeLabel2.Tooltip = "Missing From DB"
            $Esc01ComputerTypeLabel2.Foreground = 'Red'
            }
        If ($Target -ne "") {SetFormsUserid -SetUserID $Target} Else {SetFormsUserid -SetUserID ""}
        If ($SqlDataSetLCM.Tables.SerialNumber -ne $Null) {SetFormsSerial -SetSerial $SqlDataSetLCM.Tables.SerialNumber} Else {SetFormsSerial -SetSerial ""}
        If ($SqlDataSetLCM.Tables.Model -ne $Null) {SetFormsModel -SetModel $SqlDataSetLCM.Tables.Model} Else {SetFormsModel -SetModel ""}
        If ($SqlDataSetLCM.Tables.WorkstationName -ne $Null) {SetFormsMachine -SetMachine $SqlDataSetLCM.Tables.WorkstationName} Else {SetFormsMachine -SetMachine ""}
        If ($RetrieveInfo -eq "Full") {
            $Esc01IncCatLabel.Visibility = 'Hidden'
            $Esc01IncCatComboBox.Visibility = 'Hidden'
            $Esc01FormLabel.Visibility = 'Hidden'
            $Esc01FormComboBox.Visibility = 'Hidden'
            $Esc01LoadFormsButton.Visibility = 'Hidden'
            $Esc01PhoneCorrectlabel.Visibility = 'Visible'
            $Esc01PhoneCorrectComboBox.Visibility = 'Visible'
            $Esc01PhoneCorrectComboBox.SelectedIndex = 0
            }
        If (($UserAD) -and ($Target -eq $UserID)) {
            $Esc01CallerNameLabel2.Content = ($($USERAD.displayname).Split(",")[1]).Substring(1)  + " " + $($USERAD.displayname).Split(",")[0]
            If ($USERAD.employeetype -eq "Non-Employee") {$Esc01CallerJobLabel2.Content = "Non-Employee"} Else {$Esc01CallerJobLabel2.Content = "$($USERAD.jobfamilyname)"}
            If ($USERAD.telephonenumber -like "*+*") {$Esc01CallerPhoneLabel2.Content = "$($USERAD.telephonenumber)"} Else {$Esc01CallerPhoneLabel2.Content = "$(($(($USERAD.telephonenumber) -replace "\D+").Insert(3,'.')).Insert(7,'.'))"}
            $Esc01CallerMailLabel2.Content = "$($USERAD.postofficebox)"
            $Esc01CallerDeptLabel2.Content = "$($USERAD.costcenterdescription)"
            $Esc01CallerCostLabel2.Content = ("$($USERAD.company)" + "$($USERAD.department)").Replace(' ','')
            $Esc01CallerEmailLabel2.Content = "$($USERAD.mail)"
            $Esc01CallerNameLabel2.Tooltip = ($($USERAD.displayname).Split(",")[1]).Substring(1)  + " " + $($USERAD.displayname).Split(",")[0]
            $Esc01CallerJobLabel2.Tooltip = "$($USERAD.jobfamilyname)"
            $Esc01CallerPhoneLabel2.Tooltip = "$($USERAD.telephonenumber)"
            $Esc01CallerMailLabel2.Tooltip = "$($USERAD.postofficebox)"
            $Esc01CallerDeptLabel2.Tooltip = "$($USERAD.costcenterdescription)"
            $Esc01CallerCostLabel2.Tooltip = ("$($USERAD.company)" + "$($USERAD.department)").Replace(' ','')
            $Esc01CallerEmailLabel2.Tooltip = "$($USERAD.mail)"
            SetFormsAddress -SetAddress $UserAD.street
            SetFormsZip -SetZip $UserAD.postalcode
            SetFormsState -SetState $UserAD.st
            SetFormsEntRole -SetEntRole $UserAD.description
            SetFormsCity -SetCity $UserAD.l            
            If (!$ManagerAD) {
                Try {$ManagerAD = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
                    PageSize = 1000
                    Filter = "(&(objectCategory=User)(SAMAccountName=$($UserAD.managerpreferredid)))"
                    SearchScope = 'Subtree'
                    SearchRoot = 'LDAP://YOURDOMAIN'
                    }).FindAll().Properties}
                Catch {$Script:ManagerAD = $Null}
                }
            If ($ManagerAD) {
                $Script:ManagerPhone = "$($ManagerAD.telephonenumber)"
                SetFormsManagerName -SetManagerName (($($ManagerAD.displayname).Split(",")[1]).Substring(1)  + " " + $($ManagerAD.displayname).Split(",")[0])
                SetFormsManagerNumber -SetManagerNumber "$($ManagerAD.telephonenumber)"                
                }
            $Esc01CallerNameLabel2.Foreground = 'Black'
            $Esc01CallerJobLabel2.Foreground = 'Black'
            $Esc01CallerPhoneLabel2.Foreground = 'Black'
            $Esc01CallerMailLabel2.Foreground = 'Black'
            $Esc01CallerDeptLabel2.Foreground = 'Black'
            $Esc01CallerCostLabel2.Foreground = 'Black'
            $Esc01CallerEmailLabel2.Foreground = 'Black'            
            }
        If ((!$UserAD) -or ($Target -ne $UserID)) {
            Try {$Script:UserADEsc = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
                    PageSize = 1000
                    Filter = "(&(objectCategory=User)(SAMAccountName=$($Target)))"
                    SearchScope = 'Subtree'
                    SearchRoot = 'LDAP://YOURDOMAIN'
                    }).FindAll().Properties}
            Catch {$Script:UserADEsc = $Null}
            If ($UserADEsc) {
                $Esc01CallerNameLabel2.Content = ($($UserADEsc.displayname).Split(",")[1]).Substring(1)  + " " + $($UserADEsc.displayname).Split(",")[0]
                If ($UserADEsc.employeetype -eq "Non-Employee") {$Esc01CallerJobLabel2.Content = "Non-Employee"} Else {$Esc01CallerJobLabel2.Content = "$($UserADEsc.jobfamilyname)"}
                If ($UserADEsc.telephonenumber -like "*+*") {$Esc01CallerPhoneLabel2.Content = "$($UserADEsc.telephonenumber)"} Else {$Esc01CallerPhoneLabel2.Content = "$(($(($UserADEsc.telephonenumber) -replace "\D+").Insert(3,'.')).Insert(7,'.'))"}
                $Esc01CallerMailLabel2.Content = "$($UserADEsc.postofficebox)"
                $Esc01CallerDeptLabel2.Content = "$($UserADEsc.costcenterdescription)"
                $Esc01CallerCostLabel2.Content = ("$($UserADEsc.company)" + "$($UserADEsc.department)").Replace(' ','')
                $Esc01CallerEmailLabel2.Content = "$($UserADEsc.mail)"
                $Esc01CallerNameLabel2.Tooltip = ($($UserADEsc.displayname).Split(",")[1]).Substring(1)  + " " + $($UserADEsc.displayname).Split(",")[0]
                $Esc01CallerJobLabel2.Tooltip = "$($UserADEsc.jobfamilyname)"
                $Esc01CallerPhoneLabel2.Tooltip = "$($UserADEsc.telephonenumber)"
                $Esc01CallerMailLabel2.Tooltip = "$($UserADEsc.postofficebox)"
                $Esc01CallerDeptLabel2.Tooltip = "$($UserADEsc.costcenterdescription)"
                $Esc01CallerCostLabel2.Tooltip = ("$($UserADEsc.company)" + "$($UserADEsc.department)").Replace(' ','')
                $Esc01CallerEmailLabel2.Tooltip = "$($UserADEsc.mail)"
                SetFormsAddress -SetAddress $UserADEsc.street
                SetFormsZip -SetZip $UserADEsc.postalcode
                SetFormsState -SetState $UserADEsc.st
                SetFormsEntRole -SetEntRole $UserADEsc.description
                SetFormsCity -SetCity $UserADEsc.l
                Try {$Script:ManagerADEsc = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
                    PageSize = 1000
                    Filter = "(&(objectCategory=User)(SAMAccountName=$($UserADEsc.managerpreferredid)))"
                    SearchScope = 'Subtree'
                    SearchRoot = 'LDAP://YOURDOMAIN'
                    }).FindAll().Properties}
                Catch {$Script:ManagerADEsc = $Null}
                If ($ManagerADEsc) {
                    $Script:ManagerPhone = "$($ManagerADEsc.telephonenumber)"
                    SetFormsManagerName -SetManagerName (($($ManagerADEsc.displayname).Split(",")[1]).Substring(1)  + " " + $($ManagerADEsc.displayname).Split(",")[0])
                    SetFormsManagerNumber -SetManagerNumber "$($ManagerADEsc.telephonenumber)"                
                    }
                $Esc01CallerNameLabel2.Foreground = 'Black'
                $Esc01CallerJobLabel2.Foreground = 'Black'
                $Esc01CallerPhoneLabel2.Foreground = 'Black'
                $Esc01CallerMailLabel2.Foreground = 'Black'
                $Esc01CallerDeptLabel2.Foreground = 'Black'
                $Esc01CallerCostLabel2.Foreground = 'Black'
                $Esc01CallerEmailLabel2.Foreground = 'Black'            
                }
            }
        If ((!$UserADEsc) -and (!$UserAD)) {
            $Esc01CallerNameLabel2.Content = "Missing From AD"
            $Esc01CallerJobLabel2.Content = "Missing From AD"
            $Esc01CallerPhoneLabel2.Content = "Missing From AD"
            $Esc01CallerMailLabel2.Content = "Missing From AD"
            $Esc01CallerDeptLabel2.Content = "Missing From AD"
            $Esc01CallerCostLabel2.Content = "Missing From AD"
            $Esc01CallerEmailLabel2.Content = "Missing From AD"
            $Esc01CallerNameLabel2.Foreground = 'Red'
            $Esc01CallerJobLabel2.Foreground = 'Red'
            $Esc01CallerPhoneLabel2.Foreground = 'Red'
            $Esc01CallerMailLabel2.Foreground = 'Red'
            $Esc01CallerDeptLabel2.Foreground = 'Red'
            $Esc01CallerCostLabel2.Foreground = 'Red'
            $Esc01CallerEmailLabel2.Foreground = 'Red'
            }
        # MLO Check
        If (($UserAD.title -like "*YOURROLE*") -or ($UserADEsc.title -like "*YOURROLE*")) {
            $Esc02AssigneeComboBox.Text = "YOURESCALTIONGROUP"
            [System.Windows.MessageBox]::Show("User: $($Target) IS a YOURSPECIALUSERTYPE!`n`nPlease send any escalations to YOURESCALTIONGROUP.`n`nPress OK to continue.",'Verify WSID','Ok','Error') | Out-Null
            }
        $Esc01GetButton.IsDefault = $False
        }
    Else {
        # Create VB Popup to alert that there is no preferred ID
        }
    $Script:RetrieveInfo = $Null    
    }

Function ClearForms {
    $Esc02IncDescTextbox.Text = $Null
    $Esc02ErrorMessageTextbox.Text = $Null
    $Esc02TroubleTextBox.Text = $Null
    $Esc02MachineTextBox.Text = $Null
    $Esc02IDFTextBox.Text = $Null
    $Esc02DateTextBox.Text = $Null
    $Esc02ServiceRecTextbox.Text = $Null
    $Esc02OtherTZTextBox.Text = $Null
    $Esc02AltNameTextBox.Text = $Null
    $Esc02AltNumberTextBox.Text = $Null
    $Esc02NumberUsersOtherTextBox.Text = $Null
    $Esc02CritIssueTextBox.Text = $Null
    $Esc02WorkAroundTextBox.Text = $Null
    $Esc02OOCExtEmailTextbox.Text = $Null
    $EscC1SiteCodeTextBox.Text = $Null
    $EscC1InteractionTextbox.Text = $Null
    $EscC1ComputerTextbox.Text = $Null
    $EscC1OldSerialTextbox.Text = $Null
    $EscC1NewSerialTextbox.Text = $Null
    $EscC2IssueDateTextBox.Text = $Null
    $EscC2PhoneNumberTextbox.Text = $Null
    $EscC2TraderIDTextbox.Text = $Null
    $EscC2IssueDescTextBox.Text = $Null
    $EscC3PrimaryPhoneNumberTextbox.Text = $Null
    $EscC3IssueDescTextBox.Text = $Null
    $EscC3CPrimaryontactTextbox.Text = $Null
    $EscC3SecondaryContactTextbox.Text = $Null
    $EscC3SecondaryPhoneNumberTextbox.Text = $Null
    $EscC3AssessmentTextBox.Text = $Null
    $EscC3CAssigneeTextbox.Text = $Null
    $EscC4RebootTimeTextbox.Text = $Null
    $EscC4EnvTextbox.Text = $Null
    $EscC4TierTextbox.Text = $Null
    $EscC4ServerNamesTextBox.Text = $Null
    $EscC4OtherTZTextBox.Text = $Null
    $EscC5PhoneNumberTextbox.Text = $Null
    $EscC5ResultDescTextBox.Text = $Null
    $EscC5ClientNameTextbox.Text = $Null
    $EscC5IncidentTextbox.Text = $Null
    $EscC5AddTextBox.Text = $Null
    $EscC6PhoneNumberTextbox.Text = $Null
    $EscC6AppReinstallTextBox.Text = $Null
    $EscC6ClientNameTextbox.Text = $Null
    $EscC6IncidentTextbox.Text = $Null
    $EscC6AddTextBox.Text = $Null
    $EscC6DeptNameTextbox.Text = $Null
    $EscC6MachineTextbox.Text = $Null
    $EscC6UserIDTextbox.Text = $Null
    $EscC6ReinstallDateTextbox.Text = $Null
    $EscC6ADGroupTextbox.Text = $Null
    $EscC6ErrorTextbox.Text = $Null
    $Esc1EnvTextBox.Text = $Null
    $Esc1URLTextBox.Text = $Null
    $Esc1AppTextBox.Text = $Null
    $Esc1IconTextBox.Text = $Null
    $Esc1ICATextBox.Text = $Null
    $Esc1PrnTextBox.Text = $Null
    $Esc1AddTextBox.Text = $Null
    $Esc2AppTextBox.Text = $Null
    $Esc2DataNameTextBox.Text = $Null
    $Esc2OtherTextBox.Text = $Null
    $Esc2AddTextBox.Text = $Null
    $Esc2ServerNameTextBox.Text = $Null
    $Esc2ServerIPTextBox.Text = $Null
    $Esc2BranchIDTextBox.Text = $Null
    $Esc2PingResultsTextBox.Text = $Null
    $Esc2LobbyIDTextBox.Text = $Null
    $Esc2AddressTextBox.Text = $Null
    $Esc2CityTextBox.Text = $Null
    $Esc2StateTextBox.Text = $Null
    $Esc2ZipTextBox.Text = $Null
    $Esc2CubeTextBox.Text = $Null
    $Esc3UserIDTextBox.Text = $Null
    $Esc3AppImpactTextBox.Text = $Null
    $Esc3AddTextBox.Text = $Null
    $Esc3BranchIDTextBox.Text = $Null
    $Esc3LobbyIDTextBox.Text = $Null
    $Esc3AddressTextBox.Text = $Null
    $Esc3CityTextBox.Text = $Null
    $Esc3StateTextBox.Text = $Null
    $Esc3ZipTextBox.Text = $Null
    $Esc3CubeTextBox.Text = $Null
    $Esc3AppVersionTextBox.Text = $Null
    $Esc3AppAccessTextBox.Text = $Null
    $Esc3AppFailTextBox.Text = $Null
    $Esc4BrowserTextBox.Text = $Null
    $Esc4AddTextBox.Text = $Null
    $Esc4BranchIDTextBox.Text = $Null
    $Esc4AddressTextBox.Text = $Null
    $Esc4CityTextBox.Text = $Null
    $Esc4StateTextBox.Text = $Null
    $Esc4ZipTextBox.Text = $Null
    $Esc4CubeTextBox.Text = $Null
    $Esc4AppImpactTextBox.Text = $Null
    $Esc4ServerTroubleTextBox.Text = $Null
    $Esc4URLTextBox.Text = $Null
    $Esc4ServerIPTextBox.Text = $Null
    $Esc4FunctionTextBox.Text = $Null
    $Esc4MainframeTextBox.Text = $Null
    $Esc5UserIDTextBox.Text = $Null
    $Esc5AddTextBox.Text = $Null
    $Esc5BranchIDTextBox.Text = $Null
    $Esc5AddressTextBox.Text = $Null
    $Esc5CityTextBox.Text = $Null
    $Esc5StateTextBox.Text = $Null
    $Esc5ZipTextBox.Text = $Null
    $Esc5CubeTextBox.Text = $Null
    $Esc5CourseNameTextBox.Text = $Null
    $Esc5CourseModTextBox.Text = $Null
    $Esc5CompletionTextBox.Text = $Null
    $Esc5LessonTextBox.Text = $Null
    $Esc5CourseCodeTextBox.Text = $Null
    $Esc5PageNumberTextBox.Text = $Null
    $Esc5FunctionTextBox.Text = $Null
    $Esc6UserIDTextBox.Text = $Null
    $Esc6AddTextBox.Text = $Null
    $Esc6BranchIDTextBox.Text = $Null
    $Esc6AddressTextBox.Text = $Null
    $Esc6CityTextBox.Text = $Null
    $Esc6StateTextBox.Text = $Null
    $Esc6ZipTextBox.Text = $Null
    $Esc6CubeTextBox.Text = $Null
    $Esc6BrowserTextBox.Text = $Null
    $Esc6MailServerTextBox.Text = $Null
    $Esc6NotesVerTextBox.Text = $Null
    $Esc6MailSizeTextBox.Text = $Null
    $Esc6TroubleTextBox.Text = $Null
    $Esc7UserIDTextBox.Text = $Null
    $Esc7AddTextBox.Text = $Null
    $Esc7BranchIDTextBox.Text = $Null
    $Esc7AddressTextBox.Text = $Null
    $Esc7CityTextBox.Text = $Null
    $Esc7StateTextBox.Text = $Null
    $Esc7ZipTextBox.Text = $Null
    $Esc7CubeTextBox.Text = $Null
    $Esc7ScreenNumberTextBox.Text = $Null
    $Esc7AffectedTextBox.Text = $Null
    $Esc7TermIDTextBox.Text = $Null
    $Esc7AppFailTextBox.Text = $Null
    $Esc7CustomerNamesTextBox.Text = $Null
    $Esc7AccountNumberTextBox.Text = $Null
    $Esc8ShippingTextBox.Text = $Null
    $Esc8BranchIDTextBox.Text = $Null
    $Esc8AddressTextBox.Text = $Null
    $Esc8CityTextBox.Text = $Null
    $Esc8StateTextBox.Text = $Null
    $Esc8ZipTextBox.Text = $Null
    $Esc8CubeTextBox.Text = $Null
    $Esc8DeviceNumberTextBox.Text = $Null
    $Esc8DeviceModelTextBox.Text = $Null
    $Esc8ProblemTextBox.Text = $Null
    $Esc8DateSynchedlTextBox.Text = $Null
    $Esc8OtherProviderTextBox.Text = $Null
    $Esc8OtherBrandTextBox.Text = $Null
    $Esc9AdditionalTextBox.Text = $Null
    $Esc9ISPTextBox.Text = $Null
    $Esc9VPNModelTextBox.Text = $Null
    $Esc9VersionTextBox.Text = $Null
    $Esc9TokenTextBox.Text = $Null
    $Esc9CubeTextBox.Text = $Null
    $Esc9DateSynchedTextBox.Text = $Null
    $Esc9ComputerOSTextBox.Text = $Null
    $EscA1ArgoVersionTextBox.Text = $Null
    $EscA1AddTextBox.Text = $Null
    $EscA1BranchIDTextBox.Text = $Null
    $EscA1AddressTextBox.Text = $Null
    $EscA1CityTextBox.Text = $Null
    $EscA1StateTextBox.Text = $Null
    $EscA1ZipTextBox.Text = $Null
    $EscA1CubeTextBox.Text = $Null
    $EscA1ReportIDTextBox.Text = $Null
    $EscA1LobbyIDTextBox.Text = $Null
    $EscA1ServerIPTextBox.Text = $Null
    $EscA1AppFailTextBox.Text = $Null
    $EscA1CustomerNamesTextBox.Text = $Null
    $EscA1AccountNumberTextBox.Text = $Null
    $EscA1ServerTroubleTextBox.Text = $Null
    $EscA1GatewayIPTextBox.Text = $Null
    $EscA1BranchSiteCodeTextBox.Text = $Null
    $EscA1BranchNameTextBox.Text = $Null
    $EscA1ServerNameTextBox.Text = $Null
    $EscA1BranchPhoneTextBox.Text = $Null
    $EscA2AppImpactedTextBox.Text = $Null
    $EscA2URLTextBox.Text = $Null
    $EscA2UserIDTextBox.Text = $Null
    $EscA2ReportNameTextBox.Text = $Null
    $EscA2FunctionTextBox.Text = $Null
    $EscA2RequestIDTextBox.Text = $Null
    $EscA2AddTextBox.Text = $Null
    $EscA2PartnerTextBox.Text = $Null
    $EscA2FlashTextBox.Text = $Null
    $EscA3AppTextBox.Text = $Null
    $EscA3IDTextBox.Text = $Null
    $EscA3AddTextBox.Text = $Null
    $EscA4HWMakeOtherTextBox.Text = $Null
    $EscA4AddTextBox.Text = $Null
    $EscA4BranchIDTextBox.Text = $Null
    $EscA4AddressTextBox.Text = $Null
    $EscA4CityTextBox.Text = $Null
    $EscA4StateTextBox.Text = $Null
    $EscA4ZipTextBox.Text = $Null
    $EscA4CubeTextBox.Text = $Null
    $EscA4MachineTextBox.Text = $Null
    $EscA4BranchPhoneTextBox.Text = $Null
    $EscA4JackIDTextBox.Text = $Null
    $EscA4ManagerNameTextBox.Text = $Null
    $EscA4ManagerNumberTextBox.Text = $Null
    $EscA4ComputerModelTextBox.Text = $Null
    $EscA4HPComputerSerialTextBox.Text = $Null
    $EscA4MiscTextBox.Text = $Null
    $EscA4MouseMakeTextBox.Text = $Null
    $EscA4MouseModelTextBox.Text = $Null
    $EscA4MouseSerialTextBox.Text = $Null
    $EscA4KeyboardMakeTextBox.Text = $Null
    $EscA4KeyboardModelTextBox.Text = $Null
    $EscA4KeyboardSerialTextBox.Text = $Null
    $EscA4MonitorMakeTextBox.Text = $Null
    $EscA4MonitorModelTextBox.Text = $Null
    $EscA4MonitorSerialTextBox.Text = $Null
    $EscA4MonitorTypeTextBox.Text = $Null
    $EscA4BatteryTextBox.Text = $Null
    $EscA4CableLockTextBox.Text = $Null
    $EscA4DockMakeTextBox.Text = $Null
    $EscA4DockPartTextBox.Text = $Null
    $EscA4DockSerialTextBox.Text = $Null
    $EscA4EpadMakeTextBox.Text = $Null
    $EscA4EpadModelTextBox.Text = $Null
    $EscA4EpadSerialTextBox.Text = $Null
    $EscA4IBMComputerSerialTextBox.Text = $Null
    $EscA4IBMModelTypeTextBox.Text = $Null
    $EscA4DELLComputerSerialTextBox.Text = $Null
    $EscA4DELLServiceCodeTextBox.Text = $Null
    $EscA5AddTextBox.Text = $Null
    $EscA5BranchIDTextBox.Text = $Null
    $EscA5AddressTextBox.Text = $Null
    $EscA5CityTextBox.Text = $Null
    $EscA5StateTextBox.Text = $Null
    $EscA5ZipTextBox.Text = $Null
    $EscA5CubeTextBox.Text = $Null
    $EscA5ServerNameTextBox.Text = $Null
    $EscA5ServerModelTextBox.Text = $Null
    $EscA5ServerSerialTextBox.Text = $Null
    $EscA5LobbyIDTextBox.Text = $Null
    $EscA5ServerIPTextBox.Text = $Null
    $EscA5RouterIPTextBox.Text = $Null
    $EscA5TroubleTextBox.Text = $Null
    $EscA7AddTextBox.Text = $Null
    $EscA7ServerNameTextBox.Text = $Null
    $EscA7ServerIPTextBox.Text = $Null
    $EscA7BranchIDTextBox.Text = $Null
    $EscA7PingResultsTextBox.Text = $Null
    $EscA7SiteCodeTextBox.Text = $Null
    $EscA7AddressTextBox.Text = $Null
    $EscA7CityTextBox.Text = $Null
    $EscA7StateTextBox.Text = $Null
    $EscA7ZipTextBox.Text = $Null
    $EscA7CubeTextBox.Text = $Null
    $EscA7JackIDTextBox.Text = $Null
    $EscA7GatewayIPTextBox.Text = $Null
    $EscA7TimeTextBox.Text = $Null
    $EscA7FrequencyTextBox.Text = $Null
    $EscA7AffectedTextBox.Text = $Null
    $EscA7OtherAffectedTextBox.Text = $Null
    $EscA7BankersTextBox.Text = $Null
    $EscA7TellersTextBox.Text = $Null
    $EscA8AddTextBox.Text = $Null
    $EscA8BranchIDTextBox.Text = $Null
    $EscA8AddressTextBox.Text = $Null
    $EscA8CityTextBox.Text = $Null
    $EscA8StateTextBox.Text = $Null
    $EscA8ZipTextBox.Text = $Null
    $EscA8CubeTextBox.Text = $Null
    $EscA8ReceiptsYesTextBox.Text = $Null
    $EscA8BranchPhoneTextBox.Text = $Null
    $EscA8PrinterModelTextBox.Text = $Null
    $EscA8PrinterSerialTextBox.Text = $Null
    $EscA8LobbyIDTextBox.Text = $Null
    $EscA8BranchSiteTextBox.Text = $Null
    $EscA8BranchNameTextBox.Text = $Null
    $EscA8FrequencyTextBox.Text = $Null
    $EscA9AddTextBox.Text = $Null
    $EscA9BranchIDTextBox.Text = $Null
    $EscA9AddressTextBox.Text = $Null
    $EscA9CityTextBox.Text = $Null
    $EscA9StateTextBox.Text = $Null
    $EscA9ZipTextBox.Text = $Null
    $EscA9CubeTextBox.Text = $Null
    $EscA9BranchPhoneTextBox.Text = $Null
    $EscA9PrinterNameTextBox.Text = $Null
    $EscA9ManagerNameTextBox.Text = $Null
    $EscA9ManagerPhoneTextBox.Text = $Null
    $EscA9JackIDTextBox.Text = $Null
    $EscA9PrintServerTextBox.Text = $Null
    $EscA9PrinterLocationTextBox.Text = $Null
    $EscA9PrinterSerialTextBox.Text = $Null
    $EscA9PrinterModelTextBox.Text = $Null
    $EscA9PrinterModelTypeTextBox.Text = $Null
    $EscA9PrinterPingTextBox.Text = $Null
    $EscA9MainframeDestTextBox.Text = $Null
    $EscA9MainframePrintStatusTextBox.Text = $Null
    $EscA9InboundFaxTextBox.Text = $Null
    $EscA9PrinterTroubleTextBox.Text = $Null
    $EscA9ChangeTonerTextBox.Text = $Null
    $EscA9SecondQueueTextBox.Text = $Null
    $EscA9FaxNumberTextBox.Text = $Null
    $EscA9AccuRouteTextBox.Text = $Null
    $EscB1FullPathTextBox.Text = $Null
    $EscB1CoworkerTextBox.Text = $Null
    $EscB1DriveLetterTextBox.Text = $Null
    $EscB1LastTimeTextBox.Text = $Null
    $EscB1AddTextBox.Text = $Null
    $EscB1EntRoleTextBox.Text = $Null
    $EscB1AffectedFilesTextBox.Text = $Null
    $EscB2UserIDTextBox.Text = $Null
    $EscB2OtherTextBox.Text = $Null
    $EscB2UnixTextBox.Text = $Null
    $EscB2EmerIDTextBox.Text = $Null
    $EscB2AddTextBox.Text = $Null
    $EscB2RegionTextBox.Text = $Null
    $EscB2PingResultsTextBox.Text = $Null
    $EscB2LastSignonTextBox.Text = $Null
    $EscB2LastResetTextBox.Text = $Null
    $EscB3AddTextBox.Text = $Null
    $EscB3Date1TextBox.Text = $Null
    $EscB3ServerNameTextBox.Text = $Null
    $EscB3DirPathTextBox.Text = $Null
    $EscB3FilesTextBox.Text = $Null
    $EscB3RestoreServerTextBox.Text = $Null
    $EscB3Alt2TextBox.Text = $Null
    $EscB3Alt3TextBox.Text = $Null
    $EscB3Alt4TextBox.Text = $Null
    $EscB4AddTextBox.Text = $Null
    $EscB4BranchIDTextBox.Text = $Null
    $EscB4AddressTextBox.Text = $Null
    $EscB4CityTextBox.Text = $Null
    $EscB4StateTextBox.Text = $Null
    $EscB4ZipTextBox.Text = $Null
    $EscB4CubeTextBox.Text = $Null
    $EscB4ServerNameTextBox.Text = $Null
    $EscB4ServerIPTextBox.Text = $Null
    $EscB4RouterIPTextBox.Text = $Null
    $EscB4PingResultsTextBox.Text = $Null
    $EscB4RebootTextBox.Text = $Null
    $EscB5AdditionalTextBox.Text = $Null
    $EscB5DSNTextBox.Text = $Null
    $EscB5FileNameTextBox.Text = $Null
    $EscB5JobNameTextBox.Text = $Null
    $EscB5BusinessNameTextBox.Text = $Null
    $EscB5DollarTextBox.Text = $Null
    $EscB5ItemTextBox.Text = $Null
    $EscB6AddTextBox.Text = $Null
    $EscB6CubeTextBox.Text = $Null
    $EscB6PhoneNumberTextBox.Text = $Null
    $EscB6PortNumbersTextBox.Text = $Null
    $EscB6IVRNameTextBox.Text = $Null
    $EscB6AccountNumbersTextBox.Text = $Null
    $EscB6MainframeTextBox.Text = $Null
    $EscB6IVRPingResultsTextBox.Text = $Null
    $EscB7BranchIDTextBox.Text = $Null
    $EscB7AddressTextBox.Text = $Null
    $EscB7CityTextBox.Text = $Null
    $EscB7StateTextBox.Text = $Null
    $EscB7ZipTextBox.Text = $Null
    $EscB7CubeTextBox.Text = $Null
    $EscB7CiscoMACTextBox.Text = $Null
    $EscB7ModelTextBox.Text = $Null
    $EscB7SerialTextBox.Text = $Null
    $EscB7PhoneNumbersTextBox.Text = $Null
    $EscB7SiteCodeTextBox.Text = $Null
    $EscB7DescTextBox.Text = $Null
    $EscB7DialedFromTextBox.Text = $Null
    $EscB7DialedToTextBox.Text = $Null
    $EscB7PhoneDisplayTextBox.Text = $Null
    $EscB7TimeCalledTextBox.Text = $Null
    $EscB7ColorTextBox.Text = $Null
    $EscB7SwapResultTextBox.Text = $Null
    $EscB7OtherTypeTextBox.Text = $Null
    $EscB8BranchIDTextBox.Text = $Null
    $EscB8AddressTextBox.Text = $Null
    $EscB8CityTextBox.Text = $Null
    $EscB8StateTextBox.Text = $Null
    $EscB8ZipTextBox.Text = $Null
    $EscB8CubeTextBox.Text = $Null
    $EscB8PhoneNumbersTextBox.Text = $Null
    $EscB8SiteCodeTextBox.Text = $Null
    $EscB8AddTextBox.Text = $Null
    $EscB8PhoneSystemTextBox.Text = $Null
    $EscB8VMSystemTextBox.Text = $Null
    $EscB8RecentInstallTextBox.Text = $Null
    $EscB8AccessVMTextBox.Text = $Null
    $EscB8ExpRetrieveTextBox.Text = $Null
    $EscB8ExpCallingTextBox.Text = $Null
    $EscB9PhoneNumbersTextBox.Text = $Null
    $EscB9MeetingDateTextBox.Text = $Null
    $EscB9MeetingTimeTextBox.Text = $Null
    $EscB9WebexURLTextBox.Text = $Null
    $EscB9OtherTZTextBox.Text = $Null
    $EscB9UserIDTextbox.Text = $Null
    $EscB9NumberUsedTextBox.Text = $Null
    $EscB9DeviceTextBox.Text = $Null
    $EscB9NumberCalledToTextbox.Text = $Null
    $EscB9CallbackNumberTextbox.Text = $Null
    $EscB9CityCalledFromTextbox.Text = $Null
    $EscB9StateCalledFromTextbox.Text = $Null
    $EscB9IssueDescTextBox.Text = $Null
    $EscX1ResultTextBox.Text = $Null
    $EscX2ResultTextBox.Text = $Null
    $Esc01PreferredIDTextBox.Text = $Null
    $Esc01LastThreeTextBox.Text = $Null
    $Esc01PhoneNameTextBox.Text = $Null
    $Esc02AssigneeComboBox.Text = $Null
    $EscC2AssigneeComboBox.Text = $Null
    $Esc8BrandComboBox.Text = $Null
    $Esc8OwnerComboBox.Text = $Null
    $EscA4AccessoryComboBox.Text = $Null
    $EscB7PhoneTypeComboBox.Text = $Null
    $Esc01PhoneCorrectComboBox.Text = $Null
    $Esc01IncCatComboBox.Text = $Null
    $Esc01FormComboBox.Text = $Null
    $Esc01CallerNameLabel2.Content = $Null
    $Esc01CallerJobLabel2.Content = $Null
    $Esc01CallerPhoneLabel2.Content = $Null
    $Esc01CallerMailLabel2.Content = $Null
    $Esc01CallerDeptLabel2.Content = $Null
    $Esc01CallerCostLabel2.Content = $Null
    $Esc01CallerEmailLabel2.Content = $Null
    $Esc01ComputerNameLabel2.Content = $Null
    $Esc01ComputerServerLabel2.Content = $Null
    $Esc01ComputerFSPLabel2.Content = $Null
    $Esc01ComputerMakeLabel2.Content = $Null
    $Esc01ComputerModelLabel2.Content = $Null
    $Esc01ComputerSerialLabel2.Content = $Null
    $Esc01ComputerTypeLabel2.Content = $Null
    }

Function SetFormsUserid($SetUserID) {
    $EscC6UserIDTextbox.Text = $SetUserID
    $Esc3UserIDTextBox.Text = $SetUserID
    $Esc5UserIDTextBox.Text = $SetUserID
    $Esc6UserIDTextBox.Text = $SetUserID
    $Esc7UserIDTextBox.Text = $SetUserID
    $EscA2UserIDTextBox.Text = $SetUserID
    $EscB2UserIDTextBox.Text = $SetUserID
    $Esc02MachineTextBox.Text = $SetUserID
    $EscC6MachineTextbox.Text = $SetUserID
    $EscA4MachineTextBox.Text = $SetUserID
    }

Function SetFormsSerial($SetSerial) {
    $EscA4HPComputerSerialTextBox.Text = $SetSerial
    $EscA4IBMComputerSerialTextBox.Text = $SetSerial
    $EscA4DELLComputerSerialTextBox.Text = $SetSerial
    }

Function SetFormsModel($SetModel) {
    $EscA4ComputerModelTextBox.Text = $SetModel
    }

Function SetFormsMachine($SetMachine) {
    $Esc02MachineTextBox.Text = $SetMachine
    $EscC6MachineTextbox.Text = $SetMachine
    $EscA4MachineTextBox.Text = $SetMachine
    }

Function SetFormsAddress($SetAddress) {
    $Esc2AddressTextBox.Text = $SetAddress
    $Esc3AddressTextBox.Text = $SetAddress
    $Esc4AddressTextBox.Text = $SetAddress
    $Esc5AddressTextBox.Text = $SetAddress
    $Esc6AddressTextBox.Text = $SetAddress
    $Esc7AddressTextBox.Text = $SetAddress
    $Esc8AddressTextBox.Text = $SetAddress
    $EscA1AddressTextBox.Text = $SetAddress
    $EscA4AddressTextBox.Text = $SetAddress
    $EscA5AddressTextBox.Text = $SetAddress
    $EscA7AddressTextBox.Text = $SetAddress
    $EscA8AddressTextBox.Text = $SetAddress
    $EscA9AddressTextBox.Text = $SetAddress
    $EscB4AddressTextBox.Text = $SetAddress
    $EscB7AddressTextBox.Text = $SetAddress
    $EscB8AddressTextBox.Text = $SetAddress
    }

Function SetFormsZip($SetZip) {
    $Esc2ZipTextBox.Text = $SetZip
    $Esc3ZipTextBox.Text = $SetZip
    $Esc4ZipTextBox.Text = $SetZip
    $Esc5ZipTextBox.Text = $SetZip
    $Esc6ZipTextBox.Text = $SetZip
    $Esc7ZipTextBox.Text = $SetZip
    $Esc8ZipTextBox.Text = $SetZip
    $EscA1ZipTextBox.Text = $SetZip
    $EscA4ZipTextBox.Text = $SetZip
    $EscA5ZipTextBox.Text = $SetZip
    $EscA7ZipTextBox.Text = $SetZip
    $EscA8ZipTextBox.Text = $SetZip
    $EscA9ZipTextBox.Text = $SetZip
    $EscB4ZipTextBox.Text = $SetZip
    $EscB7ZipTextBox.Text = $SetZip
    $EscB8ZipTextBox.Text = $SetZip
    }

Function SetFormsState($SetState) {
    $Esc2StateTextBox.Text = $SetState
    $Esc3StateTextBox.Text = $SetState
    $Esc4StateTextBox.Text = $SetState
    $Esc5StateTextBox.Text = $SetState
    $Esc6StateTextBox.Text = $SetState
    $Esc7StateTextBox.Text = $SetState
    $Esc8StateTextBox.Text = $SetState
    $EscA1StateTextBox.Text = $SetState
    $EscA4StateTextBox.Text = $SetState
    $EscA5StateTextBox.Text = $SetState
    $EscA7StateTextBox.Text = $SetState
    $EscA8StateTextBox.Text = $SetState
    $EscA9StateTextBox.Text = $SetState
    $EscB4StateTextBox.Text = $SetState
    $EscB7StateTextBox.Text = $SetState
    $EscB8StateTextBox.Text = $SetState
    }

Function SetFormsEntRole($SetEntRole) {
    $EscB1EntRoleTextBox.Text = $SetEntRole
    }

Function SetFormsCity($SetCity) {
    $Esc2CityTextBox.Text = $SetCity
    $Esc3CityTextBox.Text = $SetCity
    $Esc4CityTextBox.Text = $SetCity
    $Esc5CityTextBox.Text = $SetCity
    $Esc6CityTextBox.Text = $SetCity
    $Esc7CityTextBox.Text = $SetCity
    $Esc8CityTextBox.Text = $SetCity
    $EscA1CityTextBox.Text = $SetCity
    $EscA4CityTextBox.Text = $SetCity
    $EscA5CityTextBox.Text = $SetCity
    $EscA7CityTextBox.Text = $SetCity
    $EscA8CityTextBox.Text = $SetCity
    $EscA9CityTextBox.Text = $SetCity
    $EscB4CityTextBox.Text = $SetCity
    $EscB7CityTextBox.Text = $SetCity
    $EscB8CityTextBox.Text = $SetCity
    }

Function SetFormsManagerName($SetManagerName) {
    $EscA4ManagerNameTextBox.Text = $SetManagerName
    $EscA9ManagerNameTextBox.Text = $SetManagerName
    }

Function SetFormsManagerNumber($SetManagerNumber) {
    $EscA4ManagerNumberTextBox.Text = $SetManagerNumber
    }

Function EscMain {
    # Hide TabControl
    $Esc02tabControl.visibility = 'Hidden'
    # Set ComboBoxes
    $Esc01PhoneCorrectComboBox.SelectedIndex = 0
    $Esc01IncCatComboBox.SelectedIndex = 0
    $Esc01FormComboBox.SelectedIndex = 0
    # Clear Forms
    clearforms
    # Set Tab
    $EscXOtherTab.Header = "TBD"
    # Hide Tabs
    $Esc02GeneralTab.Visibility = 'Hidden'
    $EscXOtherTab.Visibility = 'Hidden'
    $EscXResultTab.Visibility = 'Hidden'
    # Hide Labels, Textboxes, and Comboboxes
    $Esc01PhoneCorrectlabel.Visibility = 'Hidden'
    $Esc01PhoneCorrectComboBox.Visibility = 'Hidden'
    $Esc01FormLabel.Visibility = 'Hidden'
    $Esc01FormComboBox.Visibility = 'Hidden'
    # Hide Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'
    $General_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    # Hide Buttons
    $EscZSubmitButton.Visibility = "Hidden"
    $EscZStartNewButton.Visibility = "Hidden"
    # Show Grid
    $Esc01InfoGrid.Visibility = 'Visible'
    # Set Scrollbar to Top
    $EscScroller.ScrollToTop()
    # Reset Form Size
    $Form_Esc.Height = "252"
    # Set Fields if Escalation Information is Present
    If (($USERID) -and ($WSID) -and ($StartNew -eq $False)) {
        $Esc01PreferredIDTextBox.Text = ($USERID).ToLower()
        $Esc01LastThreeTextBox.Text = $WSID.Substring(($WSID.Replace(' ','')).get_Length()-3)
        GetInfo -Target $USERID.ToLower()
        }
    # Set Switches
    $Script:StartSwitch = $True
    [System.Windows.Forms.Application]::DoEvents()
    }

Function EscGeneral {
    # Hide/Show Grids
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $General_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Show Tab
    $Esc02GeneralTab.Header = "General"
    $Esc02GeneralTab.Visibility = 'Visible'
    # Check StartSwitch
    If ($StartSwitch -eq $True) {
        # Set ComboBoxes
        $Esc02AssigneeComboBox.Text = $Null
        # Set Radio Buttons
        $Esc02ErrorNoRadioButton.IsChecked = $True
        $Esc02OocNoRadioButton.IsChecked = $True
        $Esc02AltWorkRadioButton.IsChecked = $True
        $Esc02IncPriNARadioButton.IsChecked = $True
        $Esc02DegOutNARadioButton.IsChecked = $True
        $Esc02NumberUsersOtherRadioButton.IsChecked = $True
        $Esc02CritIssueNoRadioButton.IsChecked = $True
        $Esc02WorkAroundNoneRadioButton.IsChecked = $True
        $Esc02OOCEmailNoRadioButton.IsChecked = $True
        # Set Time Zone
        If ($Esc01PreferredIDTextBox.Text -eq $USERID) {
            If ($TimeZone -like "*Central*") {$Esc02CTRadioButton.IsChecked = $True}
            ElseIf ($TimeZone -like "*Pacific*") {$Esc02PTRadioButton.IsChecked = $True}
            ElseIf ($TimeZone -like "*Eastern*") {$Esc02ETRadioButton.IsChecked = $True}
            ElseIf ($TimeZone -like "*Mountain*") {$Esc02MTRadioButton.IsChecked = $True}
            ElseIf ($TimeZone -like "*Internation*") {$Esc02ITRadioButton.IsChecked = $True}
            Else {$Esc02OtherTZRadioButton.IsChecked = $True}
            }
        Else {$Esc02OtherTZRadioButton.IsChecked = $True}
        # Set Textboxes
        $Esc02DateTextBox.Text = (Get-Date -Format "MM/dd/yyyy")
        # Hide Labels, Textboxes, and Comboboxes
        $Esc02CritIssueTextBox.Visibility = 'Hidden'
        $Esc02WorkAroundTextBox.Visibility = 'Hidden'
        $Esc02OOCEmailYesNolabel.Visibility = 'Hidden'
        $Esc02OOCEmailYesNoStackPanel.Visibility = 'Hidden'
        $Esc02OOCExtEmaillabel.Visibility = 'Hidden'
        $Esc02OOCExtEmailTextbox.Visibility = 'Hidden'
        # Change StartSwitch
        $Script:StartSwitch = $False
        }
    Else {
        If ($Esc02OtherTZRadioButton.IsChecked -eq $False) {$Esc02OtherTZTextBox.Visibility = 'Hidden'}
        If ($Esc02OocYesRadioButton.IsChecked -eq $False) {
            $Esc02OOCEmailYesNolabel.Visibility = 'Hidden'
            $Esc02OOCEmailYesNoStackPanel.Visibility = 'Hidden'
            }
        If ($Esc02OOCEmailYesRadioButton.IsChecked -eq $False) {
            $Esc02OOCExtEmaillabel.Visibility = 'Hidden'
            $Esc02OOCExtEmailTextbox.Visibility = 'Hidden'
            }
        If ($Esc02NumberUsersOtherRadioButton.IsChecked -eq $False) {$Esc02NumberUsersOtherTextBox.Visibility = 'Hidden'}
        If ($Esc02WorkAroundYesRadioButton.IsChecked -eq $False) {$Esc02WorkAroundTextBox.Visibility = 'Hidden'}
        If ($Esc02CritIssueYesRadioButton.IsChecked -eq $False) {$Esc02CritIssueTextBox.Visibility = 'Hidden'}                                          
        }
    # MLO Escalation
    If ($MLORoleCheck -like "*YOURROLE*") {$Esc02AssigneeComboBox.Text = "YOURESCALTIONGROUP"}
    }

Function EscCitrix {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Citrix"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc1NARadioButton.IsChecked = $True
    }

Function EscDatabase {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Database"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc2OtherRadioButton.IsChecked = $True
    }

Function EscDesktop {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Desktop Application"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc3NARadioButton.IsChecked = $True
    # Set Textboxes
    $Esc3UserIDTextBox.Text = $Esc01PreferredIDTextBox.Text
    }

Function EscInternet {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Intranet/Internet"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc4IntranetNARadioButton.IsChecked = $True
    $Esc4AccessNARadioButton.IsChecked = $True
    $Esc4MainframeYesRadioButton.IsChecked = $True
    }

Function EscLearning {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Global Learning Lab"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Textboxes
    $Esc5UserIDTextBox.Text = $Esc01PreferredIDTextBox.Text
    }

Function EscLotus {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Lotus Notes/USB Mail"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc6AttemptNARadioButton.IsChecked = $True
    $Esc6AccessNARadioButton.IsChecked = $True
    $Esc6NewEmployeeNARadioButton.IsChecked = $True
    $Esc6AnyoneElseNARadioButton.IsChecked = $True
    # Set Textboxes
    $Esc6UserIDTextBox.Text = $Esc01PreferredIDTextBox.Text
    }

Function EscMainframe {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Mainframe Application"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc7AcctTypeNARadioButton.IsChecked = $True
    $Esc7FunctionNARadioButton.IsChecked = $True
    # Set Textboxes
    $Esc7UserIDTextBox.Text = $Esc01PreferredIDTextBox.Text
    # Hide Account Number and Customer Names Lables and Textboxes
    $Esc7CustomerNameslabel.Visibility = 'Hidden'
    $Esc7CustomerNamesTextBox.Visibility = 'Hidden'
    $Esc7AccountNumberlabel.Visibility = 'Hidden'
    $Esc7AccountNumberTextBox.Visibility = 'Hidden'
    }

Function EscMobility {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Mobility"
    $EscXOtherTab.Visibility = 'Visible'
    # set ComboBoxes
    $Esc8BrandComboBox.SelectedIndex = 0
    $Esc8OwnerComboBox.SelectedIndex = 0
    # Hide Labels and Textboxes
    $Esc8OtherProviderlabel.Visibility = 'Hidden'
    $Esc8OtherProviderTextbox.Visibility = 'Hidden'
    $Esc8Shippinglabel.Visibility = 'Hidden'
    $Esc8ShippingTextBox.Visibility = 'Hidden'
    $Esc8DateSynchedlabel.Visibility = 'Hidden'
    $Esc8DateSynchedlTextBox.Visibility = 'Hidden'
    $Esc8DateSynchedButton.Visibility = 'Hidden'
    $Esc8DateSynchedCalendar.Visibility = 'Hidden'
    $Esc8OtherBrandlabel.Visibility = 'Hidden'
    $Esc8OtherBrandTextBox.Visibility = 'Hidden'
    $Esc8BrandComboBox.Background = 'White'
    $Esc8OwnerComboBox.Background = 'White'
    }

Function EscVPN {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "VPN"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $Esc9VPNPastYesRadioButton.IsChecked = $True
    $Esc9SynedNARadioButton.IsChecked = $True
    $Esc9TokenHardRadioButton.IsChecked = $True
    $Esc9OwnerNARadioButton.IsChecked = $True
    $Esc9TypeNARadioButton.IsChecked = $True
    $Esc9ConnectNARadioButton.IsChecked = $True
    }

Function EscWizard {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Wizard"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscA1EscA1PilotNARadioButton.IsChecked = $True
    $EscA1AcctTypeNARadioButton.IsChecked = $True
    # Hide Labels and Textboxes
    $EscA1CustomerNameslabel.Visibility = 'Hidden'
    $EscA1AccountNumberlabel.Visibility = 'Hidden'
    $EscA1AccountNumberTextBox.Visibility = 'Hidden'
    $EscA1CustomerNamesTextBox.Visibility = 'Hidden'
    }

Function EscCCPartners {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Credit Card Partners"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscA2IPADNoRadioButton.IsChecked = $True
    $EscA2NetworkNoRadioButton.IsChecked = $True
    $EscA2PrinterNoRadioButton.IsChecked = $True
    $EscA2PowerNoRadioButton.IsChecked = $True
    $EscA2PaperNoRadioButton.IsChecked = $True
    $EscA4KeyboardTypeNARadioButton.IsChecked = $True
    # Hide Labels and Textboxes
    $EscA2PartnerLabel.Visibility = 'Hidden'
    $EscA2PartnerTextBox.Visibility = 'Hidden'
    $EscA2NetworkLabel.Visibility = 'Hidden'
    $EscA2PrinterLabel.Visibility = 'Hidden'
    $EscA2PowerLabel.Visibility = 'Hidden'
    $EscA2PaperLabel.Visibility = 'Hidden'
    $EscA2FlashLabel.Visibility = 'Hidden'
    $EscA2NetworkStackpanel.Visibility = 'Hidden'
    $EscA2PrinterStackpanel.Visibility = 'Hidden'
    $EscA2PowerStackpanel.Visibility = 'Hidden'
    $EscA2PaperStackpanel.Visibility = 'Hidden'
    $EscA2FlashTextBox.Visibility = 'Hidden'
    }

Function EscComputer {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Computer"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Combobox
    $EscA4AccessoryComboBox.SelectedIndex = 1
    $EscA4AccessoryComboBox.SelectedIndex = 0
    # Set Radio Buttons
    $EscA4HWMakeOtherRadioButton.IsChecked = $True
    $EscA4IssueNARadioButton.IsChecked = $True
    $EscA4WarrantyNARadioButton.IsChecked = $True
    $EscA4MouseTypeNARadioButton.IsChecked = $True
    $EscA4KeyboardTypeNARadioButton.IsChecked = $True
    $EscA4MonitorrWarrantyNARadioButton.IsChecked = $True
    # Check for Data and adjust
    If ($SqlDataSetLCM.Tables.Make -ne $Null) {
        If (($SqlDataSetLCM.Tables.Make -like "*HP*") -or ($SqlDataSetLCM.Tables.Make -like "*Hewlett*")) {$EscA4HWMakeHPRadioButton.IsChecked = $True}
        }
    }

Function EscServerHardware {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Server Hardware"
    $EscXOtherTab.Visibility = 'Visible'
    }

Function EscEpsonNexus {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Epson-Nexus"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscA8PrinterTypeEpsonRadioButton.IsChecked = $True
    $EscA8ReceiptsNoRadioButton.IsChecked = $True
    $EscA8RequestNoRadioButton.IsChecked = $True
    $EscA8LocationStorageRadioButton.IsChecked = $True
    $EscA8ReplacementNotRadioButton.IsChecked = $True
    # Show Wrap Panels
    $EscA8PartWrapPanel.Visibility = 'Visible'
    $EscA8ReceiptsWrapPanel.Visibility = 'Visible'
    }

Function EscPrinter {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Printer"
    $EscXOtherTab.Visibility = 'Visible'
    # Hide Labels and Textboxes
    $EscA9MainframeDestlabel.Visibility = 'Hidden'
    $EscA9MainframeDestTextBox.Visibility = 'Hidden'
    $EscA9MainframePrintStatuslabel.Visibility = 'Hidden'
    $EscA9MainframePrintStatusTextBox.Visibility = 'Hidden'
    $EscA9InboundFaxlabel.Visibility = 'Hidden'
    $EscA9InboundFaxTextBox.Visibility = 'Hidden'
    $EscA9AccuRoutelabel.Visibility = 'Hidden'
    $EscA9AccuRouteTextBox.Visibility = 'Hidden'
    $EscA9FaxNumberlabel.Visibility = 'Hidden'
    $EscA9FaxNumberTextBox.Visibility = 'Hidden'
    $EscA9SecondQueueNumberlabel.Visibility = 'Hidden'
    $EscA9SecondQueueTextBox.Visibility = 'Hidden'
    # Set Radio Buttons
    $EscA9PastIssueNARadioButton.IsChecked = $True
    $EscA9PrinterTypeNetworkRadioButton.IsChecked = $True
    $EscA9PrinterWarrantyNARadioButton.IsChecked = $True
    $EscA9LoanCalcNoRadioButton.IsChecked = $True
    $EscA9BranchTypeNARadioButton.IsChecked = $True
    $EscA9NewTonerNARadioButton.IsChecked = $True
    $EscA9MICRNARadioButton.IsChecked = $True
    $EscA9TonerStreaksNARadioButton.IsChecked = $True
    $EscA9PMainframeFaxNARadioButton.IsChecked = $True
    # Hide Calendar
    $EscA9Calendar.Visibility = 'Hidden'
    }

Function EscEpay {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "E Pay Customer"
    $EscXOtherTab.Visibility = 'Visible'
    }

Function EscNetwork {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Network"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscA7IssueNARadioButton.IsChecked = $True
    $EscA7SiteTypeBranchRadioButton.IsChecked = $True
    $EscA7TrainNARadioButton.IsChecked = $True
    }

Function EscDriveMappingRole {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Drive Mapping-Role"
    $EscXOtherTab.Visibility = 'Visible'
    # Hide Calendar
    $EscB1Calender.Visibility = 'Hidden'
    }

Function EscInfoSecPass {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Info Security Password"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB2OtherRadioButton.IsChecked = $True   
    # Hide Calendars
    $EscB2LastSignonCalendar.Visibility = 'Hidden'
    $EscB2LastResetCalendar.Visibility = 'Hidden'
    # Hide Textboxes
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    # Hide Buttons
    $EscB2UnixPingButton.Visibility = 'Hidden'
    }

Function EscFileRestore {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "File Restore"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB3FileDeletedNARadioButton.IsChecked = $True 
    $EscB3TryRestoredNARadioButton.IsChecked = $True 
    $EscB3FileCorruptedNARadioButton.IsChecked = $True 
    $EscB3AnotherCopyNARadioButton.IsChecked = $True 
    # Hide Calendars
    $EscB3Date1Calnedar.Visibility = 'Hidden'
    $EscB3Alt2Calendar.Visibility = 'Hidden'
    $EscB3Alt3Calendar.Visibility = 'Hidden'
    $EscB3Alt4Calendar.Visibility = 'Hidden'
    }

Function EscServer {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Server"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB4RebootYesRadioButton.IsChecked = $True 
    $EscB4IssueNARadioButton.IsChecked = $True 
    }

Function EscTransmission {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Transmission"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB5MethodMailboxRadioButton.IsChecked = $True 
    $EscB5DirectionIncomingRadioButton.IsChecked = $True 
    }

Function EscIVR {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "IVR"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB6MainframeYesRadioButton.IsChecked = $True 
    $EscB6VerifyNARadioButton.IsChecked = $True 
    }

Function EscVoice {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Voice"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB7PowerNoRadioButton.IsChecked = $True
    # Hide Elements
    $EscB7ColorLabel.Visibility = 'Hidden'
    $EscB7ColorTextBox.Visibility = 'Hidden'
    $EscB7QualityIssuelabel.Visibility = 'Hidden'
    $EscB7PartWrapPanel.Visibility = 'Hidden'
    $EscB7SwapResultLabel.Visibility = 'Hidden'
    $EscB7SwapResultTextBox.Visibility = 'Hidden'
    $EscB7Swappedlabel.Visibility = 'Hidden'
    $EscB7SwappedStackPanel.Visibility = 'Hidden'
    # Set Combobox
    $EscB7PhoneTypeComboBox.SelectedIndex = 0
    }

Function EscVoiceMail {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Voice Mail"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB8RecentInstallNoRadioButton.IsChecked = $True
    $EscB8VMWorkedNARadioButton.IsChecked = $True
    $EscB8PowerNARadioButton.IsChecked = $True
    $EscB8IsCiscoNARadioButton.IsChecked = $True
    $EscB8PasswordNARadioButton.IsChecked = $True
    $EscB8AccessVMButtonRadioButton.IsChecked = $True
    $EscB8VMLightNARadioButton.IsChecked = $True
    $EscB8ProblemNoneCheckBox.IsChecked = $True
    # Hide Elements
    $EscB8RecentInstallTextBox.Visibility = 'Hidden'
    $EscB8AccessVMTextBox.Visibility = 'Hidden'
    }

Function EscWebex {
    # Hide/Show Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'    
    $MOBILITY_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Visible'
    # Show Tab
    $EscXOtherTab.Header = "Webex"
    $EscXOtherTab.Visibility = 'Visible'
    # Set Radio Buttons
    $EscB9OtherTZRadioButton.IsChecked = $True
    $EscB9WhoExpHostRadioButton.IsChecked = $False
    $EscB9WhoExpSpecRadioButton.IsChecked = $False
    $EscB9WhoExpAllRadioButton.IsChecked = $False
    $EscB9DeviceTypeMobileRadioButton.IsChecked = $False
    $EscB9DeviceTypeSoftRadioButton.IsChecked = $False
    $EscB9DeviceTypeLandRadioButton.IsChecked = $False
    $EscB9DeviceTypeOtherRadioButton.IsChecked = $False
    $EscB9NumberCalledYesRadioButton.IsChecked = $False
    $EscB9NumberCalledNoRadioButton.IsChecked = $False
    $EscB9SoftphoneWifiYesRadioButton.IsChecked = $False
    $EscB9SoftphoneWifiNoRadioButton.IsChecked = $False
    $EscB9CallbackYesRadioButton.IsChecked = $False
    $EscB9CallbackNoRadioButton.IsChecked = $False
    $EscB9WearHeadsetYesRadioButton.IsChecked = $False
    $EscB9WearHeadsetNoRadioButton.IsChecked = $False
    $EscB9HeadsetTypeYesRadioButton.IsChecked = $False
    $EscB9HeadsetTypeNoRadioButton.IsChecked = $False
    # Hide Elements
    $EscB9WhoExplabel.Visibility = 'Visible'
    $EscB9WhoExpWrapPanel.Visibility = 'Visible'
    $EscB9DeviceTypelabel.Visibility = 'Hidden'
    $EscB9DeviceTypeWrapPanel.Visibility = 'Hidden'
    $EscB9UserIDlabel.Visibility = 'Hidden'
    $EscB9UserIDTextbox.Visibility = 'Hidden'
    $EscB9NumberUsedLabel.Visibility = 'Hidden'
    $EscB9NumberUsedTextBox.Visibility = 'Hidden'
    $EscB9DeviceUsedLabel.Visibility = 'Hidden'
    $EscB9DeviceTextBox.Visibility = 'Hidden'
    $EscB9NumberCalledlabel.Visibility = 'Hidden'
    $EscB9NumberCalledStackPanel.Visibility = 'Hidden'
    $EscB9NumberCalledTolabel.Visibility = 'Hidden'
    $EscB9NumberCalledToTextbox.Visibility = 'Hidden'
    $EscB9SoftphoneWifilabel.Visibility = 'Hidden'
    $EscB9SoftphoneWifiStackPanel.Visibility = 'Hidden'
    $EscB9Callbacklabel.Visibility = 'Hidden'
    $EscB9CallbackStackPanel.Visibility = 'Hidden'
    $EscB9CallbackNumberlabel.Visibility = 'Hidden'
    $EscB9CallbackNumberTextbox.Visibility = 'Hidden'
    $EscB9WearHeadsetlabel.Visibility = 'Hidden'
    $EscB9WearHeadsetStackPanel.Visibility = 'Hidden'
    $EscB9HeadsetTypelabel.Visibility = 'Hidden'
    $EscB9HeadsetTypeStackPanel.Visibility = 'Hidden'
    $EscB9CityCalledFromlabel.Visibility = 'Hidden'
    $EscB9CityCalledFromTextbox.Visibility = 'Hidden'
    $EscB9StateCalledFromlabel.Visibility = 'Hidden'
    $EscB9StateCalledFromTextbox.Visibility = 'Hidden'
    $EscB9MeetingDateCalendar.Visibility = 'Hidden'
    }

Function EscIBMReplace {
    # Hide/Show Grids
    $General_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Show Tab
    $Esc02GeneralTab.Header = "IBM PC Replacement"
    $EscXOtherTab.Header = "Results"
    $EscXOtherTab.Visibility = 'Hidden'
    $Esc02GeneralTab.Visibility = 'Visible'
    $Esc02tabControl.Visibility = 'Visible'
    }

Function EscLogRoute {
    # Hide/Show Grids
    $General_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Set Radio Buttons
    $EscC2IsTurretNoRadioButton.IsChecked = $True    
    $EscC2AffectedUsersSingleRadioButton.IsChecked = $True
    $EscC2PhoneTypeWorkRadioButton.IsChecked = $True
    # Set Textboxes
    $EscC2IssueDateTextBox.Text = (Get-Date -Format "MM/dd/yyyy")
    # Hide Elements
    $EscC2TraderIDLabel.Visibility = 'Hidden'
    $EscC2TraderIDTextbox.Visibility = 'Hidden'
    # Show Tab
    $Esc02GeneralTab.Header = "Log and Route"
    $EscXOtherTab.Header = "Results"
    $EscXOtherTab.Visibility = 'Hidden'
    $Esc02GeneralTab.Visibility = 'Visible'
    $Esc02tabControl.Visibility = 'Visible'
    }

Function EscDisaster {
    # Hide/Show Grids
    $General_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Set Radio Buttons
    $EscC3PrimaryPhoneTypeWorkRadioButton.IsChecked = $True    
    $EscC3SecondaryPhoneTypeWorkRadioButton.IsChecked = $True
    # Set Textbox
    $EscC3CAssigneeTextbox.Text = "NOC_Event Mgmt"
    # Show Tab
    $Esc02GeneralTab.Header = "Natural Disaster"
    $EscXOtherTab.Header = "Results"
    $EscXOtherTab.Visibility = 'Hidden'
    $Esc02GeneralTab.Visibility = 'Visible'
    $Esc02tabControl.Visibility = 'Visible'
    }

Function EscReboot {
    # Hide/Show Grids
    $General_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Set Radio Buttons
    $EscC4OtherTZRadioButton.IsChecked = $True
    # Show Tab
    $Esc02GeneralTab.Header = "Server Patching/Reboot"
    $EscXOtherTab.Header = "Results"
    $EscXOtherTab.Visibility = 'Hidden'
    $Esc02GeneralTab.Visibility = 'Visible'
    $Esc02tabControl.Visibility = 'Visible'
    }

Function EscSMRequest {
    # Hide/Show Grids
    $General_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Set Radio Buttons
    $EscC5PhoneTypeWorkRadioButton.IsChecked = $True    
    $EscC5RequestTypeAddRadioButton.IsChecked = $True
    $EscC5SMRequestOtherRadioButton.IsChecked = $True
    # Show Tab
    $Esc02GeneralTab.Header = "SM Request"
    $EscXOtherTab.Header = "Results"
    $EscXOtherTab.Visibility = 'Hidden'
    $Esc02GeneralTab.Visibility = 'Visible'
    $Esc02tabControl.Visibility = 'Visible'
    }

Function EscDelete {
    # Hide/Show Grids
    $General_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Visible'
    # Set Main Tab
    $Esc02tabControl.SelectedIndex = 0
    $Esc02tabControl.Visibility = 'Visible'
    # Set Radio Buttons
    $EscC6PhoneTypeWorkRadioButton.IsChecked = $True    
    # Set Textbox
    If ($Esc01CallerNameLabel2.Content -ne "Missing From AD") {$EscC6ClientNameTextbox.Text = $Esc01CallerNameLabel2.Content}
    If ($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") {$EscC6PhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
    If ($Esc01CallerDeptLabel2.Content -ne "Missing From AD") {$EscC6DeptNameTextbox.Text = $Esc01CallerDeptLabel2.Content}
    $EscC6ReinstallDateTextbox.Text = (Get-Date -Format "MM/dd/yyyy")
    # Show Tab
    $Esc02GeneralTab.Header = "Software Delete"
    $EscXOtherTab.Header = "Results"
    $EscXOtherTab.Visibility = 'Hidden'
    $Esc02GeneralTab.Visibility = 'Visible'
    $Esc02tabControl.Visibility = 'Visible'
    }

Function EscResult {
    # Clear Results
    $Script:Submission = $Null
    $Script:SubmissionLine = $Null
    # General Form Check
    If ($Esc02GeneralTab.Header -eq "General") {
        If ($Esc02IncDescTextbox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Incident Description cannot be blank.",'Incident Description Blank','Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02IncDescTextbox.Focus() | Out-Null
        return $False
        }
        If (($Esc02IncDescTextbox.Text -like "*error*") -and ($Esc02ErrorNoRadioButton.IsChecked -eq $True)) {
        [System.Windows.MessageBox]::Show("Please copy Error Message mentioned in Incident Description into the Error Message field.",'Description Contains Error','Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02ErrorMessageTextbox.Focus() | Out-Null
        return $False
        }
        If (($Esc02ErrorYesRadioButton.IsChecked -eq $True) -and ($Esc02ErrorMessageTextbox.Text -eq "")) {
        [System.Windows.MessageBox]::Show("Error Message cannot be blank when Yes is selected.",'Error Message Blank','Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02ErrorMessageTextbox.Focus() | Out-Null
        return $False        
        }
        If ($Esc02TroubleTextBox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Troubleshooting Steps cannot be blank.","Troubleshooting Steps Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02TroubleTextBox.Focus() | Out-Null
        return $False        
        }
        If (($Esc02TroubleTextBox.Text -like "*error*") -and ($Esc02ErrorNoRadioButton.IsChecked -eq $True)) {
        [System.Windows.MessageBox]::Show("Please copy Error Message mentioned in Toubleshooting Steps into the Error Message field.",'Description Contains Error','Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02ErrorMessageTextbox.Focus() | Out-Null
        return $False
        }
        If ($Esc02MachineTextBox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Machine Name cannot be blank.","Machine Name Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02MachineTextBox.Focus() | Out-Null
        return $False        
        }
        If ($Esc02AssigneeComboBox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Specific Assignee Group for Escalation cannot be blank.","Assignee Group for Escalation Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02AssigneeComboBox.Focus() | Out-Null
        return $False        
        }
        If ($Esc02DateTextBox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Date Issue Began cannot be blank.","Date Issue Began Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02DateTextBox.Focus() | Out-Null
        return $False        
        }
        If ((($($Esc02DateTextBox.Text).Replace('/','') -replace "\D+") -eq '') -or ($Esc02DateTextBox.Text -notlike "*/*")) {
        [System.Windows.MessageBox]::Show("Date Issue Began must contain proper date format.","Date Issue Date Format",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02DateTextBox.Focus() | Out-Null
        return $False        
        }
        If ($Esc02ServiceRecTextbox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Service Recipient's Work Hours cannot be blank.","Service Recipient's Work Hours Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02ServiceRecTextbox.Focus() | Out-Null
        return $False        
        }
        If (($Esc02OtherTZRadioButton.IsChecked -eq $True) -and ($Esc02OtherTZTextBox.Text -eq "")) {
        [System.Windows.MessageBox]::Show("Other Zone cannot be blank when checked.","Other Zone Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02OtherTZTextBox.Focus() | Out-Null
        return $False        
        }
        If (($Esc02OOCEmailYesRadioButton.IsChecked -eq $True) -and ($Esc02OOCExtEmailTextbox.Text -eq "")) {
        [System.Windows.MessageBox]::Show("External Work EMail Address cannot be blank.","Other Zone Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02OOCExtEmailTextbox.Focus() | Out-Null
        return $False        
        }
        If ($Esc02AltNameTextBox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Alt Contact Name cannot be blank.","Alt Contact Name Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02AltNameTextBox.Focus() | Out-Null
        return $False        
        }
        If ($Esc02AltNumberTextBox.Text -eq "") {
        [System.Windows.MessageBox]::Show("Alt Contact Phone cannot be blank.","Alt Contact Phone Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02AltNumberTextBox.Focus() | Out-Null
        return $False        
        }
        If (($Esc02NumberUsersOtherRadioButton.IsChecked -eq $True) -and ($Esc02NumberUsersOtherTextBox.Text -eq "")) {
        [System.Windows.MessageBox]::Show("Other Number of Users Impacted cannot be blank.","Other Number of Users Impacted Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02NumberUsersOtherTextBox.Focus() | Out-Null
        return $False        
        }
        If (($Esc02CritIssueYesRadioButton.IsChecked -eq $True) -and ($Esc02CritIssueTextBox.Text -eq "")) {
        [System.Windows.MessageBox]::Show("Critical Issue cannot be blank.","Critical Issue Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02CritIssueTextBox.Focus() | Out-Null
        return $False        
        }
        If (($Esc02WorkAroundYesRadioButton.IsChecked -eq $True) -and ($Esc02WorkAroundTextBox.Text -eq "")) {
        [System.Windows.MessageBox]::Show("Work Around cannot be blank.","Work Around Blank",'Ok','Error') | Out-Null
        $Esc02tabControl.SelectedIndex = 0
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02WorkAroundTextBox.Focus() | Out-Null
        return $False        
        }
        }
    # Citrix Form Check
    If ($EscXOtherTab.Header -eq "Citrix") {
        If ($Esc1EnvTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Environment cannot be blank.","Environment Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc1EnvTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc1URLTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("URL cannot be blank.","URL Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc1URLTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc1AppTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Affected Application cannot be blank.","Affected Application Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc1AppTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc1IconTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Icon Name cannot be blank.","Icon Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc1IconTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc1ICATextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("ICA Client Version cannot be blank.","ICA Client Version Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc1ICATextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc1PrnTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Default Printer Driver cannot be blank.","Default Printer Driver Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc1PrnTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Database Form Check
    If ($EscXOtherTab.Header -eq "Database") {
        If ($Esc2AppTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Application Impacted cannot be blank.","Application Impacted Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2AppTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc2DataNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Database Name cannot be blank.","Database Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2DataNameTextBox.Focus() | Out-Null
            return $False        
            } 
        If (($Esc2OtherRadioButton.IsChecked -eq $True) -and ($Esc2OtherTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Database Type cannot be blank when Other is selected.","Database Type Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2OtherTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc2AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc2CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc2StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc2ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc2CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc2CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Desktop Application Form Check
    If ($EscXOtherTab.Header -eq "Desktop Application") {
        If ($Esc3AppImpactTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Application Impacted cannot be blank.","Application Impacted Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc3AppImpactTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc3AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc3AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc3CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc3CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc3StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc3StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc3ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc3ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc3CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Model Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc3CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Computer Form Check
    If ($EscXOtherTab.Header -eq "Computer") {
        If (($EscA4HWMakeOtherRadioButton.IsChecked -eq $True) -and ($EscA4HWMakeOtherTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Hardware Make cannot be blank.","Hardware Make Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4HWMakeOtherTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA4ComputerModelTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Model cannot be blank.","Model Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4ComputerModelTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA4ComputerSerialTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Serial Number cannot be blank.","Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4ComputerSerialTextBox.Focus() | Out-Null
            return $False        
            }   
        If ($EscA4AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA4CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4CityTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA4StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4StateTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscA4ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4ZipTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscA4CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post cannot be blank.","Floor/Cubicle/Post Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA4CubeTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA4AccessoryComboBox.Text -eq "Mouse") {
            If ($EscA4MouseMakeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Mouse Make cannot be blank.","Mouse Make Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4MouseMakeTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4MouseSerialTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Mouse Serial Number cannot be blank.","Mouse Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4MouseSerialTextBox.Focus() | Out-Null
                return $False        
                }                              
            }
        If ($EscA4AccessoryComboBox.Text -eq "Keyboard") {
            If ($EscA4KeyboardMakeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Keyboard Make cannot be blank.","Keyboard Make Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4KeyboardMakeTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4KeyboardSerialTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Keyboard Serial Number cannot be blank.","Keyboard Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4KeyboardSerialTextBox.Focus() | Out-Null
                return $False        
                }
            } 
        If ($EscA4AccessoryComboBox.Text -eq "Monitor") {
            If ($EscA4MonitorMakeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Monitor Make cannot be blank.","Monitor Make Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4MonitorMakeTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4MonitorTypeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Monitor Model Type cannot be blank.","Monitor Model Type Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4MonitorTypeTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4MonitorSerialTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Monitor Serial Number cannot be blank.","Monitor Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4MonitorSerialTextBox.Focus() | Out-Null
                return $False        
                }                                             
            }
        If ($EscA4AccessoryComboBox.Text -eq "Battery") {
            If ($EscA4BatteryTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Battery Serial Number cannot be blank.","Battery Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4BatteryTextBox.Focus() | Out-Null
                return $False        
                }
            }
        If ($EscA4AccessoryComboBox.Text -eq "Cable Lock") {
            If ($EscA4CableLockTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Cable Lock Serial Number cannot be blank.","Cable Lock Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4CableLockTextBox.Focus() | Out-Null
                return $False        
                }
            }
        If ($EscA4AccessoryComboBox.Text -eq "Docking Station") {
            If ($EscA4DockMakeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Docking Station Make cannot be blank.","Docking Station Make Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4DockMakeTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4DockPartTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Docking Station Part Number cannot be blank.","Docking Station Part Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4DockPartTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4DockSerialTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Docking Station Serial Number cannot be blank.","Docking Station Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4DockSerialTextBox.Focus() | Out-Null
                return $False        
                }                                             
            }
        If ($EscA4AccessoryComboBox.Text -eq "ePad") {
            If ($EscA4EpadMakeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("ePad Make cannot be blank.","ePad Make Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4EpadMakeTextBox.Focus() | Out-Null
                return $False        
                }
            If ($EscA4EpadSerialTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("ePad Serial Number cannot be blank.","ePad Serial Number Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4EpadSerialTextBox.Focus() | Out-Null
                return $False        
                }                                             
            }
        If ($EscA4AccessoryComboBox.Text -eq "Miscellaneous") {
            If ($EscA4MiscTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Miscellaneous Info cannot be blank.","Miscellaneous Info Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscA4MiscTextBox.Focus() | Out-Null
                return $False        
                }
            }
        }
    # Server Hardware Form Check
    If ($EscXOtherTab.Header -eq "Server Hardware") {
        If ($EscA5ServerNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server Name cannot be blank.","Server Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5ServerNameTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($EscA5ServerSerialTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Serial Number cannot be blank.","Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5ServerSerialTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($EscA5AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5AddressTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($EscA5CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5CityTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($EscA5StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5StateTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($EscA5ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5ZipTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($EscA5CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA5CubeTextBox.Focus() | Out-Null
            return $False        
            }        
        }
    # Epson-Nexus Form Check
    If ($EscXOtherTab.Header -eq "Epson-Nexus") {
        If (($EscA8PrinterTypeEpsonRadioButton.IsChecked -eq $True) -and ($EscA8PrinterModelTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Epson Model Number cannot be blank.","Epson Model Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8PrinterModelTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA8PrinterSerialTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Printer Serial Number cannot be blank.","Printer Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8PrinterSerialTextBox.Focus() | Out-Null
            return $False        
            } 
        If (($EscA8ReceiptsYesRadioButton.IsChecked -eq $True) -and ($EscA8ReceiptsYesTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Type of Transaction cannot be blank.","Type of Transaction Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8ReceiptsYesTextBox.Focus() | Out-Null
            return $False        
            }  
        If (($EscA8NoneCheckBox.IsChecked -eq $False) -and ($EscA8CableCheckBox.IsChecked -eq $False) -and ($EscA8SupplyCheckBox.IsChecked -eq $False) -and ($EscA8PrinterCheckBox.IsChecked -eq $False) -and ($EscA8DataCheckBox.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Select at least one entry for Parts Being Replaced.","Parts Being Replaced Unchecked",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            return $False        
            }
        If ($EscA8BranchIDTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Branch ID cannot be blank.","Branch ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8BranchIDTextBox.Focus() | Out-Null
            return $False        
            }                                                    
        If ($EscA8LobbyIDTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Lobby ID cannot be blank.","Lobby ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8LobbyIDTextBox.Focus() | Out-Null
            return $False        
            }                                                    
        If ($EscA8AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8AddressTextBox.Focus() | Out-Null
            return $False        
            }                                                    
        If ($EscA8CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8CityTextBox.Focus() | Out-Null
            return $False        
            }                                                    
        If ($EscA8StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8StateTextBox.Focus() | Out-Null
            return $False        
            }                                                    
        If ($EscA8ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA8ZipTextBox.Focus() | Out-Null
            return $False        
            }                                                    
        }
    # Printer Form Check
    If ($EscXOtherTab.Header -eq "Printer") {
        If ($EscA9PrinterNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Printer Name cannot be blank.","Printer Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9PrinterNameTextBox.Focus() | Out-Null
            return $False        
            }  
        If (($EscA9PrinterTypeNetworkRadioButton.IsChecked -eq $True) -and ($EscA9PrintServerTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Printer Server cannot be blank.","Printer Server Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9PrintServerTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA9PrinterLocationTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Printer Location cannot be blank.","Printer Location Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9PrinterLocationTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscA9PrinterSerialTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Printer Serial Number cannot be blank.","Printer Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9PrinterSerialTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA9PrinterModelTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Printer Model cannot be blank.","Printer Model Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9PrinterModelTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA9PrinterPingTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Printer IP cannot be blank.","Printer IP Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9PrinterPingTextBox.Focus() | Out-Null
            return $False        
            } 
        If (($EscA9LoanCalcYesRadioButton.IsChecked -eq $True) -and ($EscA9SecondQueueTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Secondary Queue Name cannot be blank.","Secondary Queue Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9SecondQueueTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA9AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA9CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA9StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA9ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA9CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA9CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Global Learning Lab Form Check
    If ($EscXOtherTab.Header -eq "Global Learning Lab") {
        If ($Esc5FunctionTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Specific Function cannot be blank.","Specific Function Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc5FunctionTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($Esc5AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc5AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc5CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc5CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc5StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc5StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc5ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc5ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc5CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc5CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Intranet/Internet Form Check
    If ($EscXOtherTab.Header -eq "Intranet/Internet") {
        If ($Esc4AppImpactTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Application Impacted cannot be blank.","Application Impacted Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4AppImpactTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4URLTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("URL cannot be blank.","URL Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4URLTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4ServerIPTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server IP cannot be blank.","Server IP Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4ServerIPTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4FunctionTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Specific Function cannot be blank.","Specific Function Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4FunctionTextBox.Focus() | Out-Null
            return $False        
            } 
        If (($Esc4MainframeYesRadioButton.IsChecked -eq $True) -and ($Esc4MainframeTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Major Mainframe Issues cannot be blank when Yes is selected.","Major Mainframe Issues Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4MainframeTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc4AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc4CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc4CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Lotus Notes/USB Mail Form Check
    If ($EscXOtherTab.Header -eq "Lotus Notes/USB Mail") {
        If ($Esc6MailServerTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Mail Server cannot be blank.","Mail Server Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6MailServerTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc6MailSizeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Maile File Size cannot be blank.","Maile File Size Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6MailSizeTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc6AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc6CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc6StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc6ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc6CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc6CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Mainframe Application Form Check
    If ($EscXOtherTab.Header -eq "Mainframe Application") {
        If ($Esc7AppFailTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Application Fail Point cannot be blank.","Application Fail Point Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7AppFailTextBox.Focus() | Out-Null
            return $False        
            }  
        If (($Esc7AcctTypeNumberRadioButton.IsChecked -eq $True) -and ($Esc7AccountNumberTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Account Number cannot be blank when checked.","Account Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7AccountNumberTextBox.Focus() | Out-Null
            return $False        
            }
        If (($Esc7AcctTypeNamesRadioButton.IsChecked -eq $True) -and ($Esc7CustomerNamesTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Customer Names cannot be blank when checked.","Customer Names Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7CustomerNamesTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc7AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc7CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc7StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc7ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc7CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc7CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Mobility Application Form Check
    If ($EscXOtherTab.Header -eq "Mobility") {
        If (($Esc8BrandComboBox.SelectedIndex -eq 5) -and ($Esc8OtherBrandTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Other Brand cannot be blank when checked.","Other Brand Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8OtherBrandTextBox.Focus() | Out-Null
            return $False        
            }        
        If ($Esc8DeviceModelTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Device Model cannot be blank.","Device Model Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8DeviceModelTextBox.Focus() | Out-Null
            return $False        
            }
        If (($Esc8OwnerComboBox.SelectedIndex -eq 1) -and ($Esc8DeviceNumberTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Device Phone Number cannot be blank when Corporate Owned is checked.","Device Phone Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8DeviceNumberTextBox.Focus() | Out-Null
            return $False        
            }
        If (($Esc8ProviderNARadioButton.IsChecked -eq $True) -and ($Esc8OtherProviderTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Other Provider cannot be blank when checked.","Other Provider Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8OtherProviderTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc8ProblemTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Problem Experienced cannot be blank.","Problem Experienced Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8ProblemTextBox.Focus() | Out-Null
            return $False        
            }
        If (($Esc8SynedYesRadioButton.IsChecked -eq $True) -and ($Esc8DateSynchedlTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Date of Synched cannot be blank when checked.","Date of Synched Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8DateSynchedlTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc8AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc8CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc8StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc8ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc8CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        If (($Esc8ReplacementNoRadioButton.IsChecked -eq $True) -and ($Esc8ShippingTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Shipping Address cannot be blank when checked.","Shipping Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc8ShippingTextBox.Focus() | Out-Null
            return $False        
            }
        } 
    # VPN Form Check
    If ($EscXOtherTab.Header -eq "VPN") {
        If (($Esc9VPNPastYesRadioButton.IsChecked -eq $True) -and ($Esc9DateSynchedTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Date Accessed VPN cannot be blank when checked.","Date Accessed VPN Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc9DateSynchedTextBox.Focus() | Out-Null
            return $False        
            }
        If (($Esc9TokenHardRadioButton.IsChecked -eq $True) -and ($Esc9TokenTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Token cannot be blank when checked.","Token VPN Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc9TokenTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc9ComputerOSTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Computer OS cannot be blank.","Computer OS Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc9ComputerOSTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($Esc9VersionTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("VPN Software Version cannot be blank.","VPN Software Version Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc9VersionTextBox.Focus() | Out-Null
            return $False        
            }
        If ($Esc9ISPTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Connectivity ISP cannot be blank.","Connectivity ISP Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $Esc9ISPTextBox.Focus() | Out-Null
            return $False        
            } 
        }   
    # Wizard Form Check
    If ($EscXOtherTab.Header -eq "Wizard") {
        If ($EscA1ArgoVersionTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Argo Wizard Version cannot be blank.","Argo Wizard Version Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1ArgoVersionTextBox.Focus() | Out-Null
            return $False        
            }  
        If (($EscA1AcctTypeNumberRadioButton.IsChecked -eq $True) -and ($EscA1AccountNumberTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Account Number cannot be blank when checked.","Account Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1AccountNumberTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscA1AcctTypeNamesRadioButton.IsChecked -eq $True) -and ($EscA1CustomerNamesTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Customer Names cannot be blank when checked.","Customer Names Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1CustomerNamesTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA1ServerNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server Name cannot be blank.","Server Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1ServerNameTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA1AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA1CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA1StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA1ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA1CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post # cannot be blank.","Floor/Cubicle/Post # Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA1CubeTextBox.Focus() | Out-Null
            return $False        
            } 
        } 
    # Credit Card Partners Form Check
    If ($EscXOtherTab.Header -eq "Credit Card Partners") {
        If (($EscA2PrinterYesRadioButton.IsChecked -eq $True) -and ($EscA2FlashTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Color Flashing On Printer cannot be blank when Printer Issues is checked.","Color Flashing On Printer Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA2FlashTextBox.Focus() | Out-Null
            return $False        
            }
        }   
    # Network Form Check
    If ($EscXOtherTab.Header -eq "Network") {
        If ($EscA7SiteCodeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Site Code cannot be blank.","Site Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7SiteCodeTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscA7AffectedTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Affected Applications cannot be blank.","Affected Applications Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7AffectedTextBox.Focus() | Out-Null
            return $False        
            }   
        If ($EscA7OtherAffectedTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Affected Computers cannot be blank.","Affected Computers Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7OtherAffectedTextBox.Focus() | Out-Null
            return $False        
            }                       
        If ($EscA7AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA7CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA7StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscA7ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscA7ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        } 
    # Drive Mapping-Role Form Check
    If ($EscXOtherTab.Header -eq "Drive Mapping-Role") {
        If ($EscB1FullPathTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Full Path cannot be blank.","Full Path Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB1FullPathTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB1DriveLetterTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Drive Letter cannot be blank.","Drive Letter Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB1DriveLetterTextBox.Focus() | Out-Null
            return $False        
            }   
        If ($EscB1EntRoleTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Enterprise Role cannot be blank.","Enterprise Role Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB1EntRoleTextBox.Focus() | Out-Null
            return $False        
            }                       
        If ($EscB1AffectedFilesTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Affect File Names cannot be blank.","Affect File Names Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB1AffectedFilesTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB1LastTimeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Last Access Date cannot be blank.","Last Access Date Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB1LastTimeTextBox.Focus() | Out-Null
            return $False        
            } 
        }  
    # Info Security Password Form Check
    If ($EscXOtherTab.Header -eq "Info Security Password") {
        If (($EscB2OtherRadioButton.IsChecked -eq $True) -and ($EscB2OtherTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Other Password Type cannot be blank when checked.","Password Type Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB2OtherTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB2UnixRadioButton.IsChecked -eq $True) -and ($EscB2UnixTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Unix Password Type cannot be blank when checked.","Password Type Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB2UnixTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB2EmerIDRadioButton.IsChecked -eq $True) -and ($EscB2EmerIDTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Emergency ID Password Type cannot be blank when checked.","Emergency ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB2EmerIDTextBox.Focus() | Out-Null
            return $False        
            }
        }        
    # File Restore Form Check
    If ($EscXOtherTab.Header -eq "File Restore") {
        If ($EscB3ServerNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server Name cannot be blank.","Server Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB3ServerNameTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB3DirPathTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Directory Path cannot be blank.","Directory Path Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB3DirPathTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB3FilesTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Files cannot be blank.","Files Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB3FilesTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB3Date1TextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Date cannot be blank.","Date Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB3Date1TextBox.Focus() | Out-Null
            return $False        
            }  
        }
    # Server Form Check
    If ($EscXOtherTab.Header -eq "Server") {
        If ($EscB4ServerNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server Name cannot be blank.","Server Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4ServerNameTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB4PingResultsTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Ping Results cannot be blank.","Ping Results Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4PingResultsTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB4RebootYesRadioButton.IsChecked -eq $True) -and ($EscB4RebootTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Server Reboot Requested cannot be blank when checked.","Server Reboot Requested Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4RebootTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB4AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB4CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4CityTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB4StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4StateTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB4ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB4ZipTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # IBM PC Replacement Form Check
    If ($Esc02GeneralTab.Header -eq "IBM PC Replacement") {
        If ($EscC1InteractionTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Interaction/Incident ID cannot be blank.","Interaction/Incident ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC1InteractionTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC1ComputerTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Computer Name cannot be blank.","Computer Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC1ComputerTextbox.Focus() | Out-Null
            return $False        
            }
        If ($EscC1OldSerialTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Old Serial Number cannot be blank.","Old Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC1OldSerialTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC1NewSerialTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("New Serial Number cannot be blank.","New Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC1NewSerialTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC1SiteCodeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Site Code cannot be blank.","Site Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC1SiteCodeTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Log and Route Form Check
    If ($Esc02GeneralTab.Header -eq "Log and Route") {
        If (($EscC2IsTurretYesRadioButton.IsChecked -eq $True) -and ($EscC2TraderIDTextbox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Trader ID cannot be blank when Turret Phone is checked.","Trader ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC2TraderIDTextbox.Focus() | Out-Null
            return $False        
            }        
        If ($EscC2PhoneNumberTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Number cannot be blank.","Phone Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC2PhoneNumberTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC2IssueDateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Date Issue Began cannot be blank.","Date Issue Began Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC2IssueDateTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscC2AssigneeComboBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Specific Assignee Group for Escalation cannot be blank.","Assignee Group Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC2AssigneeComboBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC2IssueDescTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Issue Description cannot be blank.","Issue Description Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC2IssueDescTextBox.Focus() | Out-Null
            return $False        
            } 
        }
    # Natural Disaster Form Check
    If ($Esc02GeneralTab.Header -eq "Natural Disaster") {
        If ($EscC3CPrimaryontactTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Primary Contact Name cannot be blank.","Primary Contact Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3CPrimaryontactTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC3PrimaryPhoneNumberTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Primary Phone Number cannot be blank.","Primary Phone Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3PrimaryPhoneNumberTextbox.Focus() | Out-Null
            return $False        
            }
        If ($EscC3SecondaryContactTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Secondary Contact Name cannot be blank.","Secondary Contact Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3SecondaryContactTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC3SecondaryPhoneNumberTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Secondary Contact Phone cannot be blank.","Secondary Contact Phone Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3SecondaryPhoneNumberTextbox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC3IssueDescTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Issue Description cannot be blank.","Issue Description Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3IssueDescTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC3AssessmentTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Visual Assessment of Damage cannot be blank.","Assessment of Damage Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3AssessmentTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscC3CAssigneeTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Specific Assignee Group for Escalation cannot be blank.","Assignee Group Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC3CAssigneeTextbox.Focus() | Out-Null
            return $False        
            } 
        }
    # Server Patching/Reboot Form Check
    If ($Esc02GeneralTab.Header -eq "Server Patching/Reboot") {
        If ($EscC4RebootTimeTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Time cannot be blank.","Time Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC4RebootTimeTextbox.Focus() | Out-Null
            return $False
            }
        If (($EscC4OtherTZRadioButton.IsChecked -eq $True) -and ($EscC4OtherTZTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Other Time Zone cannot be blank when checked.","Other Time Zone Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC4OtherTZTextBox.Focus() | Out-Null
            return $False
            }
        If ($EscC4ServerNamesTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server Name(s) cannot be blank.","Server Name(s) Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC4ServerNamesTextBox.Focus() | Out-Null
            return $False
            }
        If ($EscC4EnvTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Server Environment cannot be blank.","Server Environment Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC4EnvTextbox.Focus() | Out-Null
            return $False
            } 
        If ($EscC4TierTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Network Tier of the Server cannot be blank.","Network Tier Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC4TierTextbox.Focus() | Out-Null
            return $False
            } 
        }
    # SM Request Form Check
    If ($Esc02GeneralTab.Header -eq "SM Request") {
        If ($EscC5ClientNameTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Client Name cannot be blank.","Client Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC5ClientNameTextbox.Focus() | Out-Null
            return $False
            }
        If ($EscC5PhoneNumberTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Number cannot be blank.","Phone Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC5PhoneNumberTextbox.Focus() | Out-Null
            return $False
            }
        If ($EscC5ResultDescTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Request Description cannot be blank.","Request Description Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC5ResultDescTextBox.Focus() | Out-Null
            return $False
            } 
        If ($EscC5IncidentTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Interaction/Incident ID cannot be blank.","Interaction/Incident ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC5IncidentTextbox.Focus() | Out-Null
            return $False
            } 
        }
    # Software Delete Form Check
    If ($Esc02GeneralTab.Header -eq "Software Delete") {
        If ($EscC6ClientNameTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Client Name cannot be blank.","Client Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6ClientNameTextbox.Focus() | Out-Null
            return $False
            }
        If ($EscC6PhoneNumberTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Number cannot be blank.","Phone Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6PhoneNumberTextbox.Focus() | Out-Null
            return $False
            }
        If ($EscC6DeptNameTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Department Name cannot be blank.","Department Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6DeptNameTextbox.Focus() | Out-Null
            return $False
            }        
        If ($EscC6MachineTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Machine Name cannot be blank.","Machine Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6MachineTextbox.Focus() | Out-Null
            return $False
            }           
        If ($EscC6AppReinstallTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Software/Application ReInstalled cannot be blank.","Software Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6AppReinstallTextBox.Focus() | Out-Null
            return $False
            }           
        If ($EscC6IncidentTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Interaction/Incident ID cannot be blank.","Interaction/Incident ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6IncidentTextbox.Focus() | Out-Null
            return $False
            }   
        If ($EscC6ReinstallDateTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Date of ReInstall cannot be blank.","Date of ReInstall Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6ReinstallDateTextbox.Focus() | Out-Null
            return $False
            } 
        If ($EscC6ADGroupTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Link ID/AD Group cannot be blank.","Link ID/AD Group Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6ADGroupTextbox.Focus() | Out-Null
            return $False
            }  
        If ($EscC6ErrorTextbox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Return Code Error cannot be blank.","Return Code Error Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 0
            [System.Windows.Forms.Application]::DoEvents()
            $EscC6ErrorTextbox.Focus() | Out-Null
            return $False
            }                              
        }
    # Transmission Form Check
    If ($EscXOtherTab.Header -eq "Transmission") {
        If ($EscB5BusinessNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Business Name cannot be blank.","Business Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB5BusinessNameTextBox.Focus() | Out-Null
            return $False
            }
        If ($EscB5FileNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Filename, Mailbox or Transmit ID cannot be blank.","Filename, Mailbox or Transmit ID Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB5FileNameTextBox.Focus() | Out-Null
            return $False
            }
        If ($EscB5JobNameTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("CA7 Job Name cannot be blank.","CA7 Job Name Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB5JobNameTextBox.Focus() | Out-Null
            return $False
            } 
        If ($EscB5DSNTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("DSN cannot be blank.","DSN Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB5DSNTextBox.Focus() | Out-Null
            return $False
            } 
        }
    # IVR Form Check
    If ($EscXOtherTab.Header -eq "IVR") {
        If ($EscB6PhoneNumberTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Number cannot be blank.","Phone Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB6PhoneNumberTextBox.Focus() | Out-Null
            return $False
            }
        If (($EscB6CellCheckBox.IsChecked -eq $False) -and ($EscB6WorkCheckBox.IsChecked -eq $False) -and ($EscB6HomeCheckBox.IsChecked -eq $False) -and ($EscB6PagerCheckBox.IsChecked -eq $False) -and ($EscB6OtherCheckBox.IsChecked -eq $False) -and ($EscB6NoneCheckBox.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Affected cannot be unchecked.","Affected Unchecked",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False
            }
        If (($EscB6MainframeYesRadioButton.IsChecked -eq $True) -and ($EscB6MainframeTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Mainframe Issue cannot be blank when Yes is checked.","Mainframe Issue Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB6MainframeTextBox.Focus() | Out-Null
            return $False
            }
        }
    # Voice Form Check
    If ($EscXOtherTab.Header -eq "Voice") {
        If ($EscB7PhoneTypeComboBox.Text -eq "Select Type") {
            [System.Windows.MessageBox]::Show("Phone Type must be selected.","Phone Type Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If ($EscB7PhoneTypeComboBox.Text -eq "Cisco") {
            If ($EscB7CiscoMACTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("MAC Address cannot be blank when Cisco is selected.","MAC Address Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscB7CiscoMACTextBox.Focus() | Out-Null
                return $False        
                }
            }
        If ($EscB7PhoneTypeComboBox.Text -eq "Other") {
            If ($EscB7OtherTypeTextBox.Text -eq "") {
                [System.Windows.MessageBox]::Show("Phone Type cannot be blank when Other is selected.","Phone Type Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscB7OtherTypeTextBox.Focus() | Out-Null
                return $False        
                }
            }
        If ($EscB7ModelTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Make/Model cannot be blank.","Make/Model Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7ModelTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB7SerialTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Serial Number cannot be blank.","Serial Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7SerialTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB7PhoneNumbersTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Numbers Affected cannot be blank.","Phone Numbers Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7PhoneNumbersTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB7DialLocalYesRadioButton.IsChecked -eq $False) -and ($EscB7DialLocalNoRadioButton.IsChecked -eq $False) -and ($EscB7DialLocalNARadioButton.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Can the user dial local calls?","Local Calls Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If (($EscB7DialLongYesRadioButton.IsChecked -eq $False) -and ($EscB7DialLongNoRadioButton.IsChecked -eq $False) -and ($EscB7DialLongNARadioButton.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Can the user dial long distance calls?.","Long Distance Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If (($EscB7CallExtYesRadioButton.IsChecked -eq $False) -and ($EscB7CallExtNoRadioButton.IsChecked -eq $False) -and ($EscB7CallExtNARadioButton.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Can the user call another extension in the same building?","Same Building Extension Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If (($EscB7CallExtOtherYesRadioButton.IsChecked -eq $False) -and ($EscB7CallExtOtherNoRadioButton.IsChecked -eq $False) -and ($EscB7CallExtOtherNARadioButton.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Can the user call another extension in another building?","Another Building Extension Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If (($EscB7IntermittentYesRadioButton.IsChecked -eq $False) -and ($EscB7IntermittentNoRadioButton.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Is the problem intermittent?","Problem Intermittent Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If (($EscB7CallQualityYesRadioButton.IsChecked -eq $True) -and ($EscB7OneWayAudioCheckBox.IsChecked -eq $False) -and ($EscB7StaticCheckBox.IsChecked -eq $False) -and ($EscB7GarbledCheckBox.IsChecked -eq $False) -and ($EscB7ChoppyCheckBox.IsChecked -eq $False) -and ($EscB7LowVolumeCheckBox.IsChecked -eq $False) -and ($EscB7DeadCheckBox.IsChecked -eq $False) -and ($EscB7DroppedCheckBox.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Phone Quality Issue must be selected when Yes is checked.","Phone Quality Issue Not Chosen",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If ($EscB7DescTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Description cannot be blank.","Description Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7DescTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB7PhoneDisplayTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Display cannot be blank.","Phone Display Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7PhoneDisplayTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB7TimeCalledTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Time of Phone Call cannot be blank.","Time of Phone Call Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7TimeCalledTextBox.Focus() | Out-Null
            return $False        
            } 
        If (($EscB7ReplaceYesRadioButton.IsChecked -eq $True) -and ($EscB7ColorTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Phone Color cannot be blank when Replacement is checked.","Phone Color Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7ColorTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB7SwappedYesRadioButton.IsChecked -eq $True) -and ($EscB7SwapResultTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Results of Swap cannot be blank when Swapped is checked.","Results of Swap Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7SwapResultTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB7AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB7CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7CityTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB7StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7StateTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB7ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7ZipTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB7CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post cannot be blank.","Floor/Cubicle/Post Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB7CubeTextBox.Focus() | Out-Null
            return $False        
            }
        }
    # Voice Mail Form Check
    If ($EscXOtherTab.Header -eq "Voice Mail") {
        If ($EscB8PhoneNumbersTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone Number Affected cannot be blank.","Phone Number Affected Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8PhoneNumbersTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB8PhoneSystemTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Phone System cannot be blank.","Phone System Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8PhoneSystemTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB8VMSystemTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Voice Mail System cannot be blank.","Voice Mail System Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8VMSystemTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB8RecentInstallYesRadioButton.IsChecked -eq $True) -and ($EscB8RecentInstallTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Recent Installation cannot be blank when checked.","Recent Installation Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8RecentInstallTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB8AccessVMDialRadioButton.IsChecked -eq $True) -and ($EscB8AccessVMTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Dial-In Number cannot be blank when checked.","Dial-In Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8AccessVMTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB8ProblemNoneCheckBox.IsChecked -eq $False) -and ($EscB8ProblemRetrievalCheckBox.IsChecked -eq $False) -and ($EscB8ProblemLeavingCheckBox.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Select at least one entry for Problem Isolated.","Problem Isolated Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If ($EscB8AddressTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Address cannot be blank.","Address Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8AddressTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB8CityTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("City cannot be blank.","City Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8CityTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB8StateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("State cannot be blank.","State Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8StateTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB8ZipTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Zip Code cannot be blank.","Zip Code Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8ZipTextBox.Focus() | Out-Null
            return $False        
            }  
        If ($EscB8CubeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Floor/Cubicle/Post cannot be blank.","Floor/Cubicle/Post Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB8CubeTextBox.Focus() | Out-Null
            return $False        
            }
        }
    # Webex Form Check
    If ($EscXOtherTab.Header -eq "Webex") {
        If ($EscB9PhoneNumbersTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Meeting Number cannot be blank.","Meeting Number Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB9PhoneNumbersTextBox.Focus() | Out-Null
            return $False        
            } 
        If ($EscB9MeetingDateTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Meeting Date cannot be blank.","Meeting Date Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB9MeetingDateTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB9MeetingTimeTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Meeting Time cannot be blank.","Meeting Time Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB9MeetingTimeTextBox.Focus() | Out-Null
            return $False        
            }
        If ($EscB9WebexURLTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Webex URL cannot be blank.","Webex URL Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB9WebexURLTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB9OtherTZRadioButton.IsChecked -eq $True) -and ($EscB9OtherTZTextBox.Text -eq "")) {
            [System.Windows.MessageBox]::Show("Other Time Zone cannot be blank when selected.","Other Time Zone Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB9OtherTZTextBox.Focus() | Out-Null
            return $False        
            }
        If (($EscB9WhoExpHostRadioButton.IsChecked -eq $False) -and ($EscB9WhoExpSpecRadioButton.IsChecked -eq $False) -and ($EscB9WhoExpAllRadioButton.IsChecked -eq $False)) {
            [System.Windows.MessageBox]::Show("Who is experiencing this issue?","Person Experiencing Issue Not Selected",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            return $False        
            }
        If ($EscB9WhoExpAllRadioButton.IsChecked -eq $False) {
            If ((($EscB9WhoExpHostRadioButton.IsChecked -eq $True) -or ($EscB9WhoExpSpecRadioButton.IsChecked -eq $True)) -and ($EscB9UserIDTextbox.Text -eq "")) {
                [System.Windows.MessageBox]::Show("User ID cannot be blank when Host or Single User is selected.","User ID Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscB9UserIDTextbox.Focus() | Out-Null
                return $False        
                }
            If (($EscB9DeviceTypeMobileRadioButton.IsChecked -eq $False) -and ($EscB9DeviceTypeSoftRadioButton.IsChecked -eq $False) -and ($EscB9DeviceTypeLandRadioButton.IsChecked -eq $False) -and ($EscB9DeviceTypeOtherRadioButton.IsChecked -eq $False)) {
                [System.Windows.MessageBox]::Show("Type of device used to join the meeting?","Device Type Not Selected",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                return $False        
                }
            If (($EscB9DeviceTypeMobileRadioButton.IsChecked -eq $True) -or ($EscB9DeviceTypeSoftRadioButton.IsChecked -eq $True) -or ($EscB9DeviceTypeLandRadioButton.IsChecked -eq $True)) {
                If ($EscB9NumberUsedTextBox.Text -eq "") {
                    [System.Windows.MessageBox]::Show("Phone Number cannot be blank.","Phone Number Blank",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    [System.Windows.Forms.Application]::DoEvents()
                    $EscB9NumberUsedTextBox.Focus() | Out-Null
                    return $False        
                    }
                If (($EscB9NumberCalledYesRadioButton.IsChecked -eq $False) -and ($EscB9NumberCalledNoRadioButton.IsChecked -eq $False)) {
                    [System.Windows.MessageBox]::Show("Number Called not selected.","Number Called Not Selected",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    return $False
                    }
                If (($EscB9NumberCalledNoRadioButton.IsChecked -eq $True) -and ($EscB9NumberCalledToTextbox.Text -eq "")) {
                    [System.Windows.MessageBox]::Show("Number Called To cannot be blank when No is selected.","Number Called To Blank",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    [System.Windows.Forms.Application]::DoEvents()
                    $EscB9NumberCalledToTextbox.Focus() | Out-Null
                    return $False        
                    }                
                If (($EscB9DeviceTypeSoftRadioButton.IsChecked -eq $True) -and ($EscB9SoftphoneWifiYesRadioButton.IsChecked -eq $False) -and ($EscB9SoftphoneWifiNoRadioButton.IsChecked -eq $False)) {
                    [System.Windows.MessageBox]::Show("WIFI must be selected when Softphone is chosen","WIFI Not Selected",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    return $False        
                    }
                If (($EscB9CallbackYesRadioButton.IsChecked -eq $False) -and ($EscB9CallbackNoRadioButton.IsChecked -eq $False)) {
                    [System.Windows.MessageBox]::Show("Callback Feature not selected.","Callback Feature Not Selected",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    return $False
                    }
                If (($EscB9CallbackYesRadioButton.IsChecked -eq $True) -and ($EscB9CallbackNumberTextbox.Text -eq "")) {
                    [System.Windows.MessageBox]::Show("Callback Number cannot be blank when Callback is selected.","Callback Number Blank",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    [System.Windows.Forms.Application]::DoEvents()
                    $EscB9CallbackNumberTextbox.Focus() | Out-Null
                    return $False        
                    }                               
                If (($EscB9WearHeadsetYesRadioButton.IsChecked -eq $False) -and ($EscB9WearHeadsetNoRadioButton.IsChecked -eq $False)) {
                    [System.Windows.MessageBox]::Show("Using a Headset not selected.","Using a Headset Not Selected",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    return $False
                    }
                If (($EscB9WearHeadsetYesRadioButton.IsChecked -eq $True) -and ($EscB9HeadsetTypeYesRadioButton.IsChecked -eq $False) -and ($EscB9HeadsetTypeNoRadioButton.IsChecked -eq $False)) {
                    [System.Windows.MessageBox]::Show("Try Handset selected when Headset is chosen","Try Handset Not Selected",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    return $False        
                    }
                If ($EscB9CityCalledFromTextbox.Text -eq "") {
                    [System.Windows.MessageBox]::Show("City Called From cannot be blank.","City Called From Blank",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    [System.Windows.Forms.Application]::DoEvents()
                    $EscB9CityCalledFromTextbox.Focus() | Out-Null
                    return $False        
                    }
                If ($EscB9StateCalledFromTextbox.Text -eq "") {
                    [System.Windows.MessageBox]::Show("State Called From cannot be blank.","State Called From Blank",'Ok','Error') | Out-Null
                    $Esc02tabControl.SelectedIndex = 1
                    [System.Windows.Forms.Application]::DoEvents()
                    $EscB9StateCalledFromTextbox.Focus() | Out-Null
                    return $False        
                    }
                }
            If (($EscB9DeviceTypeOtherRadioButton.IsChecked -eq $True) -and ($EscB9DeviceTextBox.Text -eq "")) {
                [System.Windows.MessageBox]::Show("Computer Name cannot be blank when Other is selected.","Computer Name Blank",'Ok','Error') | Out-Null
                $Esc02tabControl.SelectedIndex = 1
                [System.Windows.Forms.Application]::DoEvents()
                $EscB9DeviceTextBox.Focus() | Out-Null
                return $False        
                }
            }
        If ($EscB9IssueDescTextBox.Text -eq "") {
            [System.Windows.MessageBox]::Show("Symptoms Experienced cannot be blank.","Symptoms Experienced Blank",'Ok','Error') | Out-Null
            $Esc02tabControl.SelectedIndex = 1
            [System.Windows.Forms.Application]::DoEvents()
            $EscB9IssueDescTextBox.Focus() | Out-Null
            return $False        
            }
        }
            
    <# Divide Section #>
    
    # Add General Form Results to Submission 
    If ($Esc02GeneralTab.Header -eq "General") {
        $Script:Submission = "----- General Info -----`r`n"
        $Script:Submission = $Submission + "Incident Description: $($Esc02IncDescTextbox.Text)`r`n"
        If ($Esc02ErrorYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is User Getting an Error Message: Yes`r`n"} Else {$Script:Submission = $Submission + "Is User Getting an Error Message: No`r`n"}
        If ($Esc02ErrorYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Error Message: $($Esc02ErrorMessageTextbox.Text)`r`n"}
        $Script:Submission = $Submission + "Trouble Shooting Steps Completed: $($Esc02TroubleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Machine Name: $($Esc02MachineTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server: $($Esc02IDFTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Date Issue Began: $($Esc02DateTextBox.Text)`r`n"
        If ($Esc02DegOutCDRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Degree of Outage: Completely Down`r`n"}
        If ($Esc02DegOutSlowRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Degree of Outage: Slowness`r`n"}
        If ($Esc02DegOutSporRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Degree of Outage: Sporadic`r`n"}
        If ($Esc02DegOutNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Degree of Outage: N/A`r`n"}
        If ($Esc02NumberUsers1RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Users Impacted: 1`r`n"}
        If ($Esc02NumberUsers5RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Users Impacted: 5`r`n"}
        If ($Esc02NumberUsers50RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Users Impacted: 50`r`n"}
        If ($Esc02NumberUsers100RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Users Impacted: 100`r`n"}
        If ($Esc02NumberUsers500RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Users Impacted: 500`r`n"}
        If ($Esc02NumberUsersOtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Users Impacted: $($Esc02NumberUsersOtherTextBox.Text)`r`n"}
        If ($Esc02CritIssueNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Critical Issue: No Critical`r`n"} Else {$Script:Submission = $Submission + "Critical Issue: Yes Critical`r`n"}
        If ($Esc02CritIssueYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "...$($Esc02CritIssueTextBox.Text)`r`n"}
        If ($Esc02WorkAroundNoneRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Workaround: No Workaround`r`n"} Else {$Script:Submission = $Submission + "Workaround: Yes Workaround`r`n"}
        If ($Esc02WorkAroundYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "...$($Esc02WorkAroundTextBox.Text)`r`n"}
        If ($Esc02IncPriYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Customer Requested Increased Priority: Yes`r`n"}
        If ($Esc02IncPriNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Customer Requested Increased Priority: No`r`n"}
        If ($Esc02IncPriNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Customer Requested Increased Priority: N/A`r`n"}
        $Script:Submission = $Submission + "Specific Assignee Group for Escalation: $($Esc02AssigneeComboBox.Text)`r`n"
        $Script:Submission = $Submission + "Work Hours: $($Esc02ServiceRecTextbox.Text)`r`n"
        If ($Esc02ETRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: ET`r`n"}
        If ($Esc02CTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: CT`r`n"}
        If ($Esc02MTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: MT`r`n"}
        If ($Esc02PTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: PT`r`n"}
        If ($Esc02ITRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: IT`r`n"}
        If ($Esc02OtherTZRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: $($Esc02OtherTZTextBox.Text)`r`n"}
        If ($Esc02OocYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Located: Out Of Country`r`n"} Else {$Script:Submission = $Submission + "Located: In Country`r`n"}
        If ($Esc02OOCEmailNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Does Recipient have an External Work Email Address: No`r`n"}
        If ($Esc02OOCEmailYesRadioButton.IsChecked -eq $True) {If ($Esc02OOCExtEmailTextbox.Text -eq "") {$Script:Submission = $Submission + "Does Recipient have an External Work Email Address: Yes`r`n"} Else {$Script:Submission = $Submission + "Does Recipient have an External Work Email Address $($Esc02OOCExtEmailTextbox.Text)`r`n"}}
        $Script:Submission = $Submission + "Alt. Contact Name: $($Esc02AltNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Alt. Contact Phone: $(($(($Esc02AltNumberTextBox.Text) -replace "\D+").Insert(3,'.')).Insert(7,'.'))`r`n"
        If ($Esc02AltWorkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Alt Phone Type: Work`r`n"}
        If ($Esc02AltCellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Alt Phone Type: Cell`r`n"}
        If ($Esc02AltHomeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Alt Phone Type: Home`r`n"}
        If ($Esc01PhoneCorrectComboBox.Text -eq "Yes") {$Script:Submission = $Submission + "Is The Name and/or Phone Number correct? Yes`r`n"} Else {$Script:Submission = $Submission + "Is The Name and/or Phone Number correct? No`r`n"}
        If ($Esc01PhoneCorrectComboBox.Text -eq "No") {$Script:Submission = $Submission + "Corrected Name and/or Phone Number for Service Recipient: $(($(($Esc01PhoneNameTextBox.Text) -replace "\D+").Insert(3,'.')).Insert(7,'.'))`r`n"}
        $Script:Submission = $Submission + "`r`n"
        }
    # Add Computer Form Results to Submission
    If ($EscXOtherTab.Header -eq "Computer") {
        $Script:Submission = $Submission +  "----- Computer -----`r`n"
        If ($EscA4HWMakeDellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Hardware Make: Dell`r`n"}
        If ($EscA4HWMakeIBMRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Hardware Make: IBM`r`n"}
        If ($EscA4HWMakeHPRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Hardware Make: Hewlett Packard`r`n"}
        If ($EscA4HWMakeOtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Hardware Make: Other`r`n"}
        If ($EscA4HWMakeOtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Hardware Make Other: $($EscA4HWMakeOtherTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Machine Name: $($EscA4MachineTextBox.Text)`r`n"
        If ($EscA4HWMakeDellRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "Dell Model: $($EscA4ComputerModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Service Tag Number: $($EscA4DELLComputerSerialTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Express Service Code: $($EscA4DELLServiceCodeTextBox.Text)`r`n"
            If ($EscA4WarrantyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Dell Out Of Warranty: Yes`r`n"}
            If ($EscA4WarrantyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Dell Out Of Warranty: No`r`n"}
            If ($EscA4WarrantyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Dell Out Of Warranty: N/A`r`n"}
            }
        If ($EscA4HWMakeIBMRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "IBM Model: $($EscA4ComputerModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "IBM Model Type: $($EscA4IBMModelTypeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "IBM Serial Number: $($EscA4IBMComputerSerialTextBox.Text)`r`n"
            If ($EscA4WarrantyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "IBM Out Of Warranty: Yes`r`n"}
            If ($EscA4WarrantyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "IBM Out Of Warranty: No`r`n"}
            If ($EscA4WarrantyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "IBM Out Of Warranty: N/A`r`n"}
            }
        If ($EscA4HWMakeHPRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "HP Model: $($EscA4ComputerModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "HP Serial Number: $($EscA4HPComputerSerialTextBox.Text)`r`n"
            If ($EscA4WarrantyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "HP Out Of Warranty: Yes`r`n"}
            If ($EscA4WarrantyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "HP Out Of Warranty: No`r`n"}
            If ($EscA4WarrantyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "HP Out Of Warranty: N/A`r`n"}
            }
        If ($EscA4HWMakeOtherRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "Other Model: $($EscA4ComputerModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Other Serial Number: $($EscA4HPComputerSerialTextBox.Text)`r`n"
            If ($EscA4WarrantyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Other Out Of Warranty: Yes`r`n"}
            If ($EscA4WarrantyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Other Out Of Warranty: No`r`n"}
            If ($EscA4WarrantyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Other Out Of Warranty: N/A`r`n"}
            }
        If ($EscA4IssueYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: Yes`r`n"}
        If ($EscA4IssueNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: No`r`n"}
        If ($EscA4IssueNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: N/A`r`n"}
        $Script:Submission = $Submission + "Accessory Type: $($EscA4AccessoryComboBox.Text)`r`n"
        If ($EscA4AccessoryComboBox.Text -eq "Mouse") {
            $Script:Submission = $Submission + "Mouse Make: $($EscA4MouseMakeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Mouse Model: $($EscA4MouseModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Mouse Serial Number: $($EscA4MouseSerialTextBox.Text)`r`n"
            If ($EscA4MouseTypeUSBRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mouse Type: USB`r`n"}
            If ($EscA4MouseTypePS2RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mouse Type: PS2`r`n"}
            If ($EscA4MouseTypeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mouse Type: N/A`r`n"}
            }
        If ($EscA4AccessoryComboBox.Text -eq "Keyboard") {
            $Script:Submission = $Submission + "Keyboard Make: $($EscA4KeyboardMakeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Keyboard Model: $($EscA4KeyboardModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Keyboard Serial Number: $($EscA4KeyboardSerialTextBox.Text)`r`n"
            If ($EscA4KeyboardTypeUSBRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Keyboard Type: USB`r`n"}
            If ($EscA4KeyboardTypePS2RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Keyboard Type: PS2`r`n"}
            If ($EscA4KeyboardTypeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Keyboard Type: N/A`r`n"}
            }
        If ($EscA4AccessoryComboBox.Text -eq "Monitor") {
            $Script:Submission = $Submission + "Monitor Make: $($EscA4MonitorMakeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Monitor Model: $($EscA4MonitorModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Monitor Model Type: $($EscA4MonitorTypeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Monitor Serial Number: $($EscA4MonitorSerialTextBox.Text)`r`n"
            If ($EscA4MonitorrWarrantyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Monitor Out Of Warranty: Yes`r`n"}
            If ($EscA4MonitorrWarrantyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Monitor Out Of Warranty: No`r`n"}
            If ($EscA4MonitorrWarrantyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Monitor Out Of Warranty: N/A`r`n"}
            }
        If ($EscA4AccessoryComboBox.Text -eq "Battery") {
            $Script:Submission = $Submission + "Battery Serial Number: $($EscA4BatteryTextBox.Text)`r`n"
            }
        If ($EscA4AccessoryComboBox.Text -eq "Cable Lock") {
            $Script:Submission = $Submission + "Cable Lock Serial Number: $($EscA4CableLockTextBox.Text)`r`n"
            }
        If ($EscA4AccessoryComboBox.Text -eq "Docking Station") {
            $Script:Submission = $Submission + "Docking Station Make: $($EscA4DockMakeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Docking Station Part Number: $($EscA4DockPartTextBox.Text)`r`n"
            $Script:Submission = $Submission + "Docking Station Serial Number: $($EscA4DockSerialTextBox.Text)`r`n"
            }
        If ($EscA4AccessoryComboBox.Text -eq "ePad") {
            $Script:Submission = $Submission + "ePad Make: $($EscA4EpadMakeTextBox.Text)`r`n"
            $Script:Submission = $Submission + "ePad Model: $($EscA4EpadModelTextBox.Text)`r`n"
            $Script:Submission = $Submission + "ePad Serial Number: $($EscA4EpadSerialTextBox.Text)`r`n"
            }
        If ($EscA4AccessoryComboBox.Text -eq "Miscellaneous") {
            $Script:Submission = $Submission + "Miscellaneous Info: $($EscA4MiscTextBox.Text)`r`n"
            }
        $Script:Submission = $Submission + "Branch ID: $($EscA4BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscA4AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscA4CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscA4StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscA4ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscA4CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch Phone Number: $($EscA4BranchPhoneTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Jack ID: $($EscA4JackIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Manager Name: $($EscA4ManagerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Manager Phone: $($EscA4ManagerNumberTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA4AddTextBox.Text)`r`n"
        }
    # Add Server Hardware Form Results to Submission
    If ($EscXOtherTab.Header -eq "Server Hardware") {
        $Script:Submission = $Submission +  "----- Server Hardware -----`r`n"
        $Script:Submission = $Submission + "Branch ID: $($EscA5BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Name: $($EscA5ServerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Model Type: $($EscA5ServerModelTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Serial Number: $($EscA5ServerSerialTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lobby ID: $($EscA5LobbyIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server IP: $($EscA5ServerIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Router / Gateway IP: $($EscA5RouterIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Trouble Shooting Steps: $($EscA5TroubleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscA5AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscA5CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscA5StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscA5ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscA5CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA5AddTextBox.Text)`r`n"
        }
    # Add Epson-Nexus Form Results to Submission
    If ($EscXOtherTab.Header -eq "Epson-Nexus") {
        $Script:Submission = $Submission +  "----- Epson-Nexus -----`r`n"
        $Script:Submission = $Submission + "Branch ID: $($EscA8BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lobby ID: $($EscA8LobbyIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Site Code: $($EscA8BranchSiteTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch Name: $($EscA8BranchNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscA8AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscA8CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscA8StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscA8ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch Phone Number: $($EscA8BranchPhoneTextBox.Text)`r`n"
        If ($EscA8PrinterTypeEpsonRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Type: Epson`r`n"} Else {$Script:Submission = $Submission + "Printer Type: Nexus`r`n"}
        If ($EscA8PrinterTypeEpsonRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Epson Model Number: $($EscA8PrinterModelTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Printer Serial Number: $($EscA8PrinterSerialTextBox.Text)`r`n"
        $Script:SubmissionLine = $Null
        If ($EscA8NoneCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine + ",None"} Else {$Script:SubmissionLine = "None"}}
        If ($EscA8CableCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine + ",Power Cable"} Else {$Script:SubmissionLine = "Power Cable"}}
        If ($EscA8SupplyCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine + ",Power Supply"} Else {$Script:SubmissionLine = "Power Supply"}}
        If ($EscA8PrinterCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine + ",Printer"} Else {$Script:SubmissionLine = "Printer"}}
        If ($EscA8DataCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine + ",Data Cable"} Else {$Script:SubmissionLine = "Data Cable"}}
        If ($SubmissionLine) {$Script:Submission = $Submission + "Part being replaced: $SubmissionLine`r`n"}
        $Script:Submission = $Submission + "Frequency of Issue: $($EscA8FrequencyTextBox.Text)`r`n"
        If ($EscA8ReceiptsYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer refusing to accept receipts: Yes Refuse`r`n"} Else {$Script:Submission = $Submission + "Printer refusing to accept receipts: No Refuse`r`n"}
        If ($EscA8ReceiptsYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "What type of transaction was being attempted: $($EscA8ReceiptsYesTextBox.Text)`r`n"}
        If ($EscA8RequestYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Requesting 4 or more replacement validators: Yes Request`r`n"}
        If ($EscA8RequestNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Requesting 4 or more replacement validators: No Request`r`n"}
        If ($EscA8RequestNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Requesting 4 or more replacement validators: NA Request`r`n"}
        If ($EscA8RequestYesRadioButton.IsChecked -eq $True) {If ($EscA8LocationProductionRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Where have they been location: In Production On Teller Line`r`n"} Else {$Script:Submission = $Submission + "Where have they been location: In Storage Area (spares)`r`n"}}
        If (($EscA8RequestYesRadioButton.IsChecked -eq $True) -and ($EscA8LocationProductionRadioButton.IsChecked -eq $True)) {If ($EscA8ReplacementNotRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "How is that Computer being supported: Branch is not using Computer`r`n"}}
        If (($EscA8RequestYesRadioButton.IsChecked -eq $True) -and ($EscA8LocationProductionRadioButton.IsChecked -eq $True)) {If ($EscA8ReplacementSpareRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "How is that Computer being supported: Using spare validator`r`n"}}
        If (($EscA8RequestYesRadioButton.IsChecked -eq $True) -and ($EscA8LocationProductionRadioButton.IsChecked -eq $True)) {If ($EscA8ReplacementBorrowedRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "How is that Computer being supported: Borrowed validator`r`n"}}
        $Script:Submission = $Submission + "Additional Information: $($EscA8AddTextBox.Text)`r`n"
        }
    # Add Printer Form Results to Submission
    If ($EscXOtherTab.Header -eq "Printer") {
        $Script:Submission = $Submission +  "----- Printer -----`r`n"
        $Script:Submission = $Submission + "Printer Name: $($EscA9PrinterNameTextBox.Text)`r`n"
        If ($EscA9PastIssueYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: Yes`r`n"}
        If ($EscA9PastIssueNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: No`r`n"}
        If ($EscA9PastIssueNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: N/A`r`n"}
        If ($EscA9PrinterTypeLocalRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Type: Local`r`n"}
        If ($EscA9PrinterTypeNetworkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Type: Network`r`n"}
        If ($EscA9PrinterTypeNetworkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Server: $($EscA9PrintServerTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Printer Location: $($EscA9PrinterLocationTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Printer IP: $($EscA9PrinterPingTextBox.Text)`r`n"
        If ($EscA9MainframeFaxMFRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mainframe Printer Destination Name: $($EscA9MainframeDestTextBox.Text)`r`n"}
        If ($EscA9MainframeFaxMFRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mainframe Printer Status: $($EscA9MainframePrintStatusTextBox.Text)`r`n"}
        If ($EscA9MainframeFaxFaxRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Fax Number: $($EscA9FaxNumberTextBox.Text)`r`n"}
        If ($EscA9MainframeFaxFaxRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "AccuRoute Enabled: $($EscA9AccuRouteTextBox.Text)`r`n"}
        If ($EscA9MainframeFaxFaxRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Inbound Fax Capable: $($EscA9InboundFaxTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Printer Troubleshooting steps completed: $($EscA9PrinterTroubleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Printer Model: $($EscA9PrinterModelTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Printer Model Type: $($EscA9PrinterModelTypeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Printer Serial Number: $($EscA9PrinterSerialTextBox.Text)`r`n"
        If ($EscA9PrinterWarrantyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Out of Warranty: Yes`r`n"}
        If ($EscA9PrinterWarrantyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Out of Warranty: No`r`n"}
        If ($EscA9PrinterWarrantyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Printer Out of Warranty: N/A`r`n"}
        If ($EscA9LoanCalcNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Print Remote Documents: No Remote`r`n"}
        If ($EscA9LoanCalcYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Print Remote Documents: Yes Remote`r`n"}
        If ($EscA9LoanCalcYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Secondary Queue Name: $($EscA9SecondQueueTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($EscA9BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch Phone Number: $($EscA9BranchPhoneTextBox.Text)`r`n"
        If ($EscA9BranchTypeInStoreRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Branch Type: In-Store`r`n"}
        If ($EscA9BranchTypeTraditionalRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Branch Type: Traditional`r`n"}
        If ($EscA9BranchTypeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Branch Type: N/A`r`n"}
        If ($EscA9MICRYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a MICR printer: Yes`r`n"}
        If ($EscA9MICRNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a MICR printer: No`r`n"}
        If ($EscA9MICRNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a MICR printer: N/A`r`n"}
        $Script:Submission = $Submission + "Jack ID: $($EscA9JackIDTextBox.Text)`r`n"
        If ($EscA9NewTonerYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a new toner cartridge: Yes`r`n"}
        If ($EscA9NewTonerNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a new toner cartridge: No`r`n"}
        If ($EscA9NewTonerNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a new toner cartridge: N/A`r`n"}
        $Script:Submission = $Submission + "Changed Toner Cartridge On: $($EscA9ChangeTonerTextBox.Text)`r`n"
        If ($EscA9TonerStreaksYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there streaks of toner on the paper: Yes`r`n"}
        If ($EscA9TonerStreaksNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there streaks of toner on the paper: No`r`n"}
        If ($EscA9TonerStreaksNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there streaks of toner on the paper: N/A`r`n"}
        $Script:Submission = $Submission + "Address: $($EscA9AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscA9CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscA9StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscA9ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscA9CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Manager Name: $($EscA9ManagerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Manager Phone: $($EscA9BranchPhoneTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA9AddTextBox.Text)`r`n"
        }
    # Add Citrix Form Results to Submission
    If ($EscXOtherTab.Header -eq "Citrix") {
        $Script:Submission = $Submission +  "----- Citrix -----`r`n"
        $Script:Submission = $Submission + "Environment: $($Esc1EnvTextBox.Text)`r`n"
        $Script:Submission = $Submission + "URL: $($Esc1URLTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Affected Application: $($Esc1AppTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Icon Name: $($Esc1IconTextBox.Text)`r`n"
        $Script:Submission = $Submission + "ICA Client Version: $($Esc1ICATextBox.Text)`r`n"
        $Script:Submission = $Submission + "Default Printer Driver: $($Esc1PrnTextBox.Text)`r`n"
        If ($Esc1YesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Receiving US Bank Policy Message: Yes`r`n"}
        If ($Esc1NoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Receiving US Bank Policy Message: No`r`n"}
        If ($Esc1NARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Receiving US Bank Policy Message: N/A`r`n"}
        $Script:Submission = $Submission + "Additional Information: $($Esc1AddTextBox.Text)`r`n"
        }
    # Add Database Form Results to Submission
    If ($EscXOtherTab.Header -eq "Database") {
        $Script:Submission = $Submission +  "----- Database -----`r`n"
        $Script:Submission = $Submission + "Application Impacted: $($Esc2AppTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Database Name: $($Esc2DataNameTextBox.Text)`r`n"
        If ($Esc2UDBRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Database Type: UDB`r`n"}
        If ($Esc2OracleRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Database Type: Oracle`r`n"}
        If ($Esc2SQLRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Database Type: SQL`r`n"}
        If ($Esc2DB2RadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Database Type: DB2`r`n"}
        If ($Esc2OtherRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission +  "Database Type: Other`r`n"
            $Script:Submission = $Submission +  "Database Type Other: $($Esc2OtherTextBox.Text)`r`n"
            }
        $Script:Submission = $Submission + "Ping Results: $($Esc2PingResultsTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Name: $($Esc2ServerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server IP: $($Esc2ServerIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch ID: $($Esc2BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lobby ID: $($Esc2LobbyIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc2AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc2CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc2StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc2ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc2CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc2AddTextBox.Text)`r`n"
        }
    # Add Desktop Application Form Results to Submission
    If ($EscXOtherTab.Header -eq "Desktop Application") {
        $Script:Submission = $Submission +  "----- Desktop Application -----`r`n"
        $Script:Submission = $Submission + "User ID: $($Esc3UserIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Application Impacted: $($Esc3AppImpactTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Application Version: $($Esc3AppVersionTextBox.Text)`r`n"
        If ($Esc3YesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is user testing Pilot Application: Yes`r`n"}
        If ($Esc3NoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is user testing Pilot Application: No`r`n"}
        If ($Esc3NARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is user testing Pilot Application: N/A`r`n"}
        $Script:Submission = $Submission + "How is application accessed: $($Esc3AppAccessTextBox.Text)`r`n"
        $Script:Submission = $Submission + "At what point did the application fail: $($Esc3AppFailTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch ID:  $($Esc3BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lobby ID: $($Esc3LobbyIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc3AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc3CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc3StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc3ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc3CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc3AddTextBox.Text)`r`n"
        }
    # Add Global Learning Lab Form Results to Submission
    If ($EscXOtherTab.Header -eq "Global Learning Lab") {
        $Script:Submission = $Submission +  "----- Global Learning Lab -----`r`n"
        $Script:Submission = $Submission + "User ID: $($Esc5UserIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Course Code: $($Esc5CourseCodeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Course Name: $($Esc5CourseNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Course Modules: $($Esc5CourseModTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lesson Number: $($Esc5LessonTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Page Number: $($Esc5PageNumberTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Course Completion Date: $($Esc5CompletionTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Specific Function: $($Esc5FunctionTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch ID: $($Esc5BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc5AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc5CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc5StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc5ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc5CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc5AddTextBox.Text)`r`n"
        }
    # Add Intranet/Internet Form Results to Submission
    If ($EscXOtherTab.Header -eq "Intranet/Internet") {
        $Script:Submission = $Submission +  "----- Intranet/Internet -----`r`n"
        $Script:Submission = $Submission + "Browser Name: $($Esc4BrowserTextBox.Text)`r`n"
        If ($Esc4IntranetIntranetRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Intranet/Internet: Intranet`r`n"}
        If ($Esc4IntranetInternetRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Intranet/Internet: Internet`r`n"}
        If ($Esc4IntranetNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Intranet/Internet: N/A`r`n"}
        $Script:Submission = $Submission + "Application Impacted: $($Esc4AppImpactTextBox.Text)`r`n"
        $Script:Submission = $Submission + "URL: $($Esc4URLTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server IP: $($Esc4ServerIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Trouble Shooting Steps: $($Esc4ServerTroubleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Specific Function: $($Esc4FunctionTextBox.Text)`r`n"
        If ($Esc4AccessYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Able to access other sites: Yes`r`n"}
        If ($Esc4AccessNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Able to access other sites: No`r`n"}
        If ($Esc4AccessNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Able to access other sites: N/A`r`n"}
        If ($Esc4MainframeYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there any major mainframe issues at this time: Yes`r`n"}
        If ($Esc4MainframeYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mainframe Issue: $($Esc4MainframeTextBox.Text)`r`n"}
        If ($Esc4MainframeNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there any major mainframe issues at this time: No`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($Esc4BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc4AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc4CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc4StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc4ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc4CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc4AddTextBox.Text)`r`n"
        }
    # Add Lotus Notes/USB Mail Form Results to Submission
    If ($EscXOtherTab.Header -eq "Lotus Notes/USB Mail") {
        $Script:Submission = $Submission +  "----- Lotus Notes/USB Mail -----`r`n"
        $Script:Submission = $Submission + "User ID: $($Esc6UserIDTextBox.Text)`r`n"
        If ($Esc6AttemptClientRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Attempting email access through: Lotus Notes Client`r`n"}
        If ($Esc6AttemptWebRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Attempting email access through: USBMail via Web`r`n"}
        If ($Esc6AttemptNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Attempting email access through: N/A`r`n"}
        $Script:Submission = $Submission + "Web Browser Name/Version: $($Esc6BrowserTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Mail Server: $($Esc6MailServerTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Trouble Shooting Steps: $($Esc6TroubleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lotus Notes Version: $($Esc6NotesVerTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Mail File Size: $($Esc6MailSizeTextBox.Text)`r`n"
        If ($Esc6NewEmployeeYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "New Employee: Yes`r`n"}
        If ($Esc6NewEmployeeNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "New Employee: No`r`n"}
        If ($Esc6NewEmployeeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "New Employee: N/A`r`n"}
        If ($Esc6AccessYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Employee able to access in the past: Yes`r`n"}
        If ($Esc6AccessNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Employee able to access in the past: No`r`n"}
        If ($Esc6AccessNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Employee able to access in the past: N/A`r`n"}
        If ($Esc6AnyoneElseYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Anyone else experiencing Issues: Yes`r`n"}
        If ($Esc6AnyoneElseNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Anyone else experiencing Issues: No`r`n"}
        If ($Esc6AnyoneElseNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Anyone else experiencing Issues: N/A`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($Esc6BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc6AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc6CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc6StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc6ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc6CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc6AddTextBox.Text)`r`n"
        }
    # Add Mainframe Application Form Results to Submission
    If ($EscXOtherTab.Header -eq "Mainframe Application") {
        $Script:Submission = $Submission +  "----- Mainframe Application -----`r`n"
        $Script:Submission = $Submission + "User ID: $($Esc7UserIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Affected Application: $($Esc7AffectedTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Terminal ID: $($Esc7TermIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Screen Number: $($Esc7ScreenNumberTextBox.Text)`r`n"
        If ($Esc7FunctionYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Can function be performed natively: Yes`r`n"}
        If ($Esc7FunctionNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Can function be performed natively: No`r`n"}
        If ($Esc7FunctionNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Can function be performed natively: N/A`r`n"}
        $Script:Submission = $Submission + "At what point did the application fail: $($Esc7AppFailTextBox.Text)`r`n"
        If ($Esc7AcctTypeNumberRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Select type of Account: Account Number`r`n"}
        If ($Esc7AcctTypeNamesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Select type of Account: Customer Names`r`n"}
        If ($Esc7AcctTypeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Select type of Account: N/A`r`n"}
        If ($Esc7AcctTypeNumberRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Account Number: $($Esc7AccountNumberTextBox.Text)`r`n"}
        If ($Esc7AcctTypeNamesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Customer Names: $($Esc7CustomerNamesTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($Esc7BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc7AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc7CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc7StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc7ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc7CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc7AddTextBox.Text)`r`n"
        }
    # Add Mobility Form Results to Submission
    If ($EscXOtherTab.Header -eq "Mobility") {
        $Script:Submission = $Submission +  "----- Mobility -----`r`n"
        $Script:Submission = $Submission + "Device Brand: $($Esc8BrandComboBox.Text)`r`n"
        If ($Esc8BrandComboBox.SelectedIndex -eq 5) {$Script:Submission = $Submission + "Other Brand: $($Esc8OtherBrandTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Device Model: $($Esc8DeviceModelTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Ownership: $($Esc8OwnerComboBox.Text)`r`n"
        If ($Esc8OwnerComboBox.SelectedIndex -eq 1) {If ($Esc8DeviceNumberTextBox.Text -like "*+*") {$Script:Submission = $Submission + "Device Phone Number: $($Esc8DeviceNumberTextBox.Text)`r`n"} Else {$Script:Submission = $Submission + "Device Phone Number: $(($(($Esc8DeviceNumberTextBox.Text) -replace "\D+").Insert(3,'.')).Insert(7,'.'))`r`n"}}
        $Script:Submission = $Submission + "What is the problem the user is experiencing: $($Esc8ProblemTextBox.Text)`r`n"
        If ($Esc8ProviderATTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Provider: ATT`r`n"}
        If ($Esc8ProviderVerizonRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Provider: Verizon`r`n"}
        If ($Esc8ProviderNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Provider: Other`r`n"}
        If ($Esc8ProviderNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Other Service Provider: $($Esc8OtherProviderTextBox.Text)`r`n"}
        If ($Esc8SynedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Synched?: Yes`r`n"}
        If ($Esc8SynedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Synched?: No`r`n"}
        If ($Esc8SynedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Synched?: N/A`r`n"}
        If ($Esc8SynedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Date Device Synched: $($Esc8DateSynchedlTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($Esc8BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($Esc8AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($Esc8CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($Esc8StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($Esc8ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc8CubeTextBox.Text)`r`n"
        If ($Esc8ReplacementYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Ship To Office (If replacement needed)?: Yes`r`n"}
        If ($Esc8ReplacementNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Ship To Office (If replacement needed)?: No`r`n"}
        If ($Esc8ReplacementNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Ship to (non office address): $($Esc8ShippingTextBox.Text)`r`n"}
        }
    # Add VPN Form Results to Submission
    If ($EscXOtherTab.Header -eq "VPN") {
        $Script:Submission = $Submission +  "----- VPN -----`r`n"
        If ($Esc9VPNPastYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Has user accessed VPN in the past: Yes`r`n"}
        If ($Esc9VPNPAstNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Has user accessed VPN in the past: No`r`n"}
        If ($Esc9VPNPastYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Has user accessed VPN in the past date: $($Esc9DateSynchedTextBox.Text)`r`n"}
        If ($Esc9TokenHardRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Token: What type is being used: Hard`r`n"}
        If ($Esc9TokenSoftRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Token: What type is being used: Soft`r`n"}
        If ($Esc9TokenPalmRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Token: What type is being used: Palm`r`n"}
        If ($Esc9TokenHardRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Token: What type is being used: $($Esc9TokenTextBox.Text)`r`n"}
        If ($Esc9SynedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Did You Attempt To Resync The Token: Yes`r`n"}
        If ($Esc9SynedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Did You Attempt To Resync The Token: No`r`n"}
        If ($Esc9SynedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Did You Attempt To Resync The Token: N/A`r`n"}
        $Script:Submission = $Submission + "VPN Software Version: $($Esc9VersionTextBox.Text)`r`n"
        If ($Esc9OwnerBankRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Computer Owner: Bank`r`n"}
        If ($Esc9OwnerPersonalRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Computer Owner: Personal`r`n"}
        If ($Esc9OwnerNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Computer Owner: N/A`r`n"}
        If ($Esc9TypeLaptopRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Computer Type: Laptop`r`n"}
        If ($Esc9TypeDesktopRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Computer Type: Desktop`r`n"}
        If ($Esc9TypeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Computer Type: N/A`r`n"}
        $Script:Submission = $Submission + "Computer OS: $($Esc9ComputerOSTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Connectivity ISP: $($Esc9ISPTextBox.Text)`r`n"
        If ($Esc9SynedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Connectivity: Cable`r`n"}
        If ($Esc9SynedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Connectivity: Dial-Up`r`n"}
        If ($Esc9SynedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Connectivity: DSL`r`n"}
        If ($Esc9SynedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Connectivity: Network`r`n"}
        If ($Esc9SynedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Connectivity: N/A`r`n"}
        $Script:Submission = $Submission + "Model Type: $($Esc9VPNModelTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($Esc9CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($Esc9AddTextBox.Text)`r`n"
        }
    # Add Wizard Form Results to Submission
    If ($EscXOtherTab.Header -eq "Wizard") {
        $Script:Submission = $Submission +  "----- Wizard -----`r`n"
        $Script:Submission = $Submission + "Argo Wizard Version: $($EscA1ArgoVersionTextBox.Text)`r`n"
        If ($EscA1EscA1PilotYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is user testing Pilot Application: Yes`r`n"}
        If ($EscA1EscA1PilotNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is user testing Pilot Application: No`r`n"}
        If ($EscA1EscA1PilotNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is user testing Pilot Application: N/A`r`n"}
        $Script:Submission = $Submission + "Report ID: $($EscA1ReportIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "At what point did the application fail: $($EscA1AppFailTextBox.Text)`r`n"
        If ($EscA1AcctTypeNumberRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Select type of Account: Account Number`r`n"}
        If ($EscA1AcctTypeNamesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Select type of Account: Customer Names`r`n"}
        If ($EscA1AcctTypeNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Select type of Account: N/A`r`n"}
        If ($EscA1AcctTypeNumberRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Account Number: $($EscA1AccountNumberTextBox.Text)`r`n"}
        If ($EscA1AcctTypeNamesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Customer Names: $($EscA1CustomerNamesTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($EscA1BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Lobby ID: $($EscA1LobbyIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server IP: $($EscA1ServerIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Router / Gateway IP: $($EscA1GatewayIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Site Code: $($EscA1BranchSiteCodeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Name: $($EscA1ServerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch Name: $($EscA1BranchNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch Phone Number: $($EscA1BranchPhoneTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Trouble Shooting Steps: $($EscA1ServerTroubleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscA1AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscA1CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscA1StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscA1ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscA1CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA1AddTextBox.Text)`r`n"
        }
    # Add Credit Card Partners Form Results to Submission
    If ($EscXOtherTab.Header -eq "Credit Card Partners") {
        $Script:Submission = $Submission +  "----- Credit Card Partners -----`r`n"
        $Script:Submission = $Submission + "Application Impacted: $($EscA2AppImpactedTextBox.Text)`r`n"
        $Script:Submission = $Submission + "User ID: $($EscA2UserIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "URL: $($EscA2URLTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Specific Function: $($EscA2FunctionTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Request ID: $($EscA2RequestIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Report Name: $($EscA2ReportNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA2AddTextBox.Text)`r`n"
        If ($EscA2IPADNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is This The I-Pad App: No`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2NetworkYesRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Network Connectivity: Yes`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2NetworkNoRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Network Connectivity: No`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterNoRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Printer Issues: No`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterYesRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Printer Issues: Yes`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterYesRadioButton.IsChecked -eq $True) -and ($EscA2PowerYesRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Power To Device: Yes`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterYesRadioButton.IsChecked -eq $True) -and ($EscA2PowerNoRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Power To Device: No`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterYesRadioButton.IsChecked -eq $True) -and ($EscA2PaperYesRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Paper In Device: Yes`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterYesRadioButton.IsChecked -eq $True) -and ($EscA2PaperNoRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Paper In Device: No`r`n"}
        If (($EscA2IPADYesRadioButton.IsChecked -eq $True) -and ($EscA2PrinterYesRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Color Flashing: $($EscA2FlashTextBox.Text)`r`n"}
        If ($EscA2IPADYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Partner name and OAD/ILS flow: $($EscA2PartnerTextBox.Text)`r`n"}
        }
    # Add E Pay Customer Form Results to Submission
    If ($EscXOtherTab.Header -eq "E Pay Customer") {
        $Script:Submission = $Submission +  "----- E Pay Customer -----`r`n"
        $Script:Submission = $Submission + "Application Impacted: $($EscA3AppTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Account ID or Phone Number: $($EscA3IDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA3AddTextBox.Text)`r`n"
        }
    # Add Network Form Results to Submission
    If ($EscXOtherTab.Header -eq "Network") {
        $Script:Submission = $Submission +  "----- Network -----`r`n"
        $Script:Submission = $Submission + "Site Code: $($EscA7SiteCodeTextBox.Text)`r`n"
        If ($EscA7IssueYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: Yes`r`n"}
        If ($EscA7IssueNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: No`r`n"}
        If ($EscA7IssueNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: N/A`r`n"}
        $Script:Submission = $Submission + "Affected Application: $($EscA7AffectedTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Time of Slowness: $($EscA7TimeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Frequency of Issue: $($EscA7FrequencyTextBox.Text)`r`n"
        $Script:Submission = $Submission + "List other affected Computer names-IPs: $($EscA7OtherAffectedTextBox.Text)`r`n"
        If ($EscA7SiteTypeBranchRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Site Type: Branch`r`n"}
        If ($EscA7SiteTypeCorpRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Site Type: Corporate`r`n"}
        If ($EscA7SiteTypeComboRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Site Type: Combo`r`n"}
        If (($EscA7SiteTypeBranchRadioButton.IsChecked -eq $True) -and ($EscA7TrainYesRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Is this a Training Site: Yes`r`n"}
        If (($EscA7SiteTypeBranchRadioButton.IsChecked -eq $True) -and ($EscA7TrainNoRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Is this a Training Site: No`r`n"}
        If (($EscA7SiteTypeBranchRadioButton.IsChecked -eq $True) -and ($EscA7TrainNARadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "Is this a Training Site: N/A`r`n"}
        If ($EscA7SiteTypeBranchRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Bankers: $($EscA7BankersTextBox.Text)`r`n"}
        If ($EscA7SiteTypeBranchRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number of Tellers: $($EscA7TellersTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Server Name: $($EscA7ServerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server IP: $($EscA7ServerIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Router / Gateway IP: $($EscA7GatewayIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Trouble Shooting Steps: $($EscA7PingResultsTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Branch ID: $($EscA7BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscA7AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscA7CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscA7StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscA7ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscA7CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Jack ID: $($EscA7JackIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscA7AddTextBox.Text)`r`n"
        }
    # Add Drive Mapping-Role Form Results to Submission
    If ($EscXOtherTab.Header -eq "Drive Mapping-Role") {
        $Script:Submission = $Submission +  "----- Drive Mapping-Role -----`r`n"
        $Script:Submission = $Submission + "Full Path: $($EscB1FullPathTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Drive Letter: $($EscB1DriveLetterTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Affected File Names: $($EscB1AffectedFilesTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Co-worker ID that can access: $($EscB1CoworkerTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Enterprise Role: $($EscB1EntRoleTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Last time user was able to access drive/files: $($EscB1LastTimeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscB1AddTextBox.Text)`r`n"
        }
    # Add Info Security Password Form Results to Submission
    If ($EscXOtherTab.Header -eq "Info Security Password") {
        $Script:Submission = $Submission +  "----- Info Security Password -----`r`n"
        $Script:Submission = $Submission + "User ID: $($EscB2UserIDTextBox.Text)`r`n"
        If ($EscB2EastMFRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: East Mainframe`r`n"}
        If ($EscB2WestMainframeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: West Mainframe`r`n"}
        If ($EscB2OtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: Other`r`n"}
        If ($EscB2OtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password Other: $($EscB2OtherTextBox.Text)`r`n"}
        If ($EscB2NotesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: Lotus Notes/USBMail`r`n"}
        If ($EscB2NovellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: Novell`r`n"}
        If ($EscB2UnixRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: Unix`r`n"}
        If ($EscB2UnixRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Unix Server: $($EscB2UnixTextBox.Text)`r`n"}
        If ($EscB2USRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: US`r`n"}
        If ($EscB2NTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: NT Domain`r`n"}
        If ($EscB2InternetRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: Intranet/Internet`r`n"}
        If ($EscB2EmerIDRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Password: Emergency ID`r`n"}
        If ($EscB2EmerIDRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Emergency ID: $($EscB2EmerIDTextBox.Text)`r`n"}
        If ($EscB2UnixRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Unix Ping Results: $($EscB2PingResultsTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Region: $($EscB2RegionTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Last time user signed on successfully: $($EscB2LastSignonTextBox.Text)`r`n"
        $Script:Submission = $Submission + "When did user last reset password: $($EscB2LastResetTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscB2AddTextBox.Text)`r`n"
        }
    # Add File Restore Form Results to Submission
    If ($EscXOtherTab.Header -eq "File Restore") {
        $Script:Submission = $Submission +  "----- File Restore -----`r`n"
        $Script:Submission = $Submission + "Server Name: $($EscB3ServerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Directory Path: $($EscB3DirPathTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Affected File Names: $($EscB3FilesTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server to restore file to: $($EscB3RestoreServerTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Date 1: $($EscB3Date1TextBox.Text)`r`n"
        $Script:Submission = $Submission + "Alternate Date 2: $($EscB3Alt2TextBox.Text)`r`n"
        $Script:Submission = $Submission + "Alternate Date 3: $($EscB3Alt3TextBox.Text)`r`n"
        $Script:Submission = $Submission + "Alternate Date 4: $($EscB3Alt4TextBox.Text)`r`n"
        If ($EscB3FileDeletedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Was the file deleted: Yes`r`n"}
        If ($EscB3FileDeletedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Was the file deleted: No`r`n"}
        If ($EscB3FileDeletedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Was the file deleted: N/A`r`n"}
        If ($EscB3TryRestoreYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Did you try and restore using Shadow Copy: Yes`r`n"}
        If ($EscB3TryRestoredNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Did you try and restore using Shadow Copy: No`r`n"}
        If ($EscB3TryRestoredNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Did you try and restore using Shadow Copy: N/A`r`n"}
        If ($EscB3FileCorruptedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is the file corrupted: Yes`r`n"}
        If ($EscB3FileCorruptedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is the file corrupted: No`r`n"}
        If ($EscB3FileCorruptedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is the file corrupted: N/A`r`n"}
        If ($EscB3AnotherCopyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Suitable copy on server or affected workstation: Yes`r`n"}
        If ($EscB3AnotherCopyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Suitable copy on server or affected workstation: No`r`n"}
        If ($EscB3AnotherCopyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Suitable copy on server or affected workstation: N/A`r`n"}
        $Script:Submission = $Submission + "Additional Information: $($EscB3AddTextBox.Text)`r`n"
        }
    # Add Server Form Results to Submission
    If ($EscXOtherTab.Header -eq "Server") {
        $Script:Submission = $Submission +  "----- Server -----`r`n"
        $Script:Submission = $Submission + "Branch ID: $($EscB4BranchIDTextBox.Text)`r`n"
        If ($EscB4IssueYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: Yes`r`n"}
        If ($EscB4IssueNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: No`r`n"}
        If ($EscB4IssueNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Issue occurred multiple times in last 3 months: N/A`r`n"}
        $Script:Submission = $Submission + "Server Name: $($EscB4ServerNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server IP: $($EscB4ServerIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Router / Gateway IP: $($EscB4RouterIPTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Ping Results: $($EscB4PingResultsTextBox.Text)`r`n"
        If ($EscB4RebootYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Server Reboot Requested: Yes`r`n"}
        If ($EscB4RebootNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Server Reboot Requested: No`r`n"}
        If ($EscB4RebootYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Server Reboot Requested Text: $($EscB4RebootTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Address: $($EscB4AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscB4CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscB4StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscB4ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscB4CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscB4AddTextBox.Text)`r`n"
        }
    # Add IBM PC Replacement Form Results to Submission
    If ($Esc02GeneralTab.Header -eq "IBM PC Replacement") {
        $Script:Submission = $Submission +  "----- IBM PC Replacement -----`r`n"
        $Script:Submission = $Submission + "Interaction/Incident ID: $($EscC1InteractionTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Computer Name: $($EscC1ComputerTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Old Serial Number: $($EscC1OldSerialTextbox.Text)`r`n"
        $Script:Submission = $Submission + "New Serial Number: $($EscC1NewSerialTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Site Code: $($EscC1SiteCodeTextBox.Text)`r`n"
        }
    # Add Log and Route Form Results to Submission
    If ($Esc02GeneralTab.Header -eq "Log and Route") {
        $Script:Submission = $Submission + "----- Log and Route -----`r`n"
        $Script:Submission = $Submission + "This is a Log and Route Incident.  Do not assign this incident back to the IT Service Center.`r`n"
        $Script:Submission = $Submission + "Please consult with the primary contact for further details and troubleshooting completed.`r`n`r`n"
        If ($EscC2IsTurretYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a Turret Phone: Yes`r`n"}
        If ($EscC2IsTurretNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Is this a Turret Phone: No`r`n"}
        $Script:Submission = $Submission + "Phone Number: $($EscC2PhoneNumberTextbox.Text)`r`n"
        If ($EscC2PhoneTypeWorkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Work`r`n"}
        If ($EscC2PhoneTypeCellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Cell`r`n"}
        If ($EscC2PhoneTypeHomeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Home`r`n"}
        $Script:Submission = $Submission + "Date Issue Began: $($EscC2IssueDateTextBox.Text)`r`n"
        If ($EscC2IsTurretYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Trader ID: $($EscC2TraderIDTextbox.Text)`r`n"}
        $Script:Submission = $Submission + "Issue Description: $($EscC2IssueDescTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Specific Assignee Group for Escalation: $($EscC2AssigneeComboBox.Text)`r`n"
        If ($EscC2AffectedUsersSingleRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "How Many Users Affected? Single User`r`n"}
        If ($EscC2AffectedUsersMultiRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "How Many Users Affected? Multiple Users`r`n"}
        }
    # Add Natural Disaster Form Results to Submission
    If ($Esc02GeneralTab.Header -eq "Natural Disaster") {
        $Script:Submission = $Submission + "----- Natural Disaster -----`r`n"
        $Script:Submission = $Submission + "Client Name: $($EscC3CPrimaryontactTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Phone Number: $($EscC3PrimaryPhoneNumberTextbox.Text)`r`n"
        If ($EscC3PrimaryPhoneTypeWorkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Work`r`n"}
        If ($EscC3PrimaryPhoneTypeCellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Cell`r`n"}
        If ($EscC3PrimaryPhoneTypeHomeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Home`r`n"}
        $Script:Submission = $Submission + "Alt. Contact Name: $($EscC3SecondaryContactTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Alt. Contact Phone: $($EscC3SecondaryPhoneNumberTextbox.Text)`r`n"
        If ($EscC3SecondaryPhoneTypeWorkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Alt. Phone Type: Work`r`n"}
        If ($EscC3SecondaryPhoneTypeCellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Alt. Phone Type: Cell`r`n"}
        If ($EscC3SecondaryPhoneTypeHomeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Alt. Phone Type: Home`r`n"}
        $Script:Submission = $Submission + "Issue Description: $($EscC3IssueDescTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Visual Assessment of Damage: $($EscC3AssessmentTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Specific Assignee Group for Escalation: $($EscC3CAssigneeTextbox.Text)`r`n"
        }
    # Add Server Patching/Reboot Form Results to Submission
    If ($Esc02GeneralTab.Header -eq "Server Patching/Reboot") {
        $Script:Submission = $Submission + "----- Server Patching/Reboot -----`r`n"
        $Script:Submission = $Submission + "Primary contact information is available on the main page of the Incident, including the telephone number. Hover over the contact to view additional details. Service Recipient information is located by hovering over the service recipient field. The location displayed is for the Service Recipient (impacted user).`r`n"
        $Script:Submission = $Submission + "-----------------------------------------------------------------------------`r`n`r`n"
        $Script:Submission = $Submission + "Specific Assignee Group for Escalation: MR_Server Vulnerablity Mgmt`r`n"
        If ($EscC4ETRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: ET`r`n"}
        If ($EscC4CTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: CT`r`n"}
        If ($EscC4MTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: MT`r`n"}
        If ($EscC4PTRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: PT`r`n"}
        If ($EscC4ITRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: IT`r`n"}
        If ($EscC4OtherTZRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Time Zone: Other Zone`r`n"}
        If ($EscC4OtherTZRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "... $($EscC4OtherTZTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Time Technical Owner is Ok with Patch/Reboot: $($EscC4RebootTimeTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Server Name(s): $($EscC4ServerNamesTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Server Environment as per SCM/Active Directory: $($EscC3AssessmentTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Network Tier of the Server: $($EscC3CAssigneeTextbox.Text)`r`n"
        }
    # Add SM Request Form Results to Submission
    If ($Esc02GeneralTab.Header -eq "SM Request") {
        $Script:Submission = $Submission + "----- SM Request -----`r`n"
        $Script:Submission = $Submission + "Client Name: $($EscC5ClientNameTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Phone Number: $($EscC5PhoneNumberTextbox.Text)`r`n"
        If ($EscC5PhoneTypeWorkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Work`r`n"}
        If ($EscC5PhoneTypeCellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Cell`r`n"}
        If ($EscC5PhoneTypeHomeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Home`r`n"}
        If ($EscC5SMRequestSubRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Manager Request: Sub Class`r`n"}
        If ($EscC5SMRequestItemRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Manager Request: Item`r`n"}
        If ($EscC5SMRequestCustomerRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Manager Request: Customer Information Record`r`n"}
        If ($EscC5SMRequestOtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Service Manager Request: Other`r`n"}
        If ($EscC5RequestTypeAddRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Request Type: Add`r`n"}
        If ($EscC5RequestTypeChangeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Request Type: Change`r`n"}
        If ($EscC5RequestTypeDeleteRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Request Type: Delete`r`n"}
        $Script:Submission = $Submission + "Request Description: $($EscC5ResultDescTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Interaction/Incident ID: $($EscC5IncidentTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscC5AddTextBox.Text)`r`n"
        }
    # Add Software Delete Form Results to Submission
    If ($Esc02GeneralTab.Header -eq "Software Delete") {
        $Script:Submission = $Submission + "----- Software Delete -----`r`n"
        $Script:Submission = $Submission + "Client Name: $($EscC6ClientNameTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Phone Number: $($EscC6PhoneNumberTextbox.Text)`r`n"
        If ($EscC6PhoneTypeWorkRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Work`r`n"}
        If ($EscC6PhoneTypeCellRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Cell`r`n"}
        If ($EscC6PhoneTypeHomeRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Phone Type: Home`r`n"}
        $Script:Submission = $Submission + "Department Name: $($EscC6DeptNameTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Machine Name: $($EscC6MachineTextbox.Text)`r`n"
        $Script:Submission = $Submission + "User ID: $($EscC6UserIDTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Software/Application ReInstalled: $($EscC6AppReinstallTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Interaction/Incident ID: $($EscC6IncidentTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Date of ReInstall: $($EscC6ReinstallDateTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Link ID/AD Group: $($EscC6ADGroupTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Return Code Error: $($EscC6ErrorTextbox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscC6AddTextBox.Text)`r`n"
        }
    # Add Transmission Form Results to Submission
    If ($EscXOtherTab.Header -eq "Transmission") {
        $Script:Submission = $Submission +  "----- Transmission -----`r`n"
        $Script:Submission = $Submission + "Business Name: $($EscB5BusinessNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Filename, Mailbox or Transmit ID: $($EscB5FileNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "CA7 Job Name: $($EscB5JobNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "DSN: $($EscB5DSNTextBox.Text)`r`n"
        If ($EscB5MethodMailboxRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Method of Transmission: Mailbox`r`n"}
        If ($EscB5MethodConnectDirectRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Method of Transmission: Connect Direct`r`n"}
        If ($EscB5MethodConnectEnterpriseRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Method of Transmission: Connect Enterprise`r`n"}
        If ($EscB5MethodIERadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Method of Transmission: IE`r`n"}
        If ($EscB5DirectionIncomingRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Direction: Incoming`r`n"}
        If ($EscB5DirectionOutgoingRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Direction: Outgoing`r`n"}
        $Script:Submission = $Submission + "Transmission Dollar Amount: $($EscB5DollarTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Transmission Item Count: $($EscB5ItemTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscB5AddTextBox.Text)`r`n"
        }
    # Add IVR Form Results to Submission
    If ($EscXOtherTab.Header -eq "IVR") {
        $Script:Submission = $Submission +  "----- IVR -----`r`n"
        $Script:Submission = $Submission + "Phone Number Affected: $($EscB6PhoneNumberTextBox.Text)`r`n"
        $Script:Submission = $Submission + "IVR Name: $($EscB6IVRNameTextBox.Text)`r`n"
        $Script:Submission = $Submission + "IVR Name Pinged Info: $($EscB6IVRPingResultsTextBox.Text)`r`n"
        If ($EscB6MainframeYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there any major mainframe issues at this time: Yes`r`n"}
        If ($EscB6MainframeNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Are there any major mainframe issues at this time: No`r`n"}
        If ($EscB6MainframeYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Mainframe Issue: $($EscB6MainframeTextBox.Text)`r`n"}
        $Script:Submission = $Submission + "Examples of Account Numbers: $($EscB6AccountNumbersTextBox.Text)`r`n"
        If ($EscB6CellCheckBox.IsChecked -eq $True) {$Script:Submission = $Submission + "Affecting: Cell`r`n"}
        If ($EscB6WorkCheckBox.IsChecked -eq $True) {$Script:Submission = $Submission + "Affecting: Work`r`n"}
        If ($EscB6HomeCheckBox.IsChecked -eq $True) {$Script:Submission = $Submission + "Affecting: Home`r`n"}
        If ($EscB6PagerCheckBox.IsChecked -eq $True) {$Script:Submission = $Submission + "Affecting: Pager`r`n"}
        If ($EscB6OtherCheckBox.IsChecked -eq $True) {$Script:Submission = $Submission + "Affecting: Other`r`n"}
        If ($EscB6NoneCheckBox.IsChecked -eq $True) {$Script:Submission = $Submission + "Affecting: None`r`n"}
        If ($EscB6VerifyYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Test call made to verify outage: Yes`r`n"}
        If ($EscB6VerifyNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Test call made to verify outage: No`r`n"}
        If ($EscB6VerifyNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Test call made to verify outage: N/A`r`n"}
        $Script:Submission = $Submission + "Port Numbers: $($EscB6PhoneNumberTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscB6CubeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Additional Information: $($EscB6AddTextBox.Text)`r`n"
        }
    # Add Voice Form Results to Submission
    If ($EscXOtherTab.Header -eq "Voice") {
        $Script:Submission = $Submission +  "----- Voice -----`r`n"
        If ($EscB7PhoneTypeComboBox.Text -eq "Cisco") {
            $Script:Submission = $Submission + "Phone Type: Cisco`r`n"
            $Script:Submission = $Submission + "MAC Address: $($EscB7CiscoMACTextBox.Text)`r`n"
            }
        If ($EscB7PhoneTypeComboBox.Text -eq "Avaya") {
            $Script:Submission = $Submission + "Phone Type: Avaya`r`n"
            }
        If ($EscB7PhoneTypeComboBox.Text -eq "Other") {
            $Script:Submission = $Submission + "Phone Type: Other`r`n"
            $Script:Submission = $Submission + "Other Phone Type: $($EscB7OtherTypeTextBox.Text)`r`n"
            }
        $Script:Submission = $Submission + "Make/Model of Phone: $($EscB7ModelTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Serial Number: $($EscB7SerialTextBox.Text)`r`n"
        For ($line = 0; $line -lt $EscB7PhoneNumbersTextBox.lineCount; $line++) {
            If ($EscB7PhoneNumbersTextBox.Text -contains "+") {$AdjustedNumber = $EscB7PhoneNumbersTextBox.GetLineText($line)}
            Else {$AdjustedNumber = ((($EscB7PhoneNumbersTextBox.GetLineText($line).Replace("`r`n","`n").Replace(" ","")) -replace "\D+").Insert(3,'.')).Insert(7,'.')}
            If ($Line -eq 0) {$Script:Submission = $Submission + "Phone Number(s) Affected: $AdjustedNumber`r`n"}
            Else {$Script:Submission = $Submission + " - $AdjustedNumber`r`n"}
            }
        If ($EscB7CallExtYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Call Extension in same building: Yes`r`n"}
        If ($EscB7CallExtNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Call Extension in same building: No`r`n"}
        If ($EscB7CallExtNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Call Extension in same building: N/A`r`n"}
        If ($EscB7CallExtOtherYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Call Extension in another building: Yes`r`n"}
        If ($EscB7CallExtOtherNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Call Extension in another building: No`r`n"}
        If ($EscB7CallExtOtherNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Call Extension in another building: N/A`r`n"}
        If ($EscB7DialLocalYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Can the user dial local calls: Yes`r`n"}
        If ($EscB7DialLocalNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Can the user dial local calls: No`r`n"}
        If ($EscB7DialLocalNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Can the user dial local calls: N/A`r`n"}
        If ($EscB7DialLongYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Can the user dial a long distance call: Yes`r`n"}
        If ($EscB7DialLongNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Can the user dial a long distance call: No`r`n"}
        If ($EscB7DialLongNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Can the user dial a long distance call: N/A`r`n"}
        $Script:Submission = $Submission + "What is in the display: $($EscB7PhoneDisplayTextBox.Text)`r`n"
        If ($EscB7CallQualityYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is the issue Phone Call Quality: Yes`r`n"}
        If ($EscB7CallQualityNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is the issue Phone Call Quality: No`r`n"}
        If ($EscB7CallQualityYesRadioButton.IsChecked -eq $True) {
            If ($EscB7OneWayAudioCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", One Way Audio"} Else {$Script:SubmissionLine = "One Way Audio"}}
            If ($EscB7StaticCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Static"} Else {$Script:SubmissionLine = "Static"}}
            If ($EscB7GarbledCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Garbled"} Else {$Script:SubmissionLine = "Garbled"}}
            If ($EscB7ChoppyCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Choppy"} Else {$Script:SubmissionLine = "Choppy"}}
            If ($EscB7LowVolumeCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Low Volume"} Else {$Script:SubmissionLine = "Low Volume"}}
            If ($EscB7DeadCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Dead Air"} Else {$Script:SubmissionLine = "Dead Air"}}
            If ($EscB7DroppedCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Dropped Call"} Else {$Script:SubmissionLine = "Dropped Call"}}
            $Script:Submission = $Submission +  "What Quality issue is being reported: $SubmissionLine`r`n"
            }
        $Script:Submission = $Submission + "Brief description of phone Issue: $($EscB7DescTextBox.Text)`r`n"
        If ($EscB7IntermittentYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is problem intermittent: Yes`r`n"}
        If ($EscB7IntermittentNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is problem intermittent: No`r`n"}
        If ($EscB7PhoneNumbersTextBox.Text -contains "+") {$AdjustedNumber = $EscB7DialedFromTextBox.Text}
        Else {$AdjustedNumber = ((($EscB7DialedFromTextBox.Text.Replace("`r`n","`n").Replace(" ","")) -replace "\D+").Insert(3,'.')).Insert(7,'.')}
        $Script:Submission = $Submission + "Phone number dialed from: $AdjustedNumber`r`n"
        If ($EscB7PhoneNumbersTextBox.Text -contains "+") {$AdjustedNumber = $EscB7DialedToTextBox.Text}
        Else {$AdjustedNumber = ((($EscB7DialedToTextBox.Text.Replace("`r`n","`n").Replace(" ","")) -replace "\D+").Insert(3,'.')).Insert(7,'.')}
        $Script:Submission = $Submission + "Phone number dialed to: $AdjustedNumber`r`n"
        $Script:Submission = $Submission + "What time was phone call made: $($EscB7TimeCalledTextBox.Text)`r`n"
        If ($EscB7ReplaceYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is replacement needed: Yes`r`n"}
        If ($EscB7ReplaceNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is replacement needed: No`r`n"}
        If ($EscB7ReplaceYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Color of Phone, Handset and Cord: $($EscB7MonitorMakeTextBox.Text)`r`n"}
        If ($EscB7SwappedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Swapped with LIKE or WORKING: Yes`r`n"}
        If ($EscB7SwappedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Swapped with LIKE or WORKING: No`r`n"}
        If ($EscB7SwappedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Swapped Results: $($EscB7SwapResultTextBox.Text)`r`n"}
        If ($EscB7PowerYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the power been interrupted: Yes`r`n"}
        If ($EscB7PowerNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the power been interrupted: No`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($EscB7BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Site Code: $($EscB7SiteCodeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscB7AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscB7CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscB7StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscB7ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscB7CubeTextBox.Text)`r`n"
        }
    # Add Voice Mail Form Results to Submission
    If ($EscXOtherTab.Header -eq "Voice Mail") {
        $Script:Submission = $Submission +  "----- Voice Mail -----`r`n"
        $Script:Submission = $Submission + "Phone Number Affected: $($EscB8PhoneNumbersTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Phone System at Location: $($EscB8PhoneSystemTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Voice Mail System at Location: $($EscB8VMSystemTextBox.Text)`r`n"
        If ($EscB8IsCiscoYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is this a Cisco VoIP phone: Yes`r`n"}
        If ($EscB8IsCiscoNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is this a Cisco VoIP phone: No`r`n"}
        If ($EscB8IsCiscoNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is this a Cisco VoIP phone: N/A`r`n"}
        If ($EscB8RecentInstallYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is this a recent installation: Yes`r`n"}
        If ($EscB8RecentInstallNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is this a recent installation: No`r`n"}
        If ($EscB8RecentInstallYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Installation: $($EscB8RecentInstallTextBox.Text)`r`n"}
        If ($EscB8VMWorkedYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the voice mail ever worked: Yes`r`n"}
        If ($EscB8VMWorkedNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the voice mail ever worked: No`r`n"}
        If ($EscB8VMWorkedNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the voice mail ever worked: N/A`r`n"}
        If ($EscB8PowerYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the power been interrupted: Yes`r`n"}
        If ($EscB8PowerNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the power been interrupted: No`r`n"}
        If ($EscB8PowerNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Has the power been interrupted: N/A`r`n"}
        If ($EscB8PasswordYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is a password reset needed: Yes`r`n"}
        If ($EscB8PasswordNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is a password reset needed: No`r`n"}
        If ($EscB8PasswordNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is a password reset needed: N/A`r`n"}
        If ($EscB8AccessVMButtonRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "How does user access voice mail: Button`r`n"}
        If ($EscB8AccessVMDialRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "How does user access voice mail: Dial-in Number`r`n"}
        If ($EscB8AccessVMDialRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Dial-In Number: $($EscB8AccessVMTextBox.Text)`r`n"}
        If ($EscB8ProblemNoneCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", None"} Else {$Script:SubmissionLine = "None"}}
        If ($EscB8ProblemRetrievalCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Retrieval Of Voice Mail"} Else {$Script:SubmissionLine = "Retrieval Of Voice Mail"}}
        If ($EscB8ProblemLeavingCheckBox.IsChecked -eq $True) {If ($SubmissionLine) {$Script:SubmissionLine = $SubmissionLine +  ", Customer Leaving A Voice Mail"} Else {$Script:SubmissionLine = "Customer Leaving A Voice Mail"}}
        $Script:Submission = $Submission + "Problem Isolated Text: $SubmissionLine`r`n"
        $Script:Submission = $Submission + "Experiencing when retrieving a voice mail message: $($EscB8ExpRetrieveTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Experience when calling the voice mail: $($EscB8ExpCallingTextBox.Text)`r`n"
        If ($EscB8VMLightYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is the voice mail indicator: On`r`n"}
        If ($EscB8VMLightNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is the voice mail indicator: Off`r`n"}
        If ($EscB8VMLightNARadioButton.IsChecked -eq $True) {$Script:Submission = $Submission +  "Is the voice mail indicator: N/A`r`n"}
        $Script:Submission = $Submission + "Branch ID: $($EscB8BranchIDTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Site Code: $($EscB8SiteCodeTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Address: $($EscB8AddressTextBox.Text)`r`n"
        $Script:Submission = $Submission + "City: $($EscB8CityTextBox.Text)`r`n"
        $Script:Submission = $Submission + "State: $($EscB8StateTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Zip Code: $($EscB8ZipTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Floor/Cubicle/Post #: $($EscB8CubeTextBox.Text)`r`n"
        }
    # Add Webex Form Results to Submission
    If ($EscXOtherTab.Header -eq "Webex") {
        $Script:Submission = $Submission + "----- Webex -----`r`n"
        $Script:Submission = $Submission + "Meeting Number: $($EscB9PhoneNumbersTextBox.Text)`r`n"
        $Script:Submission = $Submission + "Webex URL: $($EscB9WebexURLTextBox.Text)`r`n"
        If ($EscB9ETRadioButton.IsChecked -eq $True) {$WebexTimeZone = "ET"}
        If ($EscB9CTRadioButton.IsChecked -eq $True) {$WebexTimeZone = "CT"}
        If ($EscB9MTRadioButton.IsChecked -eq $True) {$WebexTimeZone = "MT"}
        If ($EscB9PTRadioButton.IsChecked -eq $True) {$WebexTimeZone = "PT"}
        If ($EscB9ITRadioButton.IsChecked -eq $True) {$WebexTimeZone = "IT"}
        If ($EscB9OtherTZRadioButton.IsChecked -eq $True) {$WebexTimeZone = "$($EscB9OtherTZTextBox.Text)"}
        $Script:Submission = $Submission + "Meeting Date/Time TZ: $($EscB9MeetingDateTextBox.Text) $($EscB9MeetingTimeTextBox.Text) $WebexTimeZone`r`n"
        If ($EscB9CallbackYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Call Back Feature: Yes`r`n"}
        If ($EscB9CallbackYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Call Back Number: $($EscB9NumberUsedTextBox.Text)`r`n"}
        If ($EscB9CallbackYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Call Back Number Received: $($EscB9CallbackNumberTextbox.Text)`r`n"}
        If ($EscB9CallbackNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Call Back Feature: No`r`n"}
        If (($EscB9CallbackNoRadioButton.IsChecked -eq $True) -and (($EscB9WhoExpHostRadioButton.IsChecked -eq $True) -or ($EscB9WhoExpSpecRadioButton.IsChecked -eq $True))) {$Script:Submission = $Submission + "User Phone Number: $($EscB9NumberUsedTextBox.Text)`r`n"}
        If ($EscB9NumberCalledYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number Called: 1 (800)-916-2280`r`n"}
        If ($EscB9NumberCalledNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Number Called: $($EscB9NumberCalledToTextbox.Text)`r`n"}
        If ($EscB9DeviceTypeMobileRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Used: Mobile`r`n"}
        If ($EscB9DeviceTypeSoftRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Used: Softphone`r`n"}
        If ($EscB9DeviceTypeLandRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Used: Hardphone`r`n"}
        If ($EscB9DeviceTypeOtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Used: Other`r`n"}
        If ($EscB9DeviceTypeOtherRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Device Name: $($EscB9DeviceTextBox.Text)`r`n"}
        If ($EscB9DeviceTypeSoftRadioButton.IsChecked -eq $True) {
            If ($EscB9SoftphoneWifiYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "WIFI Used: Yes`r`n"}
            If ($EscB9SoftphoneWifiNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "WIFI Used: No`r`n"}
            }
        If (($EscB9DeviceTypeMobileRadioButton.IsChecked -eq $True) -or ($EscB9DeviceTypeSoftRadioButton.IsChecked -eq $True) -or ($EscB9DeviceTypeLandRadioButton.IsChecked -eq $True)) {$Script:Submission = $Submission + "City/State: $($EscB9CityCalledFromTextbox.Text), $($EscB9StateCalledFromTextbox.Text)`r`n"}
        If ($EscB9WhoExpHostRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "Who Was Affected: Host`r`n"
            $Script:Submission = $Submission + "User ID: $($EscB9UserIDTextbox.Text)`r`n"
            }
        If ($EscB9WhoExpSpecRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "Who Was Affected: Specific Attendee`r`n"
            $Script:Submission = $Submission + "User ID: $($EscB9UserIDTextbox.Text)`r`n"
            }
        If ($EscB9WhoExpAllRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Who Was Affected: All Participants`r`n"}
        If ($EscB9WearHeadsetYesRadioButton.IsChecked -eq $True) {
            $Script:Submission = $Submission + "Headset Used: Yes`r`n"
            If ($EscB9HeadsetTypeYesRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Switch to Handset: Yes`r`n"}
            If ($EscB9HeadsetTypeNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Switch to Handset: No`r`n"}
            }
        If ($EscB9WearHeadsetNoRadioButton.IsChecked -eq $True) {$Script:Submission = $Submission + "Headset Used: No`r`n"}
        $Script:Submission = $Submission + "Symptoms Experienced: $($EscB9IssueDescTextBox.Text)`r`n"        
        }
    }

# Loading Update
$Form_Load_Textblock2.Text = "Creating Application Events..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")

# Clipboard Button Controls
$ClipboardButtonID.Add_Click({
    $SavedText = $ClipboardButtonID.Content
    Set-Clipboard -Value "$env:UserDomain\$env:UserName"
    $ClipboardButtonID.Content = "Copied to clipboard!"
    $Form_Main.Dispatcher.Invoke([action]{$ClipboardButtonID},"Render")
    Start-Sleep -m 500
    $ClipboardButtonID.Content = $SavedText
    $Form_Main.Dispatcher.Invoke([action]{$ClipboardButtonID},"Render")
    })
$ClipboardButtonPWD.Add_Click({
    If (!($ServiceCredentials)) {
        Try {$Script:ServiceCredentials = Get-Credential -Message "To enable this feature you must provide your Service ID Credentials. You must use the format of DOMAIN\ServiceID. Once you have done this, you will not be prompted again." -User "DOMAIN\$env:UserName" -ErrorAction Stop}
        Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
            $Script:ServiceCredentials = $Null
            }         
        }
    If ($ServiceCredentials) {
        $Script:ClearTimer.Dispose()
        $SavedText = $ClipboardButtonPWD.Content
        Set-Clipboard -Value $ServiceCredentials.GetNetworkCredential().password
        $ClipboardButtonPWD.Content = "Copied to clipboard!"
        $Form_Main.Dispatcher.Invoke([action]{$ClipboardButtonPWD},"Render")
        Start-Sleep -m 500
        $ClipboardButtonPWD.Content = $SavedText
        $Form_Main.Dispatcher.Invoke([action]{$ClipboardButtonPWD},"Render")
        # Create Timer to Clear Clipboard
        $Script:ClearTimer = New-Object System.Windows.Forms.Timer
        $ClearTimer.Interval = 10000
        $ClearTimer.add_Tick({
            Set-Clipboard -Value $Null
            $Script:ClearTimer.Dispose()
            })
        # Start Clipboard Timer for Cliboard Update
        $ClearTimer.Start()
        }
    })
$ClipboardButtonADD.Add_Click({
    UpdateClipboard
    # Clear Textboxes
    $AddButton_Name_Textbox.Text = ""
    $AddButton_Text_Textbox.Text = ""
    # Clear ComboBoxes
    $AddButton_TextColor_ComboBox.Text = ""
    $AddButton_BackColor_ComboBox.Text = ""
    # Set Position Combobox
    $AddButton_Position_ComboBox.IsEnabled = $True
    $AddButton_Position_ComboBox.Items.Clear()
    Foreach ($_ in ($ClipBoardGrid.Children | Where-Object {$_.Name -notlike "*Clipboard*"} | Select -Unique)) {$AddButton_Position_ComboBox.Items.add($_.Content) | Out-Null}
    $AddButton_Position_ComboBox.SelectedIndex = [int]$AddButton_Position_ComboBox.Items.Count - 1
    If ($AddButton_Position_ComboBox.Text -eq "") {$AddButton_Position_ComboBox.IsEnabled = $False}
    # Make all Elements of MainMenu Visable
    $Start_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $SNIssue_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $RemoveButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Visible'
    $AddButton_Grid.Visibility = 'Visible'
    })
$ClipboardButtonADD.Add_MouseUP({
    # Set ComboBoxes
    $RemoveButton_ButtonName_ComboBox.Items.Clear()
    $RemoveButton_ButtonName_ComboBox.Items.add("Select Button") | Out-Null
    Foreach ($_ in ($ClipBoardGrid.Children | Where-Object {$_.Name -notlike "*Clipboard*"} | Select -Unique)) {$RemoveButton_ButtonName_ComboBox.Items.add($_.Content) | Out-Null}
    $RemoveButton_ButtonName_ComboBox.SelectedIndex = 0
    # Make all Elements of MainMenu Visable
    $Start_Grid.Visibility = 'Hidden'
    $Theme_Grid.Visibility = 'Hidden'
    $Config_Grid.Visibility = 'Hidden'
    $Gather_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $SNIssue_Grid.Visibility = 'Hidden'
    $MSG_Send_Grid.Visibility = 'Hidden'
    $AddButton_Grid.Visibility = 'Hidden'
    $EditButton_Grid.Visibility = 'Hidden'
    $Main_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Visible'
    $RemoveButton_Grid.Visibility = 'Visible'
    })

# Add Button Menu Controls
$AddButton_Cancel_Button.Add_Click({MainMenu})
$AddButton_Add_Button.Add_Click({
    UpdateClipboard
    $Pass = $True
    $MoveButtonNumber = $Null
    If ($ClipBoardGrid.Children | Where-Object {$_.Content -eq "$($AddButton_Name_Textbox.Text)"}) {
        $FailButton = "Duplicate Button Name Detected"
        $Pass = $False
        }
    If ($AddButton_TextColor_ComboBox.Text -ne "") {
        Try{$TestButton.Foreground = "$($AddButton_TextColor_ComboBox.Text)"}
        Catch{
            $FailButton = "Button Text Color Invalid"
            $Pass = $False
            }
        }
    If ($AddButton_BackColor_ComboBox.Text -ne "") {
        Try{$TestButton.Background = "$($AddButton_BackColor_ComboBox.Text)"}
        Catch{
            $FailButton = "Background Color Invalid"
            $Pass = $False
            }
        }
    If ($Pass -eq $True) {           
        UpdateClipboard
        If ($AddButton_Position_ComboBox.SelectedIndex -ne ([int]$AddButton_Position_ComboBox.Items.Count - 1)) {
            $MoveButton = $ClipboardMatrix | Where {$_.NAME -eq $AddButton_Position_ComboBox.Text}            
            $MoveButtonNumber = [int]($ClipboardMatrix | Where {$_.NAME -eq $AddButton_Position_ComboBox.Text}).NUMBER
            $MoveButtonXMargin = $Null
            For ($i=$ClipboardMatrix.Count; $i -gt [int]$MoveButton.NUMBER; $i--) {
                If ($i -eq $ClipboardMatrix.Count) {
                    $XMargin = [int]$ClipboardMatrix[$($i-1)].XMARGIN
                    $YMargin = [int]$ClipboardMatrix[$($i-1)].YMARGIN
                    If ($XMargin -eq 296) {
                        $XMargin = 4
                        $YMargin = $YMargin + 42
                        }
                    Else {$XMargin = $XMargin + 146}                
                    $MoveButtonXMargin = $ClipboardMatrix[$($i-1)].XMARGIN
                    $MoveButtonYMargin = $ClipboardMatrix[$($i-1)].YMARGIN
                    $MoveButtonNumber = $ClipboardMatrix[$($i-1)].NUMBER
                    $ClipboardMatrix[$($i-1)].XMARGIN = $XMargin
                    $ClipboardMatrix[$($i-1)].YMARGIN = $YMargin
                    $ClipboardMatrix[$($i-1)].NUMBER = [int]$ClipboardMatrix[$($i-1)].NUMBER + 1
                    }
                If (($i -lt $ClipboardMatrix.Count) -and $MoveButtonXMargin) {
                    $NextButtonXMargin = $ClipboardMatrix[$($i-1)].XMARGIN
                    $NextButtonYMargin = $ClipboardMatrix[$($i-1)].YMARGIN
                    $NextButtonNumber = $ClipboardMatrix[$($i-1)].NUMBER                
                    $ClipboardMatrix[$($i-1)].XMARGIN = $MoveButtonXMargin
                    $ClipboardMatrix[$($i-1)].YMARGIN = $MoveButtonYMargin
                    $ClipboardMatrix[$($i-1)].NUMBER = $MoveButtonNumber
                    $MoveButtonXMargin = $NextButtonXMargin
                    $MoveButtonYMargin = $NextButtonYMargin
                    $MoveButtonNumber = $NextButtonNumber                              
                    }
                }
            $XMargin = [int]$MoveButton.XMARGIN
            $YMargin = [int]$MoveButton.YMARGIN
            If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
            Else {$XMargin = $XMargin + 146}
            $Button = [Windows.Markup.XamlReader]::Load((New-Object -TypeName System.Xml.XmlNodeReader -ArgumentList $ButtonXml))
            $Button.Name = "$(-join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_}))"
            $Button.Content = "$($AddButton_Name_Textbox.Text)"
            $Button.ToolTip = "$($AddButton_Text_Textbox.Text)"
            $Button.Foreground = $AddButton_TextColor_ComboBox.Text
            $Button.Background = $AddButton_BackColor_ComboBox.Text
            $Button.Tag = @{Script=$Button;Text="$($AddButton_Text_Textbox.Text)"}
            $Button.Add_Click({param($PassVar) Clipboard -Button $($PassVar.Tag.Script) -Form $Form_Main -Text $($PassVar.Tag.Text)})    
            $Button.Margin="$XMargin,$YMargin,0,0"
            $Button.Visibility='Visible'
            $ClipBoardGrid.AddChild($Button)
            $NewClipboardProps = @{KEY=$($Button.Name);NUMBER=$([int]$MoveButton.NUMBER + 1);XMARGIN=$($Button.Margin.Left);YMARGIN=$($Button.Margin.Top);NAME=$($Button.Content);TEXT=$($Button.ToolTip);FORECOLOR=$($Button.Foreground);BACKCOLOR=$($Button.Background)}
            $NewClipboardLine = New-Object -Type PSObject -Prop $NewClipboardProps
            $Script:ClipboardMatrix += $NewClipboardLine
            ($ClipboardMatrix | Sort -Property NUMBER) | Export-CSV -Path $ClipboardFile -NoTypeInformation -Force
            $LastButton = ($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1)       
            # Capture Margin Info
            $XMargin = $LastButton.XMARGIN
            $YMargin = $LastButton.YMARGIN
            If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
            Else {$XMargin = $XMargin + 146}
            $ClipboardButtonADD.Margin="$XMargin,$YMargin,0,0"
            $Form_Main.Dispatcher.Invoke([action]{$Main_Grid},"Render")
            MainMenu
            }        
        Else {
            $LastButton = ($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1)
            If (($Lastbutton.XMARGIN) -and ([int]$Lastbutton.XMARGIN -ne 0)) {
                # Capture Margin Info
                $XMargin = [int]$LastButton.XMARGIN
                $YMargin = [int]$LastButton.YMARGIN
                If ($XMargin -eq 296) {
                    $XMargin = 4
                    $YMargin = $YMargin + 42
                    }
                Else {$XMargin = $XMargin + 146}
                }
            Else {
                # Capture Margin Info
                $XMargin = [int]$ClipBoardButtonPWD.Margin.Left
                $YMargin = [int]$ClipBoardButtonPWD.Margin.Top
                If ($XMargin -eq 296) {
                    $XMargin = 4
                    $YMargin = $YMargin + 42
                    }
                Else {$XMargin = $XMargin + 146}            
                }
            $Script:LastButtonNumber = [int]($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1 -ExpandProperty NUMBER)
            $Script:LastButtonNumber = $LastButtonNumber + 1
            $Button = [Windows.Markup.XamlReader]::Load((New-Object -TypeName System.Xml.XmlNodeReader -ArgumentList $ButtonXml))
            $Button.Name = "$(-join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_}))"
            $Button.Content = "$($AddButton_Name_Textbox.Text)"
            $Button.ToolTip = "$($AddButton_Text_Textbox.Text)"
            $Button.Foreground = $AddButton_TextColor_ComboBox.Text
            $Button.Background = $AddButton_BackColor_ComboBox.Text
            $Button.Tag = @{Script=$Button;Text="$($AddButton_Text_Textbox.Text)"}
            $Button.Add_Click({param($PassVar) Clipboard -Button $($PassVar.Tag.Script) -Form $Form_Main -Text $($PassVar.Tag.Text)})    
            $Button.Margin="$XMargin,$YMargin,0,0"
            $Button.Visibility='Visible'
            $ClipBoardGrid.AddChild($Button)
            $NewClipboardProps = @{KEY=$($Button.Name);NUMBER=$LastButtonNumber;XMARGIN=$($Button.Margin.Left);YMARGIN=$($Button.Margin.Top);NAME=$($Button.Content);TEXT=$($Button.ToolTip);FORECOLOR=$($Button.Foreground);BACKCOLOR=$($Button.Background)}
            $NewClipboardLine = New-Object -Type PSObject -Prop $NewClipboardProps
            $Script:ClipboardMatrix += $NewClipboardLine
            ($ClipboardMatrix | Sort -Property NUMBER) | Export-CSV -Path $ClipboardFile -NoTypeInformation -Force
            $LastButton = ($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1)       
            # Capture Margin Info
            $XMargin = $LastButton.XMARGIN
            $YMargin = $LastButton.YMARGIN
            If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
            Else {$XMargin = $XMargin + 146}
            $ClipboardButtonADD.Margin="$XMargin,$YMargin,0,0"
            $Form_Main.Dispatcher.Invoke([action]{$Main_Grid},"Render")
            MainMenu
            }
        }
    Else {
        [System.Windows.MessageBox]::Show("Failed to Add Button.`n`nError: $FailButton`n`nPlease correct this before trying again. Press OK to Close.","Error: $($FailButton)",'OK','Error') | Out-Null
        }
    })

# Edit Button Menu Controls
$EditButton_Cancel_Button.Add_Click({MainMenu})
$EditButton_Edit_Button.Add_Click({
    UpdateClipboard
    $Pass = $True
    $MoveButtonNumber = $Null
    If (($ClipBoardGrid.Children | Where-Object {$_.Content -eq "$($EditButton_Name_Textbox.Text)"}) -and (($ClipBoardGrid.Children | Where-Object {$_.Content -eq "$($EditButton_Name_Textbox.Text)"}).Content -ne $EditButtonName))  {
        $FailButton = "Duplicate Button Name Detected"
        $Pass = $False
        }
    If ($EditButton_TextColor_ComboBox.Text -ne "") {
        Try{$TestButton.Foreground = "$($EditButton_TextColor_ComboBox.Text)"}
        Catch{
            $FailButton = "Button Text Color Invalid"
            $Pass = $False
            }
        }
    If ($EditButton_BackColor_ComboBox.Text -ne "") {
        Try{$TestButton.Background = "$($EditButton_BackColor_ComboBox.Text)"}
        Catch{
            $FailButton = "Background Color Invalid"
            $Pass = $False
            }
        }#>
    If ($Pass -eq $True) {
        $NewPosition = [int]$EditButton_Position_ComboBox.Items.IndexOf($EditButton_Position_ComboBox.SelectedValue)
        $OriginalPosition = [int]$EditButton_Position_ComboBox.Items.IndexOf($EditButtonName) -1
        If ($NewPosition -ne $OriginalPosition) {
            $CaptureButton = $ClipboardMatrix | Where {$_.NAME -eq $EditButtonName}
            $CaptureName = "$($EditButton_Name_Textbox.Text)"
            $CaptureText = "$($EditButton_Text_Textbox.Text)"
            $CaptureForeColor = "$($EditButton_TextColor_ComboBox.Text)"
            $CaptureBackColor = "$($EditButton_BackColor_ComboBox.Text)"
            $ButtonName = ($ClipBoardGrid.Children | Where-Object {$_.Content -eq $EditButtonName} | Select -First 1).Name
            $RemoveButton = ($ClipBoardGrid.Children | Where-Object {$_.Name -eq $ButtonName})
            $RemoveButtonXMargin = $Null
            Foreach ($Button in $ClipboardMatrix | Sort -Property NUMBER) {
                If ($Button.NAME -eq $EditButtonName) {
                    $RemoveButtonXMargin = $Button.XMARGIN
                    $RemoveButtonYMargin = $Button.YMARGIN
                    $RemoveButtonNumber = $Button.NUMBER
                    }
                If (($RemoveButtonXMargin -ne $Null) -and ($Button.XMARGIN -ne $RemoveButtonXMargin)) {
                    $NewButtonXMargin = $Button.XMARGIN
                    $NewButtonYMargin = $Button.YMARGIN
                    $NewButtonNumber = $Button.NUMBER
                    $Button.XMARGIN = $RemoveButtonXMargin
                    $Button.YMARGIN = $RemoveButtonYMargin
                    $Button.NUMBER = $RemoveButtonNumber
                    $RemoveButtonXMargin = $NewButtonXMargin
                    $RemoveButtonYMargin = $NewButtonYMargin
                    $RemoveButtonNumber = $NewButtonNumber
                    }
                }
            [PSObject[]]$Script:ClipboardMatrix = $ClipboardMatrix | Where-Object {$_.NAME -ne $EditButtonName}
            ($ClipboardMatrix | Sort -Property NUMBER) | Export-CSV -Path $ClipboardFile -NoTypeInformation -Force 
            UpdateClipboard
            $MoveButton = $ClipboardMatrix | Where {$_.NAME -eq $EditButton_Position_ComboBox.Text}            
            $MoveButtonNumber = [int]($ClipboardMatrix | Where {$_.NAME -eq $EditButton_Position_ComboBox.Text}).NUMBER
            $MoveButtonXMargin = $Null
            For ($i=$ClipboardMatrix.Count; $i -gt [int]$MoveButton.NUMBER; $i--) {
                If ($i -eq $ClipboardMatrix.Count) {
                    $XMargin = [int]$ClipboardMatrix[$($i-1)].XMARGIN
                    $YMargin = [int]$ClipboardMatrix[$($i-1)].YMARGIN
                    If ($XMargin -eq 296) {
                        $XMargin = 4
                        $YMargin = $YMargin + 42
                        }
                    Else {$XMargin = $XMargin + 146}                
                    $MoveButtonXMargin = $ClipboardMatrix[$($i-1)].XMARGIN
                    $MoveButtonYMargin = $ClipboardMatrix[$($i-1)].YMARGIN
                    $MoveButtonNumber = $ClipboardMatrix[$($i-1)].NUMBER
                    $ClipboardMatrix[$($i-1)].XMARGIN = $XMargin
                    $ClipboardMatrix[$($i-1)].YMARGIN = $YMargin
                    $ClipboardMatrix[$($i-1)].NUMBER = [int]$ClipboardMatrix[$($i-1)].NUMBER + 1
                    }
                If (($i -lt $ClipboardMatrix.Count) -and $MoveButtonXMargin) {
                    $NextButtonXMargin = $ClipboardMatrix[$($i-1)].XMARGIN
                    $NextButtonYMargin = $ClipboardMatrix[$($i-1)].YMARGIN
                    $NextButtonNumber = $ClipboardMatrix[$($i-1)].NUMBER                
                    $ClipboardMatrix[$($i-1)].XMARGIN = $MoveButtonXMargin
                    $ClipboardMatrix[$($i-1)].YMARGIN = $MoveButtonYMargin
                    $ClipboardMatrix[$($i-1)].NUMBER = $MoveButtonNumber
                    $MoveButtonXMargin = $NextButtonXMargin
                    $MoveButtonYMargin = $NextButtonYMargin
                    $MoveButtonNumber = $NextButtonNumber                              
                    }
                }
            $XMargin = [int]$MoveButton.XMARGIN
            $YMargin = [int]$MoveButton.YMARGIN
            If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
            Else {$XMargin = $XMargin + 146}
            $Button = [Windows.Markup.XamlReader]::Load((New-Object -TypeName System.Xml.XmlNodeReader -ArgumentList $ButtonXml))
            $Button.Name = "$(-join ((65..90) + (97..122) | Get-Random -Count 8 | % {[char]$_}))"
            $Button.Content = $CaptureName
            $Button.ToolTip = $CaptureText
            $Button.Foreground = $CaptureForeColor
            $Button.Background = $CaptureBackColor
            $Button.Tag = @{Script=$Button;Text="$($EditButton_Text_Textbox.Text)"}
            $Button.Add_Click({param($PassVar) Clipboard -Button $($PassVar.Tag.Script) -Form $Form_Main -Text $($PassVar.Tag.Text)})    
            $Button.Margin="$XMargin,$YMargin,0,0"
            $Button.Visibility='Visible'
            $ClipBoardGrid.AddChild($Button)
            $NewClipboardProps = @{KEY=$($Button.Name);NUMBER=$([int]$MoveButton.NUMBER + 1);XMARGIN=$($Button.Margin.Left);YMARGIN=$($Button.Margin.Top);NAME=$($Button.Content);TEXT=$($Button.ToolTip);FORECOLOR=$($Button.Foreground);BACKCOLOR=$($Button.Background)}
            $NewClipboardLine = New-Object -Type PSObject -Prop $NewClipboardProps
            $Script:ClipboardMatrix += $NewClipboardLine
            ($ClipboardMatrix | Sort -Property NUMBER) | Export-CSV -Path $ClipboardFile -NoTypeInformation -Force
            $LastButton = ($ClipboardMatrix | Sort -Property NUMBER | Select -Last 1)       
            # Capture Margin Info
            $XMargin = $LastButton.XMARGIN
            $YMargin = $LastButton.YMARGIN
            If ($XMargin -eq 296) {
                $XMargin = 4
                $YMargin = $YMargin + 42
                }
            Else {$XMargin = $XMargin + 146}
            $ClipboardButtonADD.Margin="$XMargin,$YMargin,0,0"
            $Form_Main.Dispatcher.Invoke([action]{$Main_Grid},"Render")
            MainMenu
            }
        Else {
            $index = [int]([array]::indexof($ClipboardMatrix.NAME,$EditButtonName))
            $ClipboardMatrix[$index].NAME = "$($EditButton_Name_Textbox.Text)"
            $ClipboardMatrix[$index].TEXT = "$($EditButton_Text_Textbox.Text)"
            $ClipboardMatrix[$index].FORECOLOR = "$($EditButton_TextColor_ComboBox.Text)"
            $ClipboardMatrix[$index].BACKCOLOR = "$($EditButton_BackColor_ComboBox.Text)"
            ($ClipboardMatrix | Sort -Property NUMBER) | Export-CSV -Path $ClipboardFile -NoTypeInformation -Force        
            MainMenu
            }
        }
    Else {
        [System.Windows.MessageBox]::Show("Failed to Add Button.`n`nError: $FailButton`n`nPlease correct this before trying again. Press OK to Close.","Error: $($FailButton)",'OK','Error') | Out-Null
        }
    })

# Remove Button Menu Controls
$RemoveButton_Cancel_Button.Add_Click({MainMenu})
$RemoveButton_Remove_Button.Add_Click({
    If ($RemoveButton_ButtonName_ComboBox.SelectedIndex -ne 0) {
        UpdateClipboard
        $ButtonName = ($ClipBoardGrid.Children | Where-Object {$_.Content -eq "$($RemoveButton_ButtonName_ComboBox.Text)"} | Select -First 1).Name
        $RemoveButton = ($ClipBoardGrid.Children | Where-Object {$_.Name -eq $ButtonName})
        $RemoveButtonXMargin = $Null
        Foreach ($Button in $ClipboardMatrix | Sort -Property NUMBER) {
            If ($Button.NAME -eq "$($RemoveButton_ButtonName_ComboBox.Text)") {
                $RemoveButtonXMargin = $Button.XMARGIN
                $RemoveButtonYMargin = $Button.YMARGIN
                $RemoveButtonNumber = $Button.NUMBER
                }
            If (($RemoveButtonXMargin -ne $Null) -and ($Button.XMARGIN -ne $RemoveButtonXMargin)) {
                $NewButtonXMargin = $Button.XMARGIN
                $NewButtonYMargin = $Button.YMARGIN
                $NewButtonNumber = $Button.NUMBER
                $Button.XMARGIN = $RemoveButtonXMargin
                $Button.YMARGIN = $RemoveButtonYMargin
                $Button.NUMBER = $RemoveButtonNumber
                $RemoveButtonXMargin = $NewButtonXMargin
                $RemoveButtonYMargin = $NewButtonYMargin
                $RemoveButtonNumber = $NewButtonNumber
                }
            }
        [PSObject[]]$Script:ClipboardMatrix = $ClipboardMatrix | Where-Object {$_.NAME -ne "$($RemoveButton_ButtonName_ComboBox.Text)"}
        ($ClipboardMatrix | Sort -Property NUMBER) | Export-CSV -Path $ClipboardFile -NoTypeInformation -Force 
        UpdateClipboard
        MainMenu
        }
    })

# Start Menu Button Controls
$Form_Load_Textblock2.Text = "Creating Form Controls..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
$StartButton.Add_Click({
    If ($WSIDEnterComboBox.Text) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "WSID Entered" $($WSIDEnterComboBox.Text) $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "WSID Entered" $($WSIDEnterComboBox.Text) $USERID}        
        $Script:GatherMenuTextblock.Text = "Validating Input: $($WSIDEnterComboBox.Text)..."   
        $MapStartLabel.Content = "Validating Input"
        $InfoStartLabel.Content = "Validating Input" 
        # Make all Elements of GatherInfo Visable
        $Test_Grid.Visibility = 'Hidden'
        $Start_Grid.Visibility = 'Hidden'
        $Theme_Grid.Visibility = 'Hidden'
        $Config_Grid.Visibility = 'Hidden'
        $Main_Grid.Visibility = 'Hidden'
        $Title_Grid.Visibility = 'Hidden'
        $MSG_Send_Grid.Visibility = 'Hidden'
        $SNIssue_Grid.Visibility = 'Hidden'
        $Gather_Grid.Visibility = 'Visible'
        $Map_Start.Visibility = 'Visible'
        $Map_Info.Visibility = 'Hidden'
        $Info_Start.Visibility = 'Visible'
        $Info_List.Visibility = 'Hidden'
        [System.Windows.Forms.Application]::DoEvents()      
        If (!(($WSIDEnterComboBox.Text).Contains("["))) {
            If ((($WSIDEnterComboBox.Text).Contains("-")) -or (($WSIDEnterComboBox.Text).Contains("."))) {
                $Script:ComputerName = ($WSIDEnterComboBox.Text).Replace(' ','')
                If ($SearchList.Count -eq 10) {
                    $Script:SearchList[0] = $SearchList[1]
                    $Script:SearchList[1] = $SearchList[2]
                    $Script:SearchList[2] = $SearchList[3]
                    $Script:SearchList[3] = $SearchList[4]
                    $Script:SearchList[4] = $SearchList[5]
                    $Script:SearchList[5] = $SearchList[6]
                    $Script:SearchList[6] = $SearchList[7]
                    $Script:SearchList[7] = $SearchList[8]
                    $Script:SearchList[8] = $SearchList[9]
                    $Script:SearchList.RemoveAt(9) | Out-Null    
                    }
                If ($SearchList.Count -lt 10) {
                    $Script:SearchList.Add($ComputerName) | Out-Null
                    $WSIDEnterComboBox.Items.Clear()
                    Foreach ($_ in $SearchList) {$WSIDEnterComboBox.Items.Add($_)}
                    }            
                }
            Else {
                $Script:InputUserID = ($WSIDEnterComboBox.Text).Replace(' ','')
                # Set Cursor to Waiting
                $Form_Main.Cursor = 'AppStarting'     
                MapMenu -Searchuser $($InputUserID.ToLower())
                If ($SearchList.Count -eq 10) {
                    $Script:SearchList[0] = $SearchList[1]
                    $Script:SearchList[1] = $SearchList[2]
                    $Script:SearchList[2] = $SearchList[3]
                    $Script:SearchList[3] = $SearchList[4]
                    $Script:SearchList[4] = $SearchList[5]
                    $Script:SearchList[5] = $SearchList[6]
                    $Script:SearchList[6] = $SearchList[7]
                    $Script:SearchList[7] = $SearchList[8]
                    $Script:SearchList[8] = $SearchList[9]
                    $Script:SearchList.RemoveAt(9) | Out-Null    
                    }
                If ($SearchList.Count -lt 10) {
                    $Script:SearchList.Add($ComputerName) | Out-Null
                    $WSIDEnterComboBox.Items.Clear()
                    Foreach ($_ in $SearchList) {$WSIDEnterComboBox.Items.Add($_)}
                    } 
                }
            }
        Else {
            [System.Windows.MessageBox]::Show("Invalid format. Please check your entry and try again.","Invalid Format",'Ok','Error') | Out-Null
            }
        }
    If ($ComputerName) {
        GatherInfo
        }
    Else {
        [System.Windows.MessageBox]::Show("Unable to find Computer Record for $($WSIDEnterComboBox.Text).`n`nPlease check your entry and try again.","No Records Found",'Ok','Error') | Out-Null
        StartMenu
        }
    })
$StartButton.Add_MouseUP({
    If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Safe Mode" $WSID $USERID}
    Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Safe Mode" $ComputerName $USERID}    
    # Enable SafeMode
    $Script:SafeMode = $True
    MainMenu
    })
$CancelButton.Add_Click({
    $Script:CancelActions = $True
    $Script:GatherMenuTextblock.Text = "Cancelling..."
    $Form_Main.Dispatcher.Invoke([action]{$GatherMenuTextblock},"Render")
    # Clear all jobs
    Get-Job | Remove-Job -Force | Out-Null
    })
$MLOCheckButton.Add_Click({
    If ((!($WSIDEnterComboBox.Text -like "*.*")) -and (!($WSIDEnterComboBox.Text -like "*-*")) -and ($WSIDEnterComboBox.Text -ne "")) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "MLO Check" $WSID $($WSIDEnterComboBox.Text)}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "MLO Check" $ComputerName $($WSIDEnterComboBox.Text)}        
        $Form_Main.Cursor = 'Wait'
        # Show Version
        $MainToolboxVersion.Visibility = 'Visible'
        $Script:StartMenuLabel2.Content = "Checking Enterprise Role of $($WSIDEnterComboBox.Text) for MLO..."
        $Form_Main.Dispatcher.Invoke([action]{$StartMenuLabel2},"Render")
        Try {$Script:MLORoleCheck = (New-Object System.DirectoryServices.DirectorySearcher -Property @{
                    PageSize = 1000
                    Filter = "(&(objectCategory=User)(SAMAccountName=$($WSIDEnterComboBox.Text)))"
                    SearchScope = 'Subtree'
                    SearchRoot = 'LDAP://YOURDOMAIN'
                    }).FindAll().Properties.title}
        Catch {$Script:MLORoleCheck = $Null}
        If ($MLORoleCheck) {
            If ($MLORoleCheck -like "*YOURROLE*") {
                [System.Windows.MessageBox]::Show("User: $($WSIDEnterComboBox.Text) IS a YOURSPECIALUSERTYPE!`n`nPlease send any escalations to YOURESCALTIONGROUP.`n`nPress OK to continue.","YOURSPECIALUSERTYPE Check",'Ok','Error') | Out-Null
                }
            Else {
                [System.Windows.MessageBox]::Show("User: $($WSIDEnterComboBox.Text) is NOT a YOURSPECIALUSERTYPE.`n`nPress OK to continue.","YOURSPECIALUSERTYPE",'Ok','Error') | Out-Null
                }
            }
        Else {
            [System.Windows.MessageBox]::Show("There was an error checking the active directory of $($WSIDEnterComboBox.Text)!`n`nPress OK to continue.","AD Error",'Ok','Error') | Out-Null
            }
        # Reset Cursor to Arrow
        $Form_Main.Cursor = 'Arrow' 
        # Reset Label Text       
        $StartMenuLabel2.Content = "Enter WSID/IP/USERID and Click Search"
        # Clear WSIDEnterComboBox Text
        $WSIDEnterComboBox.Text = $Null
        }
    })
$EMS_Button.Add_Click({
    $MSG_Send_MainTextblock.Text = "Enter the Message to Send below:"
    $MSG_Send_Textbox.Text = ""
    If (!$Credentials) { 
        Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
        Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
            $Script:Credentials = $Null
            }
        If ($Credentials) {
            $Domain = New-Object System.DirectoryServices.DirectoryEntry($("LDAP://" + ([ADSI]'').distinguishedName),$($credentials.username),$($credentials.GetNetworkCredential().password))
            If (!($Domain.name)) {
                [System.Windows.MessageBox]::Show("Invalid Credentials Detected!`n`nPlease try again by clicking the EMS Button.",'Credentials Error','OK','Error') | Out-Null
                $Script:Credentials = $Null
                }
            } 
        }
    If ($Credentials) {
        If ($Start_Grid.Visibility -eq 'Visible') {
            $Start_Grid.Visibility = 'Hidden'
            $Title_Grid.Visibility = 'Visible'
            $MSG_Send_Grid.Visibility = 'Visible'
            $MSG_Cancel_Button.IsCancel = $True 
            }
        }
    })

# EMS Menu Button Controls
$MSG_Cancel_Button.Add_Click({
    If ($MSG_Send_Grid.Visibility -eq 'Visible') {
        $MSG_Send_Grid.Visibility = 'Hidden'
        $Title_Grid.Visibility = 'Hidden'
        $Start_Grid.Visibility = 'Visible'
        $MSG_Cancel_Button.IsCancel = $False
        }    
    })
$MSG_Send_Button.Add_Click({
    $MSG_Send_MainTextblock.Text = "Sending Message..."
    SetEMSmsg
    If ($MSG_Send_Grid.Visibility -eq 'Visible') {
        $MSG_Send_Grid.Visibility = 'Hidden'
        $Title_Grid.Visibility = 'Hidden'
        $Start_Grid.Visibility = 'Visible'
        $MSG_Cancel_Button.IsCancel = $False
        }
    })
$MSG_Send_Textbox.Add_TextChanged({
    If ($MSG_Send_Textbox.Text -ne "") {
        $MSG_Send_Button.IsDefault = $True
        $MSG_Send_Button.IsEnabled = $True
        }
    Else {
        $MSG_Send_Button.IsEnabled = $False
        $MSG_Send_Button.IsDefault = $False
        }
    })

# Main Menu Button Controls
$StartMenuButton.Add_Click({
    # Clear all jobs
    Get-Job | Remove-Job -Force | Out-Null
    $Script:UpdateSwitch = $True
    StartMenu
    })
$StartMenuButton.Add_MouseUP({
    If ($SafeMode -eq $False) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Refreshed" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Refreshed" $ComputerName $USERID}
        $Script:InputUserID = $Null
        # Clear MapList
        $MapList.Clear()
        # Set Cursor to Waiting
        $Form_Main.Cursor = 'Wait'    
        GatherInfo        
        }
    Else {UpdateClipboard}
    })
$WSInfoButton.Add_Click({
    If ($SafeMode -eq $False) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Workstation Info" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Workstation Info" $ComputerName $USERID}        
        InfoMenu
        }
    Else {
        $InfoStartLabel.Content = "Please Connect to a WSID"
        $Info_Start.Visibility = 'Visible'
        $Info_List.Visibility = 'Hidden'        
        $Form_Info.Show() | Out-Null
        }
    })
$WSInfoButton.Add_MouseUP({
    If (($SafeMode -eq $False) -and ($UserID) -and ($UserID -ne "No User Found")) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Mappings Window" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Mappings Window" $ComputerName $USERID}
        If (!$MapList) {MapMenu -Searchuser $($UserID.ToLower())}
        $Map_Info.Visibility = 'Visible'
        $Map_Start.Visibility = 'Hidden'
        If ($MapList) {$Form_Map.Show() | Out-Null}
        }
    Else {
        $MapStartLabel.Content = "Please Connect to a WSID with a User Present"
        $Map_Start.Visibility = 'Visible'
        $Map_Info.Visibility = 'Hidden'
        $Form_Map.Show() | Out-Null       
        }
    })
$WSIDButton.Add_Click({
    If ($ComputerName) {
        $Choice = [System.Windows.MessageBox]::Show("This will Dameware into $WSID.`n`nDo you wish to continue?","Dameware Into Computer",'YesNo','Question')
        If ($Choice -eq 'Yes') {
            If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Dameware" $WSID $USERID}
            Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Dameware" $ComputerName $USERID}
            Try {Start-Process -FilePath "C:\Program Files (x86)\SolarWinds\DameWare Remote Support\DWRCC.exe" -WorkingDirectory "C:\Program Files (x86)\SolarWinds\DameWare Remote Support" -ArgumentList "-c: -h: -m:$ComputerName" -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Execute Command",'Ok','Error') | Out-Null}
            }
        }
    })
$WSIDButton.Add_MouseUP({
    If ($ComputerName) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Verification" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Verification" $ComputerName $USERID}        
        Try {Set-Item WSMan:\localhost\Client\TrustedHosts -Value $ComputerName -ErrorAction Stop -Force}
        Catch {[System.Windows.MessageBox]::Show("Error adding $ComputerName to trusted hosts.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Add to Trusted Hosts",'Ok','Error') | Out-Null}
        Try {$Session = New-PSSession -ComputerName $ComputerName -Authentication Negotiate -ErrorAction SilentlyContinue}
        Catch {[System.Windows.MessageBox]::Show("Error creating session to $ComputerName.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Create Session to WSID",'Ok','Error') | Out-Null}
        If (($Session) -and ($UserID)) {
            Try {Invoke-Command -Session $Session -AsJob -JobName "Verification" -ScriptBlock {param($Agent, $UserID)
                    $Message = "This is a verification message from $Agent with the U.S. Bank IT Service Center.`n`nPlease give $Agent the last three digits of your Workstation ID:`n`n$($env:COMPUTERNAME.substring($env:COMPUTERNAME.length - 3, 3))`n`n(If you have not contacted the IT Service Center, simply close this message by clicking Ok.)"
                    msg $UserID $Message
                    } -Argumentlist ($Agent, $UserID) -ErrorAction SilentlyContinue | Out-Null
                }
            Catch {[System.Windows.MessageBox]::Show("Error connecting to $ComputerName.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Connect to WSID",'Ok','Error') | Out-Null}
            }
        }
    })
$UPTIMEButton.Add_Click({
    If ($UPTime) {
        $Choice = [System.Windows.MessageBox]::Show("This will force a restart of $WSID.`n`nDo you wish to continue?","Restart Computer",'YesNo','Exclamation')
        If ($Choice -eq 'Yes') {
            If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Restart" $WSID $USERID}
            Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Restart" $ComputerName $USERID}
            If ($WSID) {$Script:RestartLabel.Content = "Restarting $WSID..."}
            Else {$Script:RestartLabel.Content = "Restarting $ComputerName..."}
            $Restart_Grid.Visibility = 'Visible'
            $Title_Grid.Visibility = 'Hidden'
            $Form_Main.Dispatcher.Invoke([action]{$RestartLabel},"Render")
            Start-Job -Name "RESTARTPC" {
	            param ($ComputerName)
	            $progresspreference = 'SilentlyContinue'
                [void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
                Try {Restart-Computer -ComputerName $ComputerName -Force -ErrorAction Stop}
                Catch {[Microsoft.VisualBasic.Interaction]::MsgBox("Failed to Restart Computer: $($ComputerName)`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","OKOnly,SystemModal,Critical","Restart Computer Failed") | Out-Null}
	            } -ArgumentList $ComputerName | Out-Null
            Start-Sleep -m 500
            $Title_Grid.Visibility = 'Visible'
            $Restart_Grid.Visibility = 'Hidden'
            }
        }
    })
$UPTIMEButton.Add_MouseUP({
    If (($USERID) -and ($USERID -ne "No User Found")) {
        $Choice = [System.Windows.MessageBox]::Show("This will force a log off of $USERID.`n`nDo you wish to continue?","Logoff User",'YesNo','Error')
        If ($Choice -eq 'Yes') {
            If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Logoff User" $WSID $USERID}
            Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Logoff User" $ComputerName $USERID}
            $Script:RestartLabel.Content = "Logging off $USERID..."
            $Restart_Grid.Visibility = 'Visible'
            $Title_Grid.Visibility = 'Hidden'
            $Form_Main.Dispatcher.Invoke([action]{$RestartLabel},"Render")
            Start-Job -Name "LOGGINGUSER" {
	            param ($ComputerName, $USERID)
	            $progresspreference = 'SilentlyContinue'
                [void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')
                Try {(Get-WmiObject -Class Win32_OperatingSystem -ComputerName $ComputerName -ErrorAction Stop).Win32Shutdown(4)}
                Catch {[Microsoft.VisualBasic.Interaction]::MsgBox("Failed to Log Off User: $($USERID)`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","OKOnly,SystemModal,Critical","User Logoff Failed") | Out-Null}
	            } -ArgumentList $ComputerName, $USERID | Out-Null
            Start-Sleep -m 500
            $Title_Grid.Visibility = 'Visible'
            $Restart_Grid.Visibility = 'Hidden'
            }
        }
    })
$USERIDButton.Add_Click({
    If (($EmailAddress) -and ($EmailAddress -ne "No User Found")) {
        If (!$Credentials) { # If Credentials are Absent
            Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                $Script:Credentials = $Null}                        
            }
        If ($Credentials) { # If Credentials are Present
            If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Skyped User" $WSID $USERID}
            Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Skyped User" $ComputerName $USERID}
            Try {Start-Process -FilePath lync.exe -ArgumentList "sip:$EmailAddress" -Credential $Credentials -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Not able to Skype user: $UserID.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Skype User",'Ok','Error') | Out-Null}
            }
        }
    })
$USERIDButton.Add_MouseUP({
    If (($ManagerEmail) -and ($ManagerUserID)) {
        If (!$Credentials) { # If Credentials are Absent
            Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                $Script:Credentials = $Null}                        
            }
        If ($Credentials) { # If Credentials are Present
            If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Skyped Manager" $WSID $USERID}
            Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Skyped Manager" $ComputerName $USERID}
            Try {Start-Process -FilePath lync.exe -ArgumentList "sip:$ManagerEmail" -Credential $Credentials -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Not able to Skype user: $ManagerUserID.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Skype User",'Ok','Error') | Out-Null}
            }
        }
    })
$IPButton.Add_Click({
    If ($ComputerName) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Ping Test IPv4" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Ping Test IPv4" $ComputerName $USERID}
        Start-Process -FilePath "C:\Windows\system32\cmd.exe" -ArgumentList "/K ping $ComputerName -t -4" -ErrorAction SilentlyContinue
        }
    })
$PWDEXPIRESButton.Add_Click({
    If ($ComputerName) {
        $Process_Grid.Visibility = 'Visible'
        $Main_Grid.Visibility = 'Hidden'
        $Title_Grid.Visibility = 'Hidden'
        $ProcessTextbox.Focus()
        $ProcessButton.IsDefault = $True
        $ProcessCancelButton.IsCancel = $True
        }
    })
$PWDEXPIRESButton.Add_MouseUP({
    If ($ComputerName) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Event Viewer" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Event Viewer" $ComputerName $USERID}
        Try {Start-Process -FilePath "C:\Windows\System32\eventvwr.msc" -WorkingDirectory "C:\Windows\System32" -ArgumentList "/computer:\\$ComputerName" -ErrorAction Stop}
        Catch {[System.Windows.MessageBox]::Show("Exception Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Execute Command",'Ok','Error') | Out-Null}
        }    
    })
$OSButton.Add_Click({
    If ($ComputerName) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Windows Explorer" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Windows Explorer" $ComputerName $USERID}
        Try {Start-Process -FilePath "C:\Windows\explorer.exe" -ArgumentList "\\$ComputerName\C$" -Verb RunAs -ErrorAction Stop}
        Catch {[System.Windows.MessageBox]::Show("Not able to open $ComputerName's C$.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Open C Drive",'Ok','Error') | Out-Null}
        }
    })
$OSButton.Add_MouseUP({
    If ($ComputerName) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote CMD" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote CMD" $ComputerName $USERID}
        Try {Start-Process -FilePath "PsExec.exe" -ArgumentList "\\$ComputerName CMD" -ErrorAction Stop}
        Catch {[System.Windows.MessageBox]::Show("Not able to open Command prompt to $ComputerName.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Open Command Prompt",'Ok','Error') | Out-Null}
        }
    })
$PasteFixesButton.Add_Click({Set-Clipboard -Value $FixList})
$AdminExplorerButton.Add_Click({
    If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Admin Explorer" $WSID $USERID}
    Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Admin Explorer" $ComputerName $USERID}        
    Start-Job -Name "ADMINEXPLORER" {
        [void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
        [void][System.Reflection.Assembly]::LoadWithPartialName('PresentationFramework')
        $FileDialog = New-Object System.Windows.Forms.Openfiledialog
        $FileDialog.initialDirectory = "C:\"
        $FileDialog.title = "Select File to Open with Service ID"   
        $FileDialog.ShowHelp = $True
        $FileDialog.ShowInTaskbar = $True
        $Result = $FileDialog.ShowDialog((New-Object System.Windows.Forms.Form -Property @{TopMost = $True}))
        If ($Result -eq "OK") {$FileName = $FileDialog.filename} Else {$FileName = $Null}
        If ($FileName) {
            Try {Start-Process -FilePath $FileName -WorkingDirectory (Split-Path -Path $FileName -ErrorAction SilentlyContinue) -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("There was an error executing the file. Please see the error code below to troubleshoot this issue.`n`nException Error: $($_.Exception.Message)`n`nPress OK to continue.","Error Opening File",'Ok','Error') | Out-Null
                }
            }
	    } | Out-Null   
    })
$EscalationButton.Add_Click({
    If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Escalation Form" $WSID $USERID}
    Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Escalation Form" $ComputerName $USERID}
    # Set Cursot to AppStarting
    $Form_Main.Cursor = 'AppStarting'
    # Make all Elements of GatherInfo Visable
    $Gather_Grid.Visibility = 'Visible'
    $Main_Grid.Visibility = 'Hidden'
    $Title_Grid.Visibility = 'Hidden'
    # Change Label to Show Gathering Info
    If ($USERID) {$Script:GatherMenuTextblock.Text = "Gathering Escalation info for $USERID..."} Else {$Script:GatherMenuTextblock.Text = "Opening Escalation Forms..."}
    $Form_Main.Dispatcher.Invoke([action]{$GatherMenuTextblock},"Render")
    # Set StartNew
    $Script:StartNew = $False
    # Populate Escalation Forms
    EscMain
    # Show Escalation Forms
    $Form_Esc.Show() | Out-Null
    # Make all Elements of MainMenu Visable
    $Title_Grid.Visibility = 'Visible'
    $Main_Grid.Visibility = 'Visible'
    $Gather_Grid.Visibility = 'Hidden'
    # Reset Cursor to Arrow
    $Form_Main.Cursor = 'Arrow'
    })
$EscalationButton.Add_MouseUP({SNIssueMenu})

# SN Issue Menu Controls
$SNIssueButton.Add_Click({
    ReportSNIssue "$LocalUser" "$($SNIssueComboBox.Text)" "$($SNIssueTextbox.Text)"
    MainMenu
    })
$SNIssueCancelButton.Add_Click({MainMenu})
$SNIssueComboBox.Add_SelectionChanged({
    If ($SNIssueComboBox.SelectedIndex -eq 0) {
        $SNIssueButton.Margin = "180,265,0,0"
        $SNIssueCancelButton.Margin = "218,300,0,0"
        $SNIssueTextbox.Visibility = "Hidden"
        $SNIssueComboBox.Focus() | Out-Null
        $SNIssueButton.IsDefault = $False
        $SNIssueButton.IsEnabled = $False
        }
    ElseIf ($SNIssueComboBox.SelectedIndex -eq 6) {
        $SNIssueButton.Margin = "180,338,0,0"
        $SNIssueCancelButton.Margin = "218,373,0,0"
        $SNIssueTextbox.Visibility = "Visible"
        $SNIssueTextbox.Focus() | Out-Null
        $SNIssueButton.IsDefault = $False
        $SNIssueButton.IsEnabled = $False
        }
    Else {
        $SNIssueButton.Margin = "180,265,0,0"
        $SNIssueCancelButton.Margin = "218,300,0,0"
        $SNIssueTextbox.Visibility = "Hidden"
        $SNIssueComboBox.Focus() | Out-Null
        $SNIssueButton.IsDefault = $True
        $SNIssueButton.IsEnabled = $True
        }
    })
$SNIssueTextbox.Add_TextChanged({
    If ($SNIssueTextbox.Text -ne "") {
        $SNIssueButton.IsDefault = $True
        $SNIssueButton.IsEnabled = $True
        }
    Else {
        $SNIssueButton.IsEnabled = $False
        $SNIssueButton.IsDefault = $False
        }
    })

# Process Menu Button Controls
$ProcessButton.Add_Click({
    If ($ProcessTextbox.Text -ne "") {
        $RemoteProcess = $Null
        $RemoteProcess = $ProcessTextbox.Text
        If ($RemoteProcess) {
            If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Stop Process $RemoteProcess" $WSID $USERID}
            Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Remote Stop Process $RemoteProcess" $ComputerName $USERID}
            $Script:GatherMenuTextblock.Text = "Stopping $RemoteProcess..."
            $Gather_Grid.Visibility = 'Visible'
            $Process_Grid.Visibility = 'Hidden'
            $Main_Grid.Visibility = 'Hidden'
            $Title_Grid.Visibility = 'Hidden'
            $CancelButton.Visibility = 'Hidden'
            [System.Windows.Forms.Application]::DoEvents()
            $Form_Main.Cursor = 'AppStarting'
            $ProcessInfo = Get-WmiObject -Class Win32_Process -ComputerName $ComputerName -Filter "name LIKE '%$RemoteProcess%'" -ErrorAction SilentlyContinue
            $Form_Main.Cursor = 'Arrow'
            If ($ProcessInfo) {
                $Form_Main.Cursor = 'AppStarting'
                $Return = $ProcessInfo.terminate()
                $Form_Main.Cursor = 'Arrow'
                If ($Return.ReturnValue -ne 0) {
                    If ($WSID) {[System.Windows.MessageBox]::Show("Process: $RemoteProcess could not be stopped on $WSID.","Process Not Stopped",'Ok','Error') | Out-Null}
                    Else {[System.Windows.MessageBox]::Show("Process: $RemoteProcess could not be stopped on $ComputerName.","Process Not Stopped",'Ok','Error') | Out-Null}                    
                    }
                }
            Else {
                If ($WSID) {[System.Windows.MessageBox]::Show("Process: $RemoteProcess was not found on $WSID.","Process Not Found",'Ok','Error') | Out-Null}
                Else {[System.Windows.MessageBox]::Show("Process: $RemoteProcess was not found on $ComputerName.","Process Not Found",'Ok','Error') | Out-Null}
                }
            $ProcessTextbox.Text = ""
            $Title_Grid.Visibility = 'Visible'
            $Main_Grid.Visibility = 'Visible'
            $Gather_Grid.Visibility = 'Hidden'
            $Process_Grid.Visibility = 'Hidden'
            $ProcessButton.IsDefault = $False
            $ProcessCancelButton.IsCancel = $False
            }        
        }
    Else {
        $Title_Grid.Visibility = 'Visible'
        $Main_Grid.Visibility = 'Visible'
        $Gather_Grid.Visibility = 'Hidden'
        $Process_Grid.Visibility = 'Hidden'
        $ProcessButton.IsDefault = $False
        $ProcessCancelButton.IsCancel = $False       
        }
    })
$ProcessCancelButton.Add_Click({
    $ProcessTextbox.Text = ""
    $Title_Grid.Visibility = 'Visible'
    $Main_Grid.Visibility = 'Visible'
    $Gather_Grid.Visibility = 'Hidden'
    $Process_Grid.Visibility = 'Hidden'
    $ProcessButton.IsDefault = $False
    $ProcessCancelButton.IsCancel = $False
    })

# Map Menu Button Controls
$MapScriptButton.Add_Click({
    If ($LogonScript) {
        If ($WSID) {
            Clipboard -Form $Form_Map -Button $MapScriptButton -Text $LogonScript
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Login Script" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Map -Button $MapScriptButton -Text $LogonScript
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Login Script" $ComputerName $USERID
            }
        }
    })
<#$MapScriptButton.Add_MouseUP({
    If (($SafeMode -eq $False) -and ($LogonScript) -and ($UserID)) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "Login Script Search" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "Login Script Search" $ComputerName $USERID}
        $Script:MapTitleLabel.Content = "Checking Logonscript: $LogonScript"
        $Form_Map.Dispatcher.Invoke([action]{$MapTitleLabel},"Render")
        [System.Windows.Forms.Application]::DoEvents()
        Start-Sleep 1
        Start-Job -Name "LOGONSCRIPT" {
	        param ($LogonScript, $EnterpriseRole, $UserID)
	        $progresspreference = 'SilentlyContinue'
            [void][System.Reflection.Assembly]::LoadWithPartialName('Microsoft.VisualBasic')       
            $Script:RolePresent = $False
            $Script:UserPresent = $False
            $ScriptInfo = Get-Content -Path "\\DOMAIN\netlogon\$LogonScript" -ErrorAction Stop
            Foreach ($_ in $ScriptInfo) {
                If ($_ -like "*$EnterpriseRole*") {$Script:RolePresent = $True}
                If ($_ -like "*$UserID*") {$Script:UserPresent = $True}
                }
            If (($RolePresent -eq $True) -or ($UserPresent -eq $True)) {
                If (($RolePresent -eq $True) -and ($UserPresent -eq $True)) {$Choice = [Microsoft.VisualBasic.Interaction]::MsgBox("Found User & Role in $($LogonScript).`n`nDo you wish to Open $($LogonScript)?","YesNo,SystemModal,Information","Found User & Role")}
                If (($RolePresent -eq $True) -and ($UserPresent -eq $False)) {$Choice = [Microsoft.VisualBasic.Interaction]::MsgBox("Found Role in $($LogonScript).`n`nDo you wish to Open $($LogonScript)?","YesNo,SystemModal,Information","Found Role")}
                If (($RolePresent -eq $False) -and ($UserPresent -eq $True)) {$Choice = [Microsoft.VisualBasic.Interaction]::MsgBox("Found User in $($LogonScript).`n`nDo you wish to Open $($LogonScript)?","YesNo,SystemModal,Information","Found User")}
                }
            Else {$Choice = [Microsoft.VisualBasic.Interaction]::MsgBox("Did not find User or Role in $($LogonScript)!`n`nDo you wish to Open $($LogonScript)?","YesNo,SystemModal,Critical","Role or User Not Found")}
            If ($Choice -eq 'Yes') {
                Try {Start-Process -FilePath "c:\windows\system32\notepad.exe" -ArgumentList "\\DOMAIN\netlogon\$LogonScript" -ErrorAction Stop}
                Catch {[Microsoft.VisualBasic.Interaction]::MsgBox("Error Opening File!`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","OkOnly,SystemModal,Critical","Error Opening File") | Out-Null}
                }
            } -ArgumentList $LogonScript, $EnterpriseRole, $UserID | Out-Null
        $Script:MapTitleLabel.Content = "Drive Mappings for Selected User"
        $Form_Map.Dispatcher.Invoke([action]{$MapTitleLabel},"Render")        
        }
    })
#>
$MapUserTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Username) {
            If ($WSID) {
                Clipboard -Form $Form_Map -Button $MapUserTextblock -Text $Username
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP User Name" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Map -Button $MapUserTextblock -Text $Username
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP User Name" $ComputerName $USERID
                }
            }
        }
    })
$MapRoleTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($EnterpriseRole) {
            If ($WSID) {
                Clipboard -Form $Form_Map -Button $MapRoleTextblock -Text $EnterpriseRole
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Enterprise Role" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Map -Button $MapRoleTextblock -Text $EnterpriseRole
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Enterprise Role" $ComputerName $USERID
                }
            }
        }
    })
$MapServerTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($LogonServer) {
            If ($WSID) {
                Clipboard -Form $Form_Map -Button $MapServerTextblock -Text $LogonServer
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Server" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Map -Button $MapServerTextblock -Text $LogonServer
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Server" $ComputerName $USERID
                }
            }
        }
    })
$MapTimeTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($MapTimeStamp) {
            If ($WSID) {
                Clipboard -Form $Form_Map -Button $MapTimeTextblock -Text $MapTimeStamp
                Writelog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Timestamp" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Map -Button $MapTimeTextblock -Text $MapTimeStamp
                WrietLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Mappings Window" "C/P MAP Timestamp" $ComputerName $USERID
                }
            }
        }
    })

# Help, Minimize, and Exit Button Controls
$HelpButton.Add_Click({
    If (Test-Path "$DocsFolder\DEPT Toolbox Help.pdf") {
        If ($Acrobat -eq $Null) {$Script:Acrobat = (((Get-ChildItem "HKLM:\SOFTWARE\WOW6432Node\Adobe" -Recurse) | Foreach {Get-ItemProperty –Path $_.PsPath}).InstalledValidate) | Select-Object -first 1}
        If (!$Credentials) { # If Credentials are Absent
            Try {$Script:Credentials = Get-Credential -Message "To enable this feature you must provide your Preferred ID Credentials. You must use the format of DOMAIN\USERNAME. Once you have done this, you will not be prompted again." -User "DOMAIN\$LocalUser" -ErrorAction Stop}
            Catch {[System.Windows.MessageBox]::Show("Credentials Error: $($_.Exception.Message)`n`nPress OK to close this message.",'Credentials Error','OK','Error') | Out-Null
                $Script:Credentials = $Null}                        
            }
        If ($Credentials) { # If Credentials are Present
            If (($Acrobat -ne $Null) -and ($Acrobat -ne "")) {
                Try {Start-Process -FilePath $Acrobat -Argumentlist "DEPT Toolbox Help.pdf" -WorkingDirectory $DocsFolder -Credential $Credentials -ErrorAction Stop}
                Catch {[System.Windows.MessageBox]::Show("Not able to open Help Document.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Open Help Doc",'Ok','Error') | Out-Null}
                }
            Else {
                Try {Start-Process -FilePath AcroRD32.exe -Argumentlist "DEPT Toolbox Help.pdf" -WorkingDirectory $DocsFolder -Credential $Credentials -ErrorAction Stop}
                Catch {[System.Windows.MessageBox]::Show("Not able to open Help Document.`n`nException Error: $($_.Exception.Message)`n`nPress OK to close this message.","Cannot Open Help Doc",'Ok','Error') | Out-Null}
                }
            }
        }
    })
$MinimizeButton.Add_Click({$Form_Main.WindowState = 1})
$ExitButton.Add_Click({$Form_Main.Close() | Out-Null})
$InfoExitButton.Add_Click({$Form_Info.Hide() | Out-Null})
$MapExitButton.Add_Click({$Form_Map.Hide() | Out-Null})

# Info Menu Button Controls
$InfoSwitchButton.Add_Click({
    If ($Info_General.Visibility -eq 'Hidden') {
        $Info_Advanced.Visibility = 'Hidden'
        $Info_General.Visibility = 'Visible'
        $InfoSwitchButton.Content = "Advanced"
        }
    ElseIf ($Info_Advanced.Visibility -eq 'Hidden') {
        $Info_General.Visibility = 'Hidden'
        $Info_Advanced.Visibility = 'Visible'
        $InfoSwitchButton.Content = "General"        
        }
    })

# Info Menu Scroller Controls
$VersionScroller.Add_ScrollChanged({
    If ($VersionScroller.ComputedVerticalScrollBarVisibility -eq "Visible") {$VersionScroller.Width = "275"}
    Else {$VersionScroller.Width = "260"}
    })
$NetScroller.Add_ScrollChanged({
    If ($NetScroller.ComputedVerticalScrollBarVisibility -eq "Visible") {$NetScroller.Width = "220"}
    Else {$NetScroller.Width = "200"}
    })

# Info Menu Button/TextBox Controls
$InfoWSIDTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoWSIDTextblock -Text $WSID
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO WSID" $WSID $USERID
            }
        }
    })
$InfoIPTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($IPAddress) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoIPTextblock -Text $IPAddress
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO IP" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoIPTextblock -Text $IPAddress
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO IP" $ComputerName $USERID
                }
            }
        }
    })
$InfoUSERIDTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($USERID) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoUSERIDTextblock -Text $USERID
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO USERID" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoUSERIDTextblock -Text $USERID
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO USERID" $ComputerName $USERID
                }
            }
        }
    })
$InfoMOBILETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Mobile) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoMOBILETextblock -Text $Mobile
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Mobile" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoMOBILETextblock -Text $Mobile
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Mobile" $ComputerName $USERID
                }
            }
        }
    })
$InfoMODELTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Model) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoMODELTextblock -Text $Model
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Model" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoMODELTextblock -Text $Model
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Model" $ComputerName $USERID
                }
            }
        }
    })
$InfoSERIALTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Serial) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoSERIALTextblock -Text $Serial
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Serial" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoSERIALTextblock -Text $Serial
                WrtieLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Serial" $ComputerName $USERID
                }
            }
        }
    })
$InfoMEMORYTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($MEMORY) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoMEMORYTextblock -Text $MEMORY
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Memory" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoMEMORYTextblock -Text $MEMORY
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Memory" $ComputerName $USERID
                }
            }
        }
    })
$InfoOSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($OSVersion) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoOSTextblock -Text $OSVersion
                WrtieLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO OS" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoOSTextblock -Text $OSVersion
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO OS" $ComputerName $USERID
                }
            }
        }
    })
$InfoFULLNAMETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($FullName) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoFULLNAMETextblock -Text $FullName
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Full Name" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoFULLNAMETextblock -Text $FullName
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Full Name" $ComputerName $USERID
                }
            }
        }
    })
$InfoEMAILADDRESSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($EmailAddress) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoEMAILADDRESSTextblock -Text $EmailAddress
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Email" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoEMAILADDRESSTextblock -Text $EmailAddress
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Email" $ComputerName $USERID
                }
            }
        }
    })
$InfoMANAGERNAMETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($ManagerName) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoMANAGERNAMETextblock -Text $ManagerName
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Manager" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoMANAGERNAMETextblock -Text $ManagerName
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Manager" $ComputerName $USERID
                }
            }
        }
    })
$InfoDEPTNAMETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($DeptName) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoDEPTNAMETextblock -Text $DeptName
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Dept" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoDEPTNAMETextblock -Text $DeptName
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Dept" $ComputerName $USERID
                }
            }
        }
    })
$InfoJOBTITLETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($JobTitle) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoJOBTITLETextblock -Text $JobTitle
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Title" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoJOBTITLETextblock -Text $JobTitle
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Title" $ComputerName $USERID
                }
            }
        }
    })
$InfoLOCATIONTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Location) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoLOCATIONTextblock -Text $Location
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Location" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoLOCATIONTextblock -Text $Location
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Location" $ComputerName $USERID
                }
            }
        }
    })
$InfoDIVISIONTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Division) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoDIVISIONTextblock -Text $Division
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Division" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoDIVISIONTextblock -Text $Division
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Division" $ComputerName $USERID
                }
            }
        }
    })
$InfoBUSINESSLINETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($BusinessLine) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoBUSINESSLINETextblock -Text $BusinessLine
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Business Line" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoBUSINESSLINETextblock -Text $BusinessLine
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Business Line" $ComputerName $USERID
                }
            }
        }
    })
$InfoENTERPRISEROLETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($EnterpriseRole) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoENTERPRISEROLETextblock -Text $EnterpriseRole
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Enterprise Role" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoENTERPRISEROLETextblock -Text $EnterpriseRole
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Enterprise Role" $ComputerName $USERID
                }
            }
        }
    })
$InfoEMPLOYEETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Employee) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoEMPLOYEETextblock -Text $Employee
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Employee Type" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoEMPLOYEETextblock -Text $Employee
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Employee Type" $ComputerName $USERID
                }
            }
        }
    })
$InfoPHONETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($PhoneNumber) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoPHONETextblock -Text $PhoneNumber
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Phone Number" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoPHONETextblock -Text $PhoneNumber
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Phone Number" $ComputerName $USERID
                }
            }
        }
    })
$InfoMAKETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Maker) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoMAKETextblock -Text $Maker
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Make" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoMAKETextblock -Text $Maker
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Make" $ComputerName $USERID
                }
            }
        }
    })
$InfoCHASSISTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($Chassis) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoCHASSISTextblock -Text $Chassis
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Chassis" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoCHASSISTextblock -Text $Chassis
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Chassis" $ComputerName $USERID
                }
            }
        }
    })
$InfoINSTALLTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($InstallDate) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoINSTALLTextblock -Text $InstallDate
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Installed" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoINSTALLTextblock -Text $InstallDate
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Installed" $ComputerName $USERID
                }
            }
        }
    })
$InfoTZTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($TimeZone) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoTZTextblock -Text $TimeZone
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Installed" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoTZTextblock -Text $TimeZone
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Installed" $ComputerName $USERID
                }
            }
        }
    })
$InfoDATETIMETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($DateTime) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoDATETIMETextblock -Text $DateTime
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Installed" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoDATETIMETextblock -Text $DateTime
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Installed" $ComputerName $USERID
                }
            }
        }
    })
$InfoPWDEXPIRESTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($PwdExpires) {
            If ($WSID) {
                Clipboard -Form $Form_Info -Button $InfoPWDEXPIRESTextblock -Text $PwdExpires
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Pwd Expires" $WSID $USERID
                }
            Else {
                Clipboard -Form $Form_Info -Button $InfoPWDEXPIRESTextblock -Text $PwdExpires
                WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Pwd Expires" $ComputerName $USERID
                }
            }
        }
    })
$InfoCPUDATATextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoCPUDATATextblock -Text $InfoCPUDATATextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CPU Information" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoCPUDATATextblock -Text $InfoCPUDATATextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CPU Information" $ComputerName $USERID
            }
        }
    })
$InfoHDDDATATextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoHDDDATATextblock -Text $InfoHDDDATATextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO HDD Information" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoHDDDATATextblock -Text $InfoHDDDATATextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO HDD Information" $ComputerName $USERID
            }
        }
    })
$InfoVERSIONDATATextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoVERSIONDATATextblock -Text "$($InfoVERSIONDATATextblock.Text)"
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO OS Version History" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoVERSIONDATATextblock -Text "$($InfoVERSIONDATATextblock.Text)"
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO OS Version History" $ComputerName $USERID
            }
        }
    })
$InfoNETDATATextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoNETDATATextblock -Text "$($InfoNETDATATextblock.Text)"
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Network Information" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoNETDATATextblock -Text "$($InfoNETDATATextblock.Text)"
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO Network Information" $ComputerName $USERID
            }
        }
    })
$InfoCCMCLIENTVERSIONTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoCCMCLIENTVERSIONTextblock -Text $InfoCCMCLIENTVERSIONTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CCM Client Version" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoCCMCLIENTVERSIONTextblock -Text $InfoCCMCLIENTVERSIONTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CCM Client Version" $ComputerName $USERID
            }
        }
    })
$InfoCCMSETUPSTATUSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoCCMSETUPSTATUSTextblock -Text $InfoCCMSETUPSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CCM Setup Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoCCMSETUPSTATUSTextblock -Text $InfoCCMSETUPSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P CCM Setup Status" $ComputerName $USERID
            }
        }
    })
$InfoCCMSTATEMSGTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoCCMSTATEMSGTextblock -Text $InfoCCMSTATEMSGTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CCM State Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoCCMSTATEMSGTextblock -Text $InfoCCMSTATEMSGTextblock.Text
             WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P CCM State Status" $ComputerName $USERID
             }
        }
    })
$InfoCCMMODETextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoCCMMODETextblock -Text $InfoCCMMODETextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CCM Mode Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoCCMMODETextblock -Text $InfoCCMMODETextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P CCM Mode Status" $ComputerName $USERID
            }
        }
    })
$InfoCCMEXECSTATUSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoCCMEXECSTATUSTextblock -Text $InfoCCMEXECSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO CCM Service Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoCCMEXECSTATUSTextblock -Text $InfoCCMEXECSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P CCM Service Status" $ComputerName $USERID
            }
        }
    })
$InfoBITSSTATUSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoBITSSTATUSTextblock -Text $InfoBITSSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO BITS Service Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoBITSSTATUSTextblock -Text $InfoBITSSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P BITS Service Status" $ComputerName $USERID
            }
        }
    })
$InfoWUAUSERVSTATUSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoWUAUSERVSTATUSTextblock -Text $InfoWUAUSERVSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO WUAU Service Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoWUAUSERVSTATUSTextblock -Text $InfoWUAUSERVSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P WUAU Service Status" $ComputerName $USERID
            }
        }
    })
$InfoWINMGMTSTATUSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoWINMGMTSTATUSTextblock -Text $InfoWINMGMTSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO WINMGMT Service Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoWINMGMTSTATUSTextblock -Text $InfoWINMGMTSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P WINMGMT Service Status" $ComputerName $USERID
            }
        }
    })
$InfoRREGISTRYSTATUSTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoRREGISTRYSTATUSTextblock -Text $InfoRREGISTRYSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P INFO REMREG Service Status" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoRREGISTRYSTATUSTextblock -Text $InfoRREGISTRYSTATUSTextblock.Text
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P REMREG Service Status" $ComputerName $USERID
            }
        }
    })
$InfoDockTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoDockTextblock -Text "$($CDock)"
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P C-DOCK" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoDockTextblock -Text $Dock
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P C-DOCK" $ComputerName $USERID
            }
        }
    })
$InfoRELEASEIDTextblock.Add_PreviewMouseDown({
    If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {
        If ($WSID) {
            Clipboard -Form $Form_Info -Button $InfoRELEASEIDTextblock -Text $ReleaseID
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P VERSION" $WSID $USERID
            }
        Else {
            Clipboard -Form $Form_Info -Button $InfoRELEASEIDTextblock -Text $ReleaseID
            WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Workstation Info" "C/P VERSION" $ComputerName $USERID
            }
        }
    })

# Configuration Menu Button Controls
$ConfigButton.Add_Click({ConfigMenu -Lastmenu $Menu})
$ConfigTestButton.Add_Click({
    # Disable Save Config
    $ConfigConfirmButton.IsEnabled = $False
    # Reset Check Marks
    ResetCheckMarks
    # Test Foregound Color and Background Color Settings
    Try {$TestButton.Foreground = (($ConfigMainForeTextBox.Text).Replace(' ',''))} # Test Main Font Color
    Catch {
        $Script:MainForeCheckLabel.Content = "$([char]0xFB)"
        $Script:MainForeCheckLabel.Foreground = "Red"
        }
    Try {$TestButton.Background = (($ConfigMainBackTextBox.Text).Replace(' ',''))} # Test Main Back Color
    Catch {
        $Script:MainBackCheckLabel.Content = "$([char]0xFB)"
        $Script:MainBackCheckLabel.Foreground = "Red"
        }
    Try {$TestButton.Foreground = (($ConfigSafeForeTextBox.Text).Replace(' ',''))} # Test Safe Font Color
    Catch {
        $Script:SafeForeCheckLabel.Content = "$([char]0xFB)"
        $Script:SafeForeCheckLabel.Foreground = "Red"
        }
    Try {$TestButton.Background = (($ConfigSafeBackTextBox.Text).Replace(' ',''))} # Test Safe Back Color
    Catch {
        $Script:SafeBackCheckLabel.Content = "$([char]0xFB)"
        $Script:SafeBackCheckLabel.Foreground = "Red"
        }
    # Test Background Image Settings
    If ($ConfigBackgroundTextBox.Text -ne "") {
        If (Test-Path $ConfigBackgroundTextBox.Text -ErrorAction SilentlyContinue) { # Test that image exists
            Try {$Script:TestImage = New-Object System.Uri("$($ConfigBackgroundTextBox.Text)")} # Test that image can be loaded
            Catch {
                $Script:SafeBackGroundCheckLabel.Content = "$([char]0xFB)"
                $Script:SafeBackGroundCheckLabel.Foreground = "Red"
                }
            If ($Script:SafeBackGroundCheckLabel.Content -eq "$([char]0xFC)") {
                Try {$Script:TestImageSource = new-object System.Windows.Media.Imaging.BitmapImage $TestImage} # Test that image can be converted to source
                Catch {
                    $Script:SafeBackGroundCheckLabel.Content = "$([char]0xFB)"
                    $Script:SafeBackGroundCheckLabel.Foreground = "Red"
                    }                    
                }
            If ($Script:SafeBackGroundCheckLabel.Content -eq "$([char]0xFC)") {
                Try {$Script:TestImageBrush = new-object System.Windows.Media.ImageBrush  $TestImageSource} # Test that image can be converted to brush
                Catch {
                    $Script:SafeBackGroundCheckLabel.Content = "$([char]0xFB)"
                    $Script:SafeBackGroundCheckLabel.Foreground = "Red"
                    }                    
                }
            }
        Else {
            $Script:TestImage = $Null
            $Script:TestImageSource = $Null
            $Script:TestImageBrush = $Null            
            $Script:SafeBackGroundCheckLabel.Content = "$([char]0xFB)"
            $Script:SafeBackGroundCheckLabel.Foreground = "Red"            
            }        
        }
    Else {
        $Script:TestImage = $Null
        $Script:TestImageSource = $Null
        $Script:TestImageBrush = $Null
        }
    # Test Background Opacity Settings
    If ($Script:SafeBackGroundCheckLabel.Content -eq "$([char]0xFC)") {
        If (($ConfigOpacityTextBox.Text -ne "") -and ($ConfigBackgroundTextBox.Text -ne "")) {
            If ($ConfigOpacityTextBox.Text -notlike "*.*") {
                Try {$Script:TestImageBrush.Opacity = ([int]$ConfigOpacityTextBox.Text)/100} # Test that image can be loaded
                Catch {
                    $Script:SafeOpactiyCheckLabel.Content = "$([char]0xFB)"
                    $Script:SafeOpactiyCheckLabel.Foreground = "Red"
                    }
                }
            Else {
                Try {$Script:TestImageBrush.Opacity = [int]$ConfigOpacityTextBox.Text} # Test that image can be loaded
                Catch {
                    $Script:SafeOpactiyCheckLabel.Content = "$([char]0xFB)"
                    $Script:SafeOpactiyCheckLabel.Foreground = "Red"
                    }
                }
            }
        Else {
            $ConfigOpacityTextBox.Text = ""
            }
        }
    # Set Window Style
    $Form_Main.WindowStyle = (($ConfigWindowComboBox.Text).Replace(' ',''))
    SetWindowStyle
    # Set Foreground and Background Settings
    If (($SafeMode -eq $False) -and ($ConfigMainThemeComboBox.Text -eq "Main Default")) {
        If ($Script:MainForeCheckLabel.Content -eq "$([char]0xFC)") {
            # Set Foreground Color of Relevant Items
            SetTextColor -Color (($ConfigMainForeTextBox.Text).Replace(' ',''))
            SetBorderBrush -Color (($ConfigMainForeTextBox.Text).Replace(' ',''))
            }
        If ($Script:MainBackCheckLabel.Content -eq "$([char]0xFC)") {SetBackground -Back (($ConfigMainBackTextBox.Text).Replace(' ',''))}
        }
    If (($SafeMode -eq $True) -and ($ConfigSafeThemeComboBox.Text -eq "Safe Default")) {
        If ($Script:SafeForeCheckLabel.Content -eq "$([char]0xFC)") {
            # Set Foreground Color of Relevant Items
            SetTextColor -Color (($ConfigSafeForeTextBox.Text).Replace(' ',''))
            SetBorderBrush -Color (($ConfigSafeForeTextBox.Text).Replace(' ',''))
            }
        If ($Script:SafeBackCheckLabel.Content -eq "$([char]0xFC)") {SetBackground -Back (($ConfigSafeBackTextBox.Text).Replace(' ',''))}
        }
    # Apply Selected Theme
    If (($SafeMode -eq $False) -and ($ConfigMainThemeComboBox.Text -ne "Main Default")) {
        Foreach ($Theme in $Themes) {
            If ($ConfigMainThemeComboBox.SelectedIndex -eq $Theme.Index) {
                If (!($ConfigBackgroundTextBox.Text)) {SetBackground -Back $Theme.BackColor}
                SetTextColor -Color $Theme.ForeColor
                SetBorderBrush -Color $Theme.ForeColor
                }
            } 
        }
    If (($SafeMode -eq $True) -and ($ConfigSafeThemeComboBox.Text -ne "Safe Default")) {
        Foreach ($Theme in $Themes) {
            If ($ConfigSafeThemeComboBox.SelectedIndex -eq $Theme.Index) {
                If (!($ConfigBackgroundTextBox.Text)) {SetBackground -Back $Theme.BackColor}
                SetTextColor -Color $Theme.ForeColor
                SetBorderBrush -Color $Theme.ForeColor                
                }
            } 
        }
    # Show Font Changes
    SetFontFamily -FontFamily "$($ConfigFontComboBox.Text)"
    # Show Background
    If ($Script:SafeBackGroundCheckLabel.Content -eq "$([char]0xFC)") {
        If ($ConfigBackgroundTextBox.Text) {
            $Script:TestImage = New-Object System.Uri("$($ConfigBackgroundTextBox.Text)")
            $Script:TestImageSource = new-object System.Windows.Media.Imaging.BitmapImage $TestImage 
            $Script:TestImageBrush = new-object System.Windows.Media.ImageBrush $TestImageSource
            $Script:TestImageBrush.Stretch = "UniformToFill"
            $Script:TestImageBrush.AlignmentY = "Center"
            $Script:TestImageBrush.AlignmentX = "Center"
            If ($Script:SafeOpactiyCheckLabel.Content -eq "$([char]0xFC)") {
                If ($ConfigOpacityTextBox.Text) {
                    If ($ConfigOpacityTextBox.Text -notlike "*.*") {$Script:TestImageBrush.Opacity = ([int]$ConfigOpacityTextBox.Text)/100}
                    Else {$Script:TestImageBrush.Opacity = $ConfigOpacityTextBox.Text}
                    }
                Else {$Script:TestImageBrush.Opacity = 100}
                }
            If ($safeMode -ne $True) {SetBackground -Back $TestImageBrush}
            }  
        }
    # Show Results
    ShowCheckMarks
    # Enable Set Config if Configuration Checks Out
    $ConfigConfirmButton.IsEnabled = $True
    If ($CheckMarks.Content -eq "$([char]0xFB)") {$ConfigConfirmButton.IsEnabled = $False}
    })
$ConfigConfirmButton.Add_Click({
    Foreach ($_ in $BrowserOptions) {If ($_.Browser -eq $ConfigBrowserComboBox.Text) {$Script:Browser = $_.Path}}
    $Script:OpenLink = $ConfigTabComboBox.Text
    $Script:WindowStyle = $ConfigWindowComboBox.Text
    $Script:MainTheme = $ConfigMainThemeComboBox.Text
    $Script:SafeTheme = $ConfigSafeThemeComboBox.Text
    $Script:Font = $ConfigFontComboBox.Text
    $Script:AlwaysOnTop = $ConfigOnTopComboBox.Text
    If (Test-Path $ConfigBackgroundTextBox.Text) {
        If (!(Test-Path "$CurrentDir\Backgrounds")) {New-Item -Path $CurrentDir -Name "Backgrounds" -ItemType "directory" -Force -ErrorAction SilentlyContinue}
        Copy-Item $ConfigBackgroundTextBox.Text -Destination "$CurrentDir\Backgrounds\$(Split-Path $ConfigBackgroundTextBox.Text -leaf)" -Force -ErrorAction SilentlyContinue
        If (Test-Path "$CurrentDir\Backgrounds\$(Split-Path $ConfigBackgroundTextBox.Text -leaf)") {$Script:Background = "$CurrentDir\Backgrounds\$(Split-Path $ConfigBackgroundTextBox.Text -leaf)"} Else {$Script:Background = $Null}
        }
    Else {$ConfigBackgroundTextBox.Text = ""}
    If ($ConfigBackgroundTextBox.Text -eq "") {$Script:Background = $Null}
    If ($ConfigOpacityTextBox.Text -ne "") {
        If ($ConfigOpacityTextBox.Text -notlike "*.*") {$Script:Opacity = ([int]$ConfigOpacityTextBox.Text)/100}
        Else {$Script:Opacity = $ConfigOpacityTextBox.Text}
        }
    Else {$Script:Opacity = $Null}
    If ($ConfigMainThemeComboBox.Text -like "*Main Default*") {
        $Script:TextColor = $ConfigMainForeTextBox.Text
        $Script:BackColor = $ConfigMainBackTextBox.Text
        }
    If ($ConfigSafeThemeComboBox.Text -like "*Safe Default*") {
        $Script:SafeTextColor = $ConfigSafeForeTextBox.Text
        $Script:SafeBackColor = $ConfigSafeBackTextBox.Text
        }
    $Form_Main.WindowStyle = $WindowStyle
    If (($ConfigMainThemeComboBox.Text -like "*Main Default*") -and ($ConfigSafeThemeComboBox.Text -like "*Safe Default*")) {SaveConfig -Option "Full"}
    If (($ConfigMainThemeComboBox.Text -notlike "*Main Default*") -and ($ConfigSafeThemeComboBox.Text -notlike "*Safe Default*")) {SaveConfig -Option "Full"}
    If (($ConfigMainThemeComboBox.Text -like "*Main Default*") -and ($ConfigSafeThemeComboBox.Text -notlike "*Safe Default*")) {SaveConfig -Option "Main"}
    If (($ConfigMainThemeComboBox.Text -notlike "*Main Default*") -and ($ConfigSafeThemeComboBox.Text -like "*Safe Default*")) {SaveConfig -Option "Safe"}
    SetConfig
    If ($ReturnMenu -eq "Main") {
        If ($LastBootTime -ne "Error") {
            If ($UpTime -like "*Day*") {$UPTIMEButton.Foreground = "Red"} Else {$UPTIMEButton.Foreground = $TextColor}
            }
        Else {$UPTIMEButton.Foreground = 'Red'}
        MainMenu
        }
    Else {StartMenu}
    })
$ConfigCancelButton.Add_Click({
    $Form_Main.WindowStyle = $WindowStyle
    GetConfig
    SetConfig
    ResetThemes
    If ($ReturnMenu -eq "Main") {
        MainMenu
        }
    Else {
        StartMenu
        }
    })
$ConfigResetButton.Add_Click({
    $Choice = [System.Windows.MessageBox]::Show("Are you sure you want to Reset the Configuration of the Agent Toolbox? This cannot be undone.","Reset Configuration",'YesNo','Error')
    If ($Choice -eq 'Yes') {
        Remove-Item -Path $ConfigFile -Force
        $Script:Browser = "C:\Program Files (x86)\Internet Explorer\iexplore.exe"
        $Script:OpenLink = "In New Tab"
        $Script:WindowStyle = "SingleBorderWindow"
        $Script:TextColor = "#FFFFFFFF"
        $Script:BackColor = "#FF00438F"
        $Script:SafeTextColor = "#FFFFFFFF"
        $Script:SafeBackColor = "#FF9B132D"
        $Script:MainTheme = "Main Default"
        $Script:SafeTheme = "Safe Default"
        $Script:Font = "Segoe UI"
        $Script:AlwaysOnTop = "Disabled"
        $Script:Background = $Null
        $Script:Opacity = $Null
        SaveConfig -Option "Full"
        GetConfig
        SetConfig
        ResetThemes
        If ($ReturnMenu -eq "Main") {
            MainMenu
            }
        Else {
            StartMenu
            }
        }
    })
$ConfigBackgroundFileButton.Add_Click({
    $FileDialog = New-Object Windows.Forms.Openfiledialog   
    If (Test-Path "$CurrentDir\Backgrounds") {$FileDialog.initialDirectory = "$CurrentDir\Backgrounds"} Else {$FileDialog.initialDirectory = "C:\"}  
    $FileDialog.title = "Select BMP for Agent Toolbox Background"   
    $FileDialog.filter = "Bitmap Files (*.bmp)|*.bmp"  
    $FileDialog.ShowHelp = $True 
    $FileDialog.ShowInTaskbar = $True
    $Result = $FileDialog.ShowDialog()
    If ($Result -eq "OK") {$ConfigBackgroundTextBox.Text = $FileDialog.filename}
    })

# Config Options Change Events
$ConfigBrowserComboBox.Add_SelectionChanged({ResetCheckMarks})
$ConfigTabComboBox.Add_SelectionChanged({ResetCheckMarks})
$ConfigWindowComboBox.Add_SelectionChanged({
    $ConfigConfirmButton.IsEnabled = $False
    ResetCheckMarks   
    })
$ConfigMainForeTextBox.Add_TextChanged({
    If ($ConfigMainForeTextBox.IsFocused -eq $True) {
        $ConfigConfirmButton.IsEnabled = $False
        ResetCheckMarks
        $ConfigMainThemeComboBox.SelectedIndex = 0
        }
    })
$ConfigMainBackTextBox.Add_TextChanged({
    If ($ConfigMainBackTextBox.IsFocused -eq $True) {
        $ConfigConfirmButton.IsEnabled = $False
        ResetCheckMarks
        $ConfigMainThemeComboBox.SelectedIndex = 0
        }
    })
$ConfigSafeForeTextBox.Add_TextChanged({
    If ($ConfigSafeForeTextBox.IsFocused -eq $True) {
        $ConfigConfirmButton.IsEnabled = $False
        ResetCheckMarks
        $ConfigSafeThemeComboBox.SelectedIndex = 1
        }
    })
$ConfigSafeBackTextBox.Add_TextChanged({
    If ($ConfigSafeBackTextBox.IsFocused -eq $True) {
        $ConfigConfirmButton.IsEnabled = $False
        ResetCheckMarks
        $ConfigSafeThemeComboBox.SelectedIndex = 1
        }
    })
$ConfigMainThemeComboBox.Add_SelectionChanged({
    $ConfigConfirmButton.IsEnabled = $False
    ResetCheckMarks
    Foreach ($Theme in $Themes) {
        If ($ConfigMainThemeComboBox.SelectedIndex -eq $Theme.Index) {
            If (($ConfigMainForeTextBox.IsFocused -eq $False) -and ($ConfigMainBackTextBox.IsFocused -eq $False)) {
                $ConfigMainForeTextBox.Text = $Theme.ForeColor
                $ConfigMainBackTextBox.Text = $Theme.BackColor
                $ConfigBackgroundTextBox.Text = $Theme.Background
                If (($Theme.Opacity -ne "") -and ($Theme.Opacity -ne 0) -and ($Theme.Opacity -ne $Null) -and ($Theme.Opacity -ne "0")) {$ConfigOpacityTextBox.Text = [int]([decimal]$($Theme.Opacity) * 100)} 
                Else {$ConfigOpacityTextBox.Text = ""}
                }
            }
        }            
    })
$ConfigSafeThemeComboBox.Add_SelectionChanged({
    $ConfigConfirmButton.IsEnabled = $False
    ResetCheckMarks
    Foreach ($Theme in $Themes) {
        If ($ConfigSafeThemeComboBox.SelectedIndex -eq $Theme.Index) {
            If (($ConfigSafeForeTextBox.IsFocused -eq $False) -and ($ConfigSafeBackTextBox.IsFocused -eq $False)) {
                $ConfigSafeForeTextBox.Text = $Theme.ForeColor
                $ConfigSafeBackTextBox.Text = $Theme.BackColor
                }
            }
        } 
    })
$ConfigFontComboBox.Add_SelectionChanged({
    $ConfigConfirmButton.IsEnabled = $False
    ResetCheckMarks   
    })
$ConfigBackgroundTextBox.Add_SelectionChanged({
    If ($ConfigBackgroundTextBox.IsFocused -eq $True) {
        $ConfigConfirmButton.IsEnabled = $False
        ResetCheckMarks
        $ConfigMainThemeComboBox.SelectedIndex = 0
        }   
    })
$ConfigOpacityTextBox.Add_SelectionChanged({
    If ($ConfigOpacityTextBox.IsFocused -eq $True) {
        $ConfigConfirmButton.IsEnabled = $False
        ResetCheckMarks
        $ConfigMainThemeComboBox.SelectedIndex = 0
        }    
    })
$ConfigConfirmButton.Add_IsEnabledChanged({
    If ($ConfigConfirmButton.IsEnabled -eq $True) {
        $ConfigConfirmButton.IsDefault = $True
        $ConfigTestButton.IsDefault = $False
        }
    Else {
        $ConfigConfirmButton.IsDefault = $False
        $ConfigTestButton.IsDefault = $True
        }
    })

# ThemeCombobox Controls
$ThemeComboBox.Add_SelectionChanged({
    Foreach ($Theme in $Themes) {
        If ($ThemeComboBox.SelectedIndex -eq $Theme.Index) {
            If ($SafeMode -eq $False) {
                $Script:TextColor = $Theme.ForeColor
                $Script:BackColor = $Theme.BackColor
                $Script:MainTheme = $Theme.Theme
                If ($ThemeComboBox.SelectedIndex -eq 0)  {
                    If ($ImageBrush) {
                        SetBackground -Back $ImageBrush
                        If ($Opacity) {$Script:ImageBrush.Opacity = $Opacity}                        
                        }
                    Else {SetBackground -Back $BackColor}
                    }
                Else {SetBackground -Back $BackColor}
                SetTextColor -Color $TextColor
                SetBorderBrush -Color $TextColor
                If ($UserID -ne "No User Found") {$USERIDButton.Foreground = $TextColor} Else {$USERIDButton.Foreground = "Red"}
                If ($UpTime -like "*Day*") {$UPTIMEButton.Foreground = "Red"} Else {$UPTIMEButton.Foreground = $TextColor}
                If (($Menu -eq "Main") -or ($Menu -eq "Config"))  {$Title_Grid.Visibility = 'Visible'}
                $Theme_Grid.Visibility = 'Hidden'
                }
            Else {
                $Script:SafeTextColor = $Theme.ForeColor
                $Script:SafeBackColor = $Theme.BackColor
                $Script:SafeTheme = $Theme.Theme
                If ($ThemeComboBox.SelectedIndex -eq 0)  {
                    If ($ImageBrush) {
                        SetBackground -Back $ImageBrush
                        If ($Opacity) {$Script:ImageBrush.Opacity = $Opacity}                        
                        }
                    Else {SetBackground -Back $SafeBackColor}
                    }
                Else {SetBackground -Back $SafeBackColor}
                SetTextColor -Color $SafeTextColor
                SetBorderBrush -Color $SafeTextColor                
                If ($UserID -ne "No User Found") {$USERIDButton.Foreground = $SafeTextColor}
                If ($UpTime -like "*Day*") {$UPTIMEButton.Foreground = "Red"} Else {$UPTIMEButton.Foreground = $SafeTextColor}
                If (($Menu -eq "Main") -or ($Menu -eq "Config"))  {$Title_Grid.Visibility = 'Visible'}
                $Theme_Grid.Visibility = 'Hidden'
                }
            } 
        }
    })

# Enable Theme Options and Configuation Button on Double Click
$ThemeLabelLeft.Add_MouseDoubleClick({ChangeTheme})
$ThemeLabelRight.Add_MouseDoubleClick({ChangeTheme})
$StartMenuLabel1.Add_MouseDoubleClick({ChangeTheme})
$MainMenuLabel.Add_MouseDoubleClick({ChangeTheme})
$MainBlankLabel.Add_MouseDoubleClick({ChangeTheme})

# Main Search Bar Button Controls
$MainSearchButton.Add_Click({
    $MainSearchComboBox.IsDropDownOpen = $False
    If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Searched" $WSID $USERID $($MainSearchComboBox.Text)}
    Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Searched" $ComputerName $USERID $($MainSearchComboBox.Text)}   
    $Text = $MainSearchComboBox.Text
    $MainSearchComboBox.Items.Clear()
    $SortedMatrix.Clear()
    If (($MainSearchComboBox.Text -like "*answer*") -and ($MainSearchComboBox.Text -like "*life*") -and ($MainSearchComboBox.Text -like "*universe*") -and ($MainSearchComboBox.Text -like "*everything*")) {$SortedMatrix.Add("42") | Out-Null}
    ElseIf (($MainSearchComboBox.Text -like "*average*") -and ($MainSearchComboBox.Text -like "*air*") -and ($MainSearchComboBox.Text -like "*speed*") -and ($MainSearchComboBox.Text -like "*velocity*") -and ($MainSearchComboBox.Text -like "*swallow*")) {$SortedMatrix.Add("24 Miles per hour") | Out-Null}
    ElseIf (($MainSearchComboBox.Text -like "*how*") -and ($MainSearchComboBox.Text -like "*much*") -and ($MainSearchComboBox.Text -like "*wood*") -and ($MainSearchComboBox.Text -like "*could*") -and ($MainSearchComboBox.Text -like "*chuck*")) {$SortedMatrix.Add("About 700 lbs per Avg Life Span") | Out-Null}
    ElseIf (($MainSearchComboBox.Text -like "*who ya gonna call*") -or ($MainSearchComboBox.Text -like "*who you gonna call*")) {$SortedMatrix.Add("Ghostbusters!") | Out-Null}
    ElseIf (($MainSearchComboBox.Text -eq $Null) -or ($MainSearchComboBox.Text -eq ""))  {
        $MainSearchComboBox.Text = $null
        $MainSearchComboBox.Items.Clear()
        $SortedMatrix.Clear()
        If ($Advanced.Visibility -eq "Visible") {Foreach ($_ in $Matrix) {$SortedMatrix.Add($_.Name) | Out-Null}}
        Else {Foreach ($_ in $Matrix) {
            If ($_.Tab -notlike "*Advanced*") {$SortedMatrix.Add($_.Name) | Out-Null}}}
        $SortedMatrix.Sort()
        Foreach ($_ in $SortedMatrix) {$MainSearchComboBox.Items.Add($_) | Out-Null}
        $MainSearchComboBox.IsDropDownOpen = $True
        $MainSearchButton.IsDefault = $False
        }
    Else {
        If ($Advanced.Visibility -eq "Visible") {
            $Text.Replace(",","").Split(" ") | Foreach {
                Foreach ($Line in $Matrix) {
                    If ($Line.Keywords -Like "*$_*") {If (!($SortedMatrix.Contains($Line.Name))) {$SortedMatrix.Add($Line.Name) | Out-Null}}
                    If ($Line.Name -like "*$_*") {If (!($SortedMatrix.Contains($Line.Name))) {$SortedMatrix.Add($Line.Name) | Out-Null}}
                    If ($Line.Tooltip -like "*$_*") {If (!($SortedMatrix.Contains($Line.Name))) {$SortedMatrix.Add($Line.Name) | Out-Null}}
                    }
                }
            }
        Else {
            $Text.Replace(",","").Split(" ") | Foreach {
                Foreach ($Line in ($Matrix | Where {$_.Tab -notlike "*Advanced*"})) {
                    If ($Line.Keywords -Like "*$_*") {If (!($SortedMatrix.Contains($Line.Name))) {$SortedMatrix.Add($Line.Name) | Out-Null}}
                    If ($Line.Name -like "*$_*") {If (!($SortedMatrix.Contains($Line.Name))) {$SortedMatrix.Add($Line.Name) | Out-Null}}
                    If ($Line.Tooltip -like "*$_*") {If (!($SortedMatrix.Contains($Line.Name))) {$SortedMatrix.Add($Line.Name) | Out-Null}}
                    }
                }            
            }
        $SortedMatrix.Sort()
        If ($SortedMatrix.count -eq 0) {$SortedMatrix.Add("No Results Found") | Out-Null}            
        }
    If (($SortedMatrix.Contains("42")) -or ($SortedMatrix.Contains("No Results Found"))) {
        Foreach ($_ in $SortedMatrix) {$MainSearchComboBox.Items.Add($_) | Out-Null}
        }
    Else {
        $SortTheMatrix = @()
        Foreach ($_ in $SortedMatrix) {
            $TempArray = New-Object -TypeName PSObject
            Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'Name' -Value $_
            Add-Member -InputObject $TempArray -MemberType 'NoteProperty' -Name 'Count' -Value $Null
            $SortTheMatrix += $TempArray
            }
        Foreach ($Line in $SortTheMatrix) {
            $Text.Replace(",","").Split(" ") | Foreach {
                Foreach ($Entry in $Matrix) {
                    If ($Entry.Name -eq $Line.Name) {
                        If ($Entry.Name -like "*$_*") {$Line.Count++} Else {$Line.Count--}
                        If ($Entry.Toolip -like "*$_*") {$Line.Count++} Else {$Line.Count--}
                        If ($Entry.Keywords -like "*$_*") {$Line.Count++} Else {$Line.Count--}              
                        }
                    }
                }
            }
        $SortTheMatrix = $SortTheMatrix | sort-object -Property Count -Descending
        Foreach ($_ in $SortTheMatrix) {$MainSearchComboBox.Items.Add($_.Name) | Out-Null}
        }
    $MainSearchComboBox.Text = $Text
    $MainSearchButton.IsDefault = $False
    $MainSearchComboBox.IsDropDownOpen = $True
    })
$MainResetButton.Add_Click({
    $MainSearchComboBox.SelectedItem = $Null
    $MainSearchComboBox.IsDropDownOpen = $False
    $MainSearchComboBox.Text = $null
    $KBLabel1.Visibility = 'Hidden'
    $KBLabel2.Visibility = 'Hidden'
    $MainSearchComboBox.Items.Clear()
    $SortedMatrix.Clear()
    Foreach ($_ in $Matrix) {$SortedMatrix.Add($_.Name) | Out-Null}
    $SortedMatrix.Sort()
    Foreach ($_ in $SortedMatrix) {$MainSearchComboBox.Items.Add($_) | Out-Null}
    $MainSearchButton.IsDefault = $False
    })
$MainGoButton.Add_Click({
    $MainSearchComboBox.IsDropDownOpen = $False
    $MainSearchButton.IsDefault = $False
    $KBLabel1.Visibility = 'Hidden'
    $KBLabel2.Visibility = 'Hidden'
    $Result = $Null
    #$Result = $Matrix | Where-Object {$_.Name -eq $MainSearch}
    If ($MainSearchComboBox.Text -ne "") {$Result = $Matrix | Where-Object {$_.Name -eq $MainSearchComboBox.Text}}
    Else {$Result = $Matrix | Where-Object {$_.Name -eq $MainSearch}}
    If ($Result) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Search Feature To Run" $WSID $USERID $($Result.Name)}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Search Feature To Run" $ComputerName $USERID $($Result.Name)}
        LeftClick -Button $Result
        $Script:MainSearch = $Null
        $MainSearchComboBox.Text = $null
        }
    Else {
        $MainSearchComboBox.Text = "Error: $MainSearch"
        }
    })
$MainGoButton.Add_MouseUP({
    $MainSearchComboBox.IsDropDownOpen = $False
    $Result = $Null
    $Result = $Matrix | Where-Object {$_.Name -eq $MainSearchComboBox.Text}
    If ($Result) {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Search Feature for KB" $WSID $USERID $($Result.Name)}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Search Feature for KB" $ComputerName $USERID $($Result.Name)}            
        RightClick -Button $Result
        $Script:MainSearch = $Null
        }
    })

# Main Search Combox Change Events
$MainSearchComboBox.Add_SelectionChanged({
    $Script:MainSearch = $MainSearchComboBox.Text
    $KBLabel1.Visibility = 'Hidden'
    $KBLabel2.Visibility = 'Hidden'
    $Result = $Null
    $Result = $Matrix | Where-Object {$_.Name -eq $MainSearchComboBox.SelectedValue}
    If ($Result.KB -ne "") {
        $KBLabel1.Visibility = 'Visible'
        $KBLabel2.Visibility = 'Visible'
        }    
    $MainSearchComboBox.IsDropDownOpen = $False
    $MainSearchButton.IsDefault = $False
    $MainGoButton.IsDefault = $True
    })
$MainSearchComboBox.Add_KeyDown({
    $Script:MainSearch = $MainSearchComboBox.Text
    $KBLabel1.Visibility = 'Hidden'
    $KBLabel2.Visibility = 'Hidden'
    $MainGoButton.IsDefault = $False
    $MainSearchButton.IsDefault = $True
    $MainSearchComboBox.IsDropDownOpen = $False
    $MainSearchComboBox.Items.Clear()
    $SortedMatrix.Clear()
    })

# Form_Pic Controls
$UserPictureButton.Add_Click({$Form_Pic.Show() | Out-Null})

# Add Items to EscPhoneCorrectComboBox ComboBox
$Esc01PhoneCorrectComboBox.Items.add("Select") | Out-Null
$Esc01PhoneCorrectComboBox.Items.add("Yes") | Out-Null
$Esc01PhoneCorrectComboBox.Items.add("No") | Out-Null
$Esc01PhoneCorrectComboBox.Items.add("N/A") | Out-Null

# Add Items to EscIncCatComboBox ComboBox
$Esc01IncCatComboBox.Items.add("Select") | Out-Null
Foreach ($_ in $FormsMatrix) {If (!($Esc01IncCatComboBox.Items.Contains($_.Main))) {$Esc01IncCatComboBox.Items.add($_.Main) | Out-Null}}

# Add Items to Esc02AssigneeComboBox ComboBox
Foreach ($_ in $AssignmentGroups) {If (!($Esc02AssigneeComboBox.Items.Contains($_.Name))) {$Esc02AssigneeComboBox.Items.add($_.Name) | Out-Null}}

# Add Items to Esc8BrandComboBox ComboBox
Foreach ($_ in $PhoneBrands) {If (!($Esc8BrandComboBox.Items.Contains($_.Name))) {$Esc8BrandComboBox.Items.add($_.Name) | Out-Null}}

# Add Items to Esc8OwnerComboBox ComboBox
Foreach ($_ in $DeviceOwner) {If (!($Esc8OwnerComboBox.Items.Contains($_.Name))) {$Esc8OwnerComboBox.Items.add($_.Name) | Out-Null}}

# Add Items to EscA4AccessoryComboBox
$EscA4AccessoryComboBox.Items.add("Add Hardware") | Out-Null
$EscA4AccessoryComboBox.Items.add("Mouse") | Out-Null
$EscA4AccessoryComboBox.Items.add("Keyboard") | Out-Null
$EscA4AccessoryComboBox.Items.add("Monitor") | Out-Null
$EscA4AccessoryComboBox.Items.add("Battery") | Out-Null
$EscA4AccessoryComboBox.Items.add("Cable Lock") | Out-Null
$EscA4AccessoryComboBox.Items.add("Docking Station") | Out-Null
$EscA4AccessoryComboBox.Items.add("ePad") | Out-Null
$EscA4AccessoryComboBox.Items.add("Miscellaneous") | Out-Null

# Add Items to EscB7PhoneTypeComboBox ComboBox
Foreach ($_ in $PhoneTypes) {If (!($EscB7PhoneTypeComboBox.Items.Contains($_.Name))) {$EscB7PhoneTypeComboBox.Items.add($_.Name) | Out-Null}}

# Add Items to EscC2AssigneeComboBox ComboBox
Foreach ($_ in $AssignmentGroups) {If (!($EscC2AssigneeComboBox.Items.Contains($_.Name))) {$EscC2AssigneeComboBox.Items.add($_.Name) | Out-Null}}

# ComboBox Change Events
$Esc01PhoneCorrectComboBox.Add_SelectionChanged({
    If ($Esc01PhoneCorrectComboBox.SelectedIndex -eq 0) {
        $Esc01PhoneNamelabel.Visibility = 'Hidden'
        $Esc01PhoneNameTextBox.Visibility = 'Hidden'
        $Esc01PhoneOKButton.Visibility = 'Hidden'
        $Esc01PhoneChangeButton.Visibility = 'Hidden'  
        $Esc01IncCatLabel.Visibility = 'Hidden'
        $Esc01IncCatComboBox.Visibility = 'Hidden'
        $Esc01FormLabel.Visibility = 'Hidden'
        $Esc01FormComboBox.Visibility = 'Hidden'
        $Esc01LoadFormsButton.Visibility = 'Hidden'
        }
    If ($Esc01PhoneCorrectComboBox.SelectedIndex -eq 1) {
        $Esc01PhoneNamelabel.Visibility = 'Hidden'
        $Esc01PhoneNameTextBox.Visibility = 'Hidden'
        $Esc01PhoneOKButton.Visibility = 'Hidden'
        $Esc01PhoneCorrectComboBox.Visibility = 'Hidden'
        $Esc01PhoneCorrectlabel.Visibility = 'Hidden'
        $Esc01PhoneChangeButton.Visibility = 'Visible'
        $Esc01IncCatLabel.Visibility = 'Visible'
        $Esc01IncCatComboBox.Visibility = 'Visible'
        If ($Esc01IncCatComboBox.SelectedIndex -eq 0) {$Esc01FormLabel.Visibility = 'Hidden'} Else {$Esc01FormLabel.Visibility = 'Visible'}
        If ($Esc01IncCatComboBox.SelectedIndex -eq 0) {$Esc01FormComboBox.Visibility = 'Hidden'} Else {$Esc01FormComboBox.Visibility = 'Visible'}
        If ($Esc01FormComboBox.SelectedIndex -ne -1) {$Esc01LoadFormsButton.Visibility = 'Visible'} Else {$Esc01LoadFormsButton.Visibility = 'Hidden'}
        If (($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") -and ($Esc01CallerPhoneLabel2.Content -ne "")) {$EscC2PhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
        If (($Esc01CallerNameLabel2.Content -ne "Missing From AD") -and ($Esc01CallerNameLabel2.Content -ne "")) {$EscC3CPrimaryontactTextbox.Text = $Esc01CallerNameLabel2.Content}
        If (($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") -and ($Esc01CallerPhoneLabel2.Content -ne "")) {$EscC3PrimaryPhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
        If (($Esc01CallerNameLabel2.Content -ne "Missing From AD") -and ($Esc01CallerNameLabel2.Content -ne "")) {$EscC5ClientNameTextbox.Text = $Esc01CallerNameLabel2.Content}
        If (($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") -and ($Esc01CallerPhoneLabel2.Content -ne "")) {$EscC5PhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
        }
    If ($Esc01PhoneCorrectComboBox.SelectedIndex -eq 2) {
        $Esc01PhoneNamelabel.Visibility = 'Visible'
        $Esc01PhoneNameTextBox.Visibility = 'Visible'
        $Esc01PhoneOKButton.Visibility = 'Visible'
        $Esc01PhoneChangeButton.Visibility = 'Hidden'
        $Esc01IncCatLabel.Visibility = 'Hidden'
        $Esc01IncCatComboBox.Visibility = 'Hidden'
        $Esc01FormLabel.Visibility = 'Hidden'
        $Esc01FormComboBox.Visibility = 'Hidden'
        $Esc01LoadFormsButton.Visibility = 'Hidden'
        $Esc01PhoneNameTextBox.Text = ""
        }
    If ($Esc01PhoneCorrectComboBox.SelectedIndex -eq 3) {
        $Esc01PhoneNamelabel.Visibility = 'Hidden'
        $Esc01PhoneNameTextBox.Visibility = 'Hidden'
        $Esc01PhoneOKButton.Visibility = 'Hidden'
        $Esc01PhoneCorrectComboBox.Visibility = 'Hidden'
        $Esc01PhoneCorrectlabel.Visibility = 'Hidden'
        $Esc01PhoneChangeButton.Visibility = 'Visible'
        $Esc01IncCatLabel.Visibility = 'Visible'
        $Esc01IncCatComboBox.Visibility = 'Visible'
        If ($Esc01IncCatComboBox.SelectedIndex -eq 0) {$Esc01FormLabel.Visibility = 'Hidden'} Else {$Esc01FormLabel.Visibility = 'Visible'}
        If ($Esc01IncCatComboBox.SelectedIndex -eq 0) {$Esc01FormComboBox.Visibility = 'Hidden'} Else {$Esc01FormComboBox.Visibility = 'Visible'}
        If ($Esc01FormComboBox.SelectedIndex -ne -1) {$Esc01LoadFormsButton.Visibility = 'Visible'} Else {$Esc01LoadFormsButton.Visibility = 'Hidden'}
        $Esc01IncCatComboBox.SelectedValue = "Templates"
        $Esc01FormComboBox.Items.Clear()
        Foreach ($_ in $FormsMatrix) {
            If ($_.Main -eq "Templates") {
                $Esc01FormComboBox.Items.add($_.Sub)
                }
            }
        $Esc01FormComboBox.SelectedValue = "Log and Route"
        $Esc01LoadFormsButton.Visibility = 'Visible'
        #ClearForm
        EscLogRoute
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,469,0,0"
        $EscZStartNewButton.Margin = "253,469,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "268"
        If ($Resize -eq $False) {$Form_Esc.Height = "548"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    })
$Esc01IncCatComboBox.Add_SelectionChanged({
    $Esc01FormComboBox.Items.Clear()
    Foreach ($_ in $FormsMatrix) {
        If ($Esc01IncCatComboBox.SelectedValue -eq $_.Main) {
            $Esc01FormComboBox.Items.add($_.Sub)
            }
        }
    If ($Esc01IncCatComboBox.SelectedIndex -ne 0) {
        $Esc01FormLabel.Visibility = 'Visible'
        $Esc01FormComboBox.Visibility = 'Visible'
        }
    Else {
        $Esc01FormLabel.Visibility = 'Hidden'
        $Esc01FormComboBox.Visibility = 'Hidden'
        }
    If ($Esc01FormComboBox.Items.Count -eq 1) {$Esc01FormComboBox.SelectedIndex = 0} Else {$Esc01FormComboBox.SelectedIndex = -1}
    If ($Esc01FormComboBox.SelectedIndex -ne -1) {$Esc01LoadFormsButton.Visibility = 'Visible'} Else {$Esc01LoadFormsButton.Visibility = 'Hidden'}
    })
$Esc01FormComboBox.Add_SelectionChanged({If ($Esc01FormComboBox.SelectedIndex -ne -1) {$Esc01LoadFormsButton.Visibility = 'Visible'} Else {$Esc01LoadFormsButton.Visibility = 'Hidden'}})
$Esc8BrandComboBox.Add_SelectionChanged({
    If ($Esc8BrandComboBox.SelectedIndex -eq 5) {
        $Esc8OtherBrandlabel.Visibility = 'Visible'
        $Esc8OtherBrandTextBox.Visibility = 'Visible'
        }
    Else {
        $Esc8OtherBrandlabel.Visibility = 'Hidden'
        $Esc8OtherBrandTextBox.Visibility = 'Hidden'
        }
    })
$Esc8OwnerComboBox.Add_SelectionChanged({
    If ($Esc8OwnerComboBox.SelectedIndex -eq 1) {
        $Esc8DeviceNumberlabel.Visibility = 'Visible'
        $Esc8DeviceNumberTextBox.Visibility = 'Visible'
        }
    Else {
        $Esc8DeviceNumberlabel.Visibility = 'Hidden'
        $Esc8DeviceNumberTextBox.Visibility = 'Hidden'
        }
    })
$EscA4AccessoryComboBox.Add_SelectionChanged({
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 0) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 1) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Visible'
        $EscA4MouseMakeTextBox.Visibility = 'Visible'
        $EscA4MouseModellabel.Visibility = 'Visible'
        $EscA4MouseModelTextBox.Visibility = 'Visible'
        $EscA4MouseSeriallabel.Visibility = 'Visible'
        $EscA4MouseSerialTextBox.Visibility = 'Visible'
        $EscA4MouseTypeLabel.Visibility = 'Visible'
        $EscA4MouseTypeStackPanel.Visibility = 'Visible'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 2) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Visible'
        $EscA4KeyboardMakeTextBox.Visibility = 'Visible'
        $EscA4KeyboardModellabel.Visibility = 'Visible'
        $EscA4KeyboardModelTextBox.Visibility = 'Visible'
        $EscA4KeyboardSeriallabel.Visibility = 'Visible'
        $EscA4KeyboardSerialTextBox.Visibility = 'Visible'
        $EscA4KeyboardTypeLabel.Visibility = 'Visible'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Visible'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 3) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Visible'
        $EscA4MonitorMakeTextBox.Visibility = 'Visible'
        $EscA4MonitorModellabel.Visibility = 'Visible'
        $EscA4MonitorModelTextBox.Visibility = 'Visible'
        $EscA4MonitorSeriallabel.Visibility = 'Visible'
        $EscA4MonitorSerialTextBox.Visibility = 'Visible'
        $EscA4MonitorTypeLabel.Visibility = 'Visible'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Visible'
        $EscA4MonitorTypellabel.Visibility = 'Visible'
        $EscA4MonitorTypeTextBox.Visibility = 'Visible'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Visible'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 4) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Visible'
        $EscA4BatteryTextBox.Visibility = 'Visible'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 5) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Visible'
        $EscA4CableLockTextBox.Visibility = 'Visible'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 6) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Visible'
        $EscA4DockMakeTextBox.Visibility = 'Visible'
        $EscA4DockPartlabel.Visibility = 'Visible'
        $EscA4DockPartTextBox.Visibility = 'Visible'
        $EscA4DockSeriallabel.Visibility = 'Visible'
        $EscA4DockSerialTextBox.Visibility = 'Visible'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 7) {
        $EscA4Misclabel.Visibility = 'Hidden'
        $EscA4MiscTextBox.Visibility = 'Hidden'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Visible'
        $EscA4EpadMakeTextBox.Visibility = 'Visible'
        $EscA4EpadModellabel.Visibility = 'Visible'
        $EscA4EpadModelTextBox.Visibility = 'Visible'
        $EscA4EpadSeriallabel.Visibility = 'Visible'
        $EscA4EpadSerialTextBox.Visibility = 'Visible'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    If ($EscA4AccessoryComboBox.SelectedIndex -eq 8) {
        $EscA4Misclabel.Visibility = 'Visible'
        $EscA4MiscTextBox.Visibility = 'Visible'
        $EscA4MouseMakelabel.Visibility = 'Hidden'
        $EscA4MouseMakeTextBox.Visibility = 'Hidden'
        $EscA4MouseModellabel.Visibility = 'Hidden'
        $EscA4MouseModelTextBox.Visibility = 'Hidden'
        $EscA4MouseSeriallabel.Visibility = 'Hidden'
        $EscA4MouseSerialTextBox.Visibility = 'Hidden'
        $EscA4MouseTypeLabel.Visibility = 'Hidden'
        $EscA4MouseTypeStackPanel.Visibility = 'Hidden'
        $EscA4KeyboardMakelabel.Visibility = 'Hidden'
        $EscA4KeyboardMakeTextBox.Visibility = 'Hidden'
        $EscA4KeyboardModellabel.Visibility = 'Hidden'
        $EscA4KeyboardModelTextBox.Visibility = 'Hidden'
        $EscA4KeyboardSeriallabel.Visibility = 'Hidden'
        $EscA4KeyboardSerialTextBox.Visibility = 'Hidden'
        $EscA4KeyboardTypeLabel.Visibility = 'Hidden'
        $EscA4KeyboardTypeStackPanel.Visibility = 'Hidden'
        $EscA4MonitorMakelabel.Visibility = 'Hidden'
        $EscA4MonitorMakeTextBox.Visibility = 'Hidden'
        $EscA4MonitorModellabel.Visibility = 'Hidden'
        $EscA4MonitorModelTextBox.Visibility = 'Hidden'
        $EscA4MonitorSeriallabel.Visibility = 'Hidden'
        $EscA4MonitorSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorTypeLabel.Visibility = 'Hidden'
        $EscA4MonitorWarrantyStackPanel.Visibility = 'Hidden'
        $EscA4MonitorTypellabel.Visibility = 'Hidden'
        $EscA4MonitorTypeTextBox.Visibility = 'Hidden'
        $EscA4Batterylabel.Visibility = 'Hidden'
        $EscA4BatteryTextBox.Visibility = 'Hidden'
        $EscA4CableLocklabel.Visibility = 'Hidden'
        $EscA4CableLockTextBox.Visibility = 'Hidden'
        $EscA4DockMakelabel.Visibility = 'Hidden'
        $EscA4DockMakeTextBox.Visibility = 'Hidden'
        $EscA4DockPartlabel.Visibility = 'Hidden'
        $EscA4DockPartTextBox.Visibility = 'Hidden'
        $EscA4DockSeriallabel.Visibility = 'Hidden'
        $EscA4DockSerialTextBox.Visibility = 'Hidden'
        $EscA4EpadMakelabel.Visibility = 'Hidden'
        $EscA4EpadMakeTextBox.Visibility = 'Hidden'
        $EscA4EpadModellabel.Visibility = 'Hidden'
        $EscA4EpadModelTextBox.Visibility = 'Hidden'
        $EscA4EpadSeriallabel.Visibility = 'Hidden'
        $EscA4EpadSerialTextBox.Visibility = 'Hidden'
        $EscA4MonitorModelLookupButton.Visibility = 'Hidden'
        }
    })
$EscB7PhoneTypeComboBox.Add_SelectionChanged({
    If ($EscB7PhoneTypeComboBox.SelectedIndex -eq 0) {
        $EscB7CiscoMACLabel.Visibility = 'Hidden'
        $EscB7CiscoMACTextBox.Visibility = 'Hidden'
        $EscB7Swappedlabel.Visibility = 'Hidden'
        $EscB7SwappedStackPanel.Visibility = 'Hidden'
        $EscB7SwapResultLabel.Visibility = 'Hidden'
        $EscB7SwapResultTextBox.Visibility = 'Hidden'
        $EscB7SwappedNoRadioButton.IsChecked = $True
        $EscB7OtherTypeLabel.Visibility = 'Hidden'
        $EscB7OtherTypeTextBox.Visibility = 'Hidden'
        }    
    If ($EscB7PhoneTypeComboBox.SelectedIndex -eq 1) {
        $EscB7CiscoMACLabel.Visibility = 'Visible'
        $EscB7CiscoMACTextBox.Visibility = 'Visible'
        $EscB7Swappedlabel.Visibility = 'Hidden'
        $EscB7SwappedStackPanel.Visibility = 'Hidden'
        $EscB7SwapResultLabel.Visibility = 'Hidden'
        $EscB7SwapResultTextBox.Visibility = 'Hidden'
        $EscB7SwappedNoRadioButton.IsChecked = $True
        $EscB7OtherTypeLabel.Visibility = 'Hidden'
        $EscB7OtherTypeTextBox.Visibility = 'Hidden'
        }
    If ($EscB7PhoneTypeComboBox.SelectedIndex -eq 2) {
        $EscB7CiscoMACLabel.Visibility = 'Hidden'
        $EscB7CiscoMACTextBox.Visibility = 'Hidden'
        $EscB7Swappedlabel.Visibility = 'Visible'
        $EscB7SwappedStackPanel.Visibility = 'Visible'
        $EscB7SwappedNoRadioButton.IsChecked = $True
        $EscB7OtherTypeLabel.Visibility = 'Hidden'
        $EscB7OtherTypeTextBox.Visibility = 'Hidden'
        }
    If ($EscB7PhoneTypeComboBox.SelectedIndex -eq 3) {
        $EscB7CiscoMACLabel.Visibility = 'Hidden'
        $EscB7CiscoMACTextBox.Visibility = 'Hidden'
        $EscB7Swappedlabel.Visibility = 'Visible'
        $EscB7SwappedStackPanel.Visibility = 'Visible'
        $EscB7SwappedNoRadioButton.IsChecked = $True
        $EscB7OtherTypeLabel.Visibility = 'Visible'
        $EscB7OtherTypeTextBox.Visibility = 'Visible'
        }
    })

# Calendar Change Events
$Esc02Calendar.Add_SelectedDatesChanged({
    $Esc02DateTextBox.Text = $Esc02Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $Esc02Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)
    })
$Esc5Calendar.Add_SelectedDatesChanged({
    $Esc5CompletionTextBox.Text = $Esc5Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $Esc5Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)
    })
$Esc8DateSynchedCalendar.Add_SelectedDatesChanged({
    $Esc8DateSynchedlTextBox.Text = $Esc8DateSynchedCalendar.SelectedDate.ToString("MM/dd/yyyy")
    $Esc8DateSynchedCalendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$Esc9DateSynchedCalendar.Add_SelectedDatesChanged({
    $Esc9DateSynchedTextBox.Text = $Esc9DateSynchedCalendar.SelectedDate.ToString("MM/dd/yyyy")
    $Esc9DateSynchedCalendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscA9Calendar.Add_SelectedDatesChanged({
    $EscA9ChangeTonerTextBox.Text = $EscA9Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscA9Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB1Calender.Add_SelectedDatesChanged({
    $EscB1LastTimeTextBox.Text = $EscB1Calender.SelectedDate.ToString("MM/dd/yyyy")
    $EscB1Calender.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB2LastSignonCalendar.Add_SelectedDatesChanged({
    $EscB2LastSignonTextBox.Text = $EscB2LastSignonCalendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB2LastSignonCalendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB2LastResetCalendar.Add_SelectedDatesChanged({
    $EscB2LastResetTextBox.Text = $EscB2LastResetCalendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB2LastResetCalendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB3Date1Calnedar.Add_SelectedDatesChanged({
    $EscB3Date1TextBox.Text = $EscB3Date1Calnedar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB3Date1Calnedar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB3Alt2Calendar.Add_SelectedDatesChanged({
    $EscB3Alt2TextBox.Text = $EscB3Alt2Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB3Alt2Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB3Alt3Calendar.Add_SelectedDatesChanged({
    $EscB3Alt3TextBox.Text = $EscB3Alt3Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB3Alt3Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB3Alt4Calendar.Add_SelectedDatesChanged({
    $EscB3Alt4TextBox.Text = $EscB3Alt4Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB3Alt4Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscB9MeetingDateCalendar.Add_SelectedDatesChanged({
    $EscB9MeetingDateTextBox.Text = $EscB9MeetingDateCalendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscB9MeetingDateCalendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscC2Calendar.Add_SelectedDatesChanged({
    $EscC2IssueDateTextBox.Text = $EscC2Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscC2Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })
$EscC6Calendar.Add_SelectedDatesChanged({
    $EscC6ReinstallDateTextbox.Text = $EscC6Calendar.SelectedDate.ToString("MM/dd/yyyy")
    $EscC6Calendar.Visibility = 'Hidden'
    [System.Windows.Input.Mouse]::Capture($Null)    
    })

# Radio Button Change Events
$Esc02CritIssueYesRadioButton.Add_Checked({$Esc02CritIssueTextBox.Visibility = 'Visible'})
$Esc02CritIssueNoRadioButton.Add_Checked({$Esc02CritIssueTextBox.Visibility = 'Hidden'})
$Esc02WorkAroundYesRadioButton.Add_Checked({$Esc02WorkAroundTextBox.Visibility = 'Visible'})
$Esc02WorkAroundNoneRadioButton.Add_Checked({$Esc02WorkAroundTextBox.Visibility = 'Hidden'})
$Esc02ETRadioButton.Add_Checked({$Esc02OtherTZTextBox.Visibility = 'Hidden'})
$Esc02CTRadioButton.Add_Checked({$Esc02OtherTZTextBox.Visibility = 'Hidden'})
$Esc02MTRadioButton.Add_Checked({$Esc02OtherTZTextBox.Visibility = 'Hidden'})
$Esc02PTRadioButton.Add_Checked({$Esc02OtherTZTextBox.Visibility = 'Hidden'})
$Esc02ITRadioButton.Add_Checked({$Esc02OtherTZTextBox.Visibility = 'Hidden'})
$Esc02OtherTZRadioButton.Add_Checked({$Esc02OtherTZTextBox.Visibility = 'Visible'})
$Esc02NumberUsers1RadioButton.Add_Checked({$Esc02NumberUsersOtherTextBox.Visibility = 'Hidden'})
$Esc02NumberUsers5RadioButton.Add_Checked({$Esc02NumberUsersOtherTextBox.Visibility = 'Hidden'})
$Esc02NumberUsers50RadioButton.Add_Checked({$Esc02NumberUsersOtherTextBox.Visibility = 'Hidden'})
$Esc02NumberUsers100RadioButton.Add_Checked({$Esc02NumberUsersOtherTextBox.Visibility = 'Hidden'})
$Esc02NumberUsers500RadioButton.Add_Checked({$Esc02NumberUsersOtherTextBox.Visibility = 'Hidden'})
$Esc02NumberUsersOtherRadioButton.Add_Checked({$Esc02NumberUsersOtherTextBox.Visibility = 'Visible'})
$Esc02OocYesRadioButton.Add_Checked({
    $Esc02OOCEmailYesNolabel.Visibility = 'Visible'
    $Esc02OOCEmailYesNoStackPanel.Visibility = 'Visible'
    })
$Esc02OocNoRadioButton.Add_Checked({
    $Esc02OOCEmailYesNolabel.Visibility = 'Hidden'
    $Esc02OOCEmailYesNoStackPanel.Visibility = 'Hidden'
    $Esc02OOCExtEmaillabel.Visibility = 'Hidden'
    $Esc02OOCExtEmailTextbox.Visibility = 'Hidden'
    $Esc02OOCEmailNoRadioButton.IsChecked = $True
    })
$Esc02OOCEmailYesRadioButton.Add_Checked({
    $Esc02OOCExtEmaillabel.Visibility = 'Visible'
    $Esc02OOCExtEmailTextbox.Visibility = 'Visible'
    })
$Esc02OOCEmailNoRadioButton.Add_Checked({
    $Esc02OOCExtEmaillabel.Visibility = 'Hidden'
    $Esc02OOCExtEmailTextbox.Visibility = 'Hidden'
    })
$Esc2UDBRadioButton.Add_Checked({$Esc2OtherTextBox.Visibility = "Hidden"})
$Esc2OracleRadioButton.Add_Checked({$Esc2OtherTextBox.Visibility = "Hidden"})
$Esc2SQLRadioButton.Add_Checked({$Esc2OtherTextBox.Visibility = "Hidden"})
$Esc2DB2RadioButton.Add_Checked({$Esc2OtherTextBox.Visibility = "Hidden"})
$Esc2OtherRadioButton.Add_Checked({$Esc2OtherTextBox.Visibility = "Visible"})
$Esc4MainframeYesRadioButton.Add_Checked({$Esc4MainframeTextBox.Visibility = 'Visible'})
$Esc4MainframeNoRadioButton.Add_Checked({$Esc4MainframeTextBox.Visibility = 'Hidden'})
$Esc7AcctTypeNARadioButton.Add_Checked({
    $Esc7CustomerNameslabel.Visibility = 'Hidden'
    $Esc7CustomerNamesTextBox.Visibility = 'Hidden'
    $Esc7AccountNumberlabel.Visibility = 'Hidden'
    $Esc7AccountNumberTextBox.Visibility = 'Hidden'
    })
$Esc7AcctTypeNumberRadioButton.Add_Checked({
    $Esc7CustomerNameslabel.Visibility = 'Hidden'
    $Esc7CustomerNamesTextBox.Visibility = 'Hidden'
    $Esc7AccountNumberlabel.Visibility = 'Visible'
    $Esc7AccountNumberTextBox.Visibility = 'Visible'
    })
$Esc7AcctTypeNamesRadioButton.Add_Checked({
    $Esc7CustomerNameslabel.Visibility = 'Visible'
    $Esc7CustomerNamesTextBox.Visibility = 'Visible'
    $Esc7AccountNumberlabel.Visibility = 'Hidden'
    $Esc7AccountNumberTextBox.Visibility = 'Hidden'
    })
$Esc8ProviderATTRadioButton.Add_Checked({
    $Esc8OtherProviderlabel.Visibility = 'Hidden'
    $Esc8OtherProviderTextBox.Visibility = 'Hidden'
    })
$Esc8ProviderVerizonRadioButton.Add_Checked({
    $Esc8OtherProviderlabel.Visibility = 'Hidden'
    $Esc8OtherProviderTextBox.Visibility = 'Hidden'
    })
$Esc8ProviderNARadioButton.Add_Checked({
    $Esc8OtherProviderlabel.Visibility = 'Visible'
    $Esc8OtherProviderTextBox.Visibility = 'Visible'
    })
$Esc8SynedYesRadioButton.Add_Checked({
    $Esc8DateSynchedlabel.Visibility = 'Visible'
    $Esc8DateSynchedlTextBox.Visibility = 'Visible'
    $Esc8DateSynchedButton.Visibility = 'Visible'
    $Esc8DateSynchedCalendar.Visibility = 'Hidden'
    })
$Esc8SynedNoRadioButton.Add_Checked({
    $Esc8DateSynchedlabel.Visibility = 'Hidden'
    $Esc8DateSynchedlTextBox.Visibility = 'Hidden'
    $Esc8DateSynchedButton.Visibility = 'Hidden'
    $Esc8DateSynchedCalendar.Visibility = 'Hidden'
    })
$Esc8SynedNARadioButton.Add_Checked({
    $Esc8DateSynchedlabel.Visibility = 'Hidden'
    $Esc8DateSynchedlTextBox.Visibility = 'Hidden'
    $Esc8DateSynchedButton.Visibility = 'Hidden'
    $Esc8DateSynchedCalendar.Visibility = 'Hidden'
    })
$Esc8ReplacementYesRadioButton.Add_Checked({
    $Esc8Shippinglabel.Visibility = 'Hidden'
    $Esc8ShippingTextBox.Visibility = 'Hidden'
    })
$Esc8ReplacementNoRadioButton.Add_Checked({
    $Esc8Shippinglabel.Visibility = 'Visible'
    $Esc8ShippingTextBox.Visibility = 'Visible'
    })
$Esc9VPNPastYesRadioButton.Add_Checked({
    $Esc9DateSynchedButton.Visibility = 'Visible'
    $Esc9DateSynchedTextBox.Visibility = 'Visible'
    })
$Esc9VPNPastNoRadioButton.Add_Checked({
    $Esc9DateSynchedButton.Visibility = 'Hidden'
    $Esc9DateSynchedTextBox.Visibility = 'Hidden'
    $Esc9DateSynchedCalendar.Visibility = 'Hidden'
    })
$Esc9TokenHardRadioButton.Add_Checked({$Esc9TokenTextBox.Visibility = 'Visible'})
$Esc9TokenSoftRadioButton.Add_Checked({$Esc9TokenTextBox.Visibility = 'Hidden'})
$Esc9TokenPalmRadioButton.Add_Checked({$Esc9TokenTextBox.Visibility = 'Hidden'})
$EscA1AcctTypeNumberRadioButton.Add_Checked({
    $EscA1CustomerNameslabel.Visibility = 'Hidden'
    $EscA1CustomerNamesTextBox.Visibility = 'Hidden'
    $EscA1AccountNumberlabel.Visibility = 'Visible'
    $EscA1AccountNumberTextBox.Visibility = 'Visible'
    })
$EscA1AcctTypeNamesRadioButton.Add_Checked({
    $EscA1CustomerNameslabel.Visibility = 'Visible'
    $EscA1CustomerNamesTextBox.Visibility = 'Visible'
    $EscA1AccountNumberlabel.Visibility = 'Hidden'
    $EscA1AccountNumberTextBox.Visibility = 'Hidden'
    })
$EscA1AcctTypeNARadioButton.Add_Checked({
    $EscA1CustomerNameslabel.Visibility = 'Hidden'
    $EscA1CustomerNamesTextBox.Visibility = 'Hidden'
    $EscA1AccountNumberlabel.Visibility = 'Hidden'
    $EscA1AccountNumberTextBox.Visibility = 'Hidden'
    })
$EscA2IPADYesRadioButton.Add_Checked({
    $EscA2PartnerLabel.Visibility = 'Visible'
    $EscA2PartnerTextBox.Visibility = 'Visible'
    $EscA2NetworkLabel.Visibility = 'Visible'
    $EscA2PrinterLabel.Visibility = 'Visible'
    $EscA2PowerLabel.Visibility = 'Hidden'
    $EscA2PaperLabel.Visibility = 'Hidden'
    $EscA2FlashLabel.Visibility = 'Hidden'
    $EscA2NetworkStackpanel.Visibility = 'Visible'
    $EscA2PrinterStackpanel.Visibility = 'Visible'
    $EscA2PowerStackpanel.Visibility = 'Hidden'
    $EscA2PaperStackpanel.Visibility = 'Hidden'
    $EscA2FlashTextBox.Visibility = 'Hidden'
    })
$EscA2IPADNoRadioButton.Add_Checked({
    $EscA2PartnerLabel.Visibility = 'Hidden'
    $EscA2PartnerTextBox.Visibility = 'Hidden'
    $EscA2NetworkLabel.Visibility = 'Hidden'
    $EscA2PrinterLabel.Visibility = 'Hidden'
    $EscA2PowerLabel.Visibility = 'Hidden'
    $EscA2PaperLabel.Visibility = 'Hidden'
    $EscA2FlashLabel.Visibility = 'Hidden'
    $EscA2NetworkStackpanel.Visibility = 'Hidden'
    $EscA2PrinterStackpanel.Visibility = 'Hidden'
    $EscA2PowerStackpanel.Visibility = 'Hidden'
    $EscA2PaperStackpanel.Visibility = 'Hidden'
    $EscA2FlashTextBox.Visibility = 'Hidden'
    $EscA2PrinterNoRadioButton.IsChecked = $True
    })
$EscA2PrinterYesRadioButton.Add_Checked({
    $EscA2PowerLabel.Visibility = 'Visible'
    $EscA2PaperLabel.Visibility = 'Visible'
    $EscA2FlashLabel.Visibility = 'Visible'
    $EscA2PowerStackpanel.Visibility = 'Visible'
    $EscA2PaperStackpanel.Visibility = 'Visible'
    $EscA2FlashTextBox.Visibility = 'Visible'
    })
$EscA2PrinterNoRadioButton.Add_Checked({
    $EscA2PowerLabel.Visibility = 'Hidden'
    $EscA2PaperLabel.Visibility = 'Hidden'
    $EscA2FlashLabel.Visibility = 'Hidden'
    $EscA2PowerStackpanel.Visibility = 'Hidden'
    $EscA2PaperStackpanel.Visibility = 'Hidden'
    $EscA2FlashTextBox.Visibility = 'Hidden'
    })
$EscA4HWMakeDellRadioButton.Add_Checked({
    $EscA4IBMModelTypelabel.Visibility = 'Hidden'
    $EscA4IBMModelTypeTextBox.Visibility = 'Hidden'
    $EscA4IBMComputerSeriallabel.Visibility = 'Hidden'
    $EscA4IBMComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4HPComputerSeriallabel.Visibility = 'Hidden'
    $EscA4HPComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4DELLComputerSeriallabel.Visibility = 'Visible'
    $EscA4DELLComputerSerialTextBox.Visibility = 'Visible'
    $EscA4DELLServiceCodelabel.Visibility = 'Visible'
    $EscA4DELLServiceCodeTextBox.Visibility = 'Visible'
    $EscA4HWMakeOtherTextBox.Visibility = 'Hidden'
    $EscA4DELLServiceCodeLookupButton.Visibility = 'Visible'
    $EscA4DELLComputerSerialLookupButton.Visibility = 'Visible'
    $EscA4IBMComputerSerialLookupButton.Visibility = 'Hidden'
    $EscA4HPComputerSerialLookupButton.Visibility = 'Hidden'
    })
$EscA4HWMakeIBMRadioButton.Add_Checked({
    $EscA4IBMModelTypelabel.Visibility = 'Visible'
    $EscA4IBMModelTypeTextBox.Visibility = 'Visible'
    $EscA4IBMComputerSeriallabel.Visibility = 'Visible'
    $EscA4IBMComputerSerialTextBox.Visibility = 'Visible'
    $EscA4HPComputerSeriallabel.Visibility = 'Hidden'
    $EscA4HPComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4DELLComputerSeriallabel.Visibility = 'Hidden'
    $EscA4DELLComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4DELLServiceCodelabel.Visibility = 'Hidden'
    $EscA4DELLServiceCodeTextBox.Visibility = 'Hidden'
    $EscA4HWMakeOtherTextBox.Visibility = 'Hidden'
    $EscA4DELLServiceCodeLookupButton.Visibility = 'Hidden'
    $EscA4DELLComputerSerialLookupButton.Visibility = 'Hidden'
    $EscA4IBMComputerSerialLookupButton.Visibility = 'Visible'
    $EscA4HPComputerSerialLookupButton.Visibility = 'Hidden'
    })
$EscA4HWMakeHPRadioButton.Add_Checked({
    $EscA4IBMModelTypelabel.Visibility = 'Hidden'
    $EscA4IBMModelTypeTextBox.Visibility = 'Hidden'
    $EscA4IBMComputerSeriallabel.Visibility = 'Hidden'
    $EscA4IBMComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4HPComputerSeriallabel.Visibility = 'Visible'
    $EscA4HPComputerSerialTextBox.Visibility = 'Visible'
    $EscA4DELLComputerSeriallabel.Visibility = 'Hidden'
    $EscA4DELLComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4DELLServiceCodelabel.Visibility = 'Hidden'
    $EscA4DELLServiceCodeTextBox.Visibility = 'Hidden'
    $EscA4HWMakeOtherTextBox.Visibility = 'Hidden'
    $EscA4DELLServiceCodeLookupButton.Visibility = 'Hidden'
    $EscA4DELLComputerSerialLookupButton.Visibility = 'Hidden'
    $EscA4IBMComputerSerialLookupButton.Visibility = 'Hidden'
    $EscA4HPComputerSerialLookupButton.Visibility = 'Visible'
    })
$EscA4HWMakeOtherRadioButton.Add_Checked({
    $EscA4IBMModelTypelabel.Visibility = 'Hidden'
    $EscA4IBMModelTypeTextBox.Visibility = 'Hidden'
    $EscA4IBMComputerSeriallabel.Visibility = 'Hidden'
    $EscA4IBMComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4HPComputerSeriallabel.Visibility = 'Visible'
    $EscA4HPComputerSerialTextBox.Visibility = 'Visible'
    $EscA4DELLComputerSeriallabel.Visibility = 'Hidden'
    $EscA4DELLComputerSerialTextBox.Visibility = 'Hidden'
    $EscA4DELLServiceCodelabel.Visibility = 'Hidden'
    $EscA4DELLServiceCodeTextBox.Visibility = 'Hidden'
    $EscA4HWMakeOtherTextBox.Visibility = 'Visible'
    $EscA4DELLServiceCodeLookupButton.Visibility = 'Hidden'
    $EscA4DELLComputerSerialLookupButton.Visibility = 'Hidden'
    $EscA4IBMComputerSerialLookupButton.Visibility = 'Hidden'
    $EscA4HPComputerSerialLookupButton.Visibility = 'Visible'
    })
$EscA8PrinterTypeEpsonRadioButton.Add_Checked({
    $EscA8PrinterModellabel.Visibility = 'Visible'
    $EscA8PrinterModelTextBox.Visibility = 'Visible'
    })
$EscA8PrinterTypeNexusRadioButton.Add_Checked({
    $EscA8PrinterModellabel.Visibility = 'Hidden'
    $EscA8PrinterModelTextBox.Visibility = 'Hidden'
    })
$EscA8ReceiptsYesRadioButton.Add_Checked({$EscA8ReceiptsYesTextBox.Visibility = 'Visible'})
$EscA8ReceiptsNoRadioButton.Add_Checked({$EscA8ReceiptsYesTextBox.Visibility = 'Hidden'})
$EscA8RequestYesRadioButton.Add_Checked({
    $EscA8LocationLabel.Visibility = 'Visible'
    $EscA8LocationWrapPanel.Visibility = 'Visible'
    $EscA8LocationProductionRadioButton.IsChecked = $True
    })
$EscA8RequestNoRadioButton.Add_Checked({
    $EscA8LocationLabel.Visibility = 'Hidden'
    $EscA8LocationWrapPanel.Visibility = 'Hidden'
    $EscA8ReplacementLabel.Visibility = 'Hidden'
    $EscA8ReplacementWrapPanel.Visibility = 'Hidden'
    $EscA8LocationStorageRadioButton.IsChecked = $True
    })
$EscA8RequestNARadioButton.Add_Checked({
    $EscA8LocationLabel.Visibility = 'Hidden'
    $EscA8LocationWrapPanel.Visibility = 'Hidden'
    $EscA8ReplacementLabel.Visibility = 'Hidden'
    $EscA8ReplacementWrapPanel.Visibility = 'Hidden'
    $EscA8LocationStorageRadioButton.IsChecked = $True
    })
$EscA8LocationProductionRadioButton.Add_Checked({
    $EscA8ReplacementLabel.Visibility = 'Visible'
    $EscA8ReplacementWrapPanel.Visibility = 'Visible'
    })
$EscA8LocationStorageRadioButton.Add_Checked({
    $EscA8ReplacementLabel.Visibility = 'Hidden'
    $EscA8ReplacementWrapPanel.Visibility = 'Hidden'
    })
$EscA9PrinterTypeLocalRadioButton.Add_Checked({
    $EscA9PrintServerlabel.Visibility = 'Hidden'
    $EscA9PrintServerTextBox.Visibility = 'Hidden'
    })
$EscA9PrinterTypeNetworkRadioButton.Add_Checked({
    $EscA9PrintServerlabel.Visibility = 'Visible'
    $EscA9PrintServerTextBox.Visibility = 'Visible'
    })
$EscA9LoanCalcYesRadioButton.Add_Checked({
    $EscA9SecondQueueNumberlabel.Visibility = 'Visible'
    $EscA9SecondQueueTextBox.Visibility = 'Visible'
    })
$EscA9LoanCalcNoRadioButton.Add_Checked({
    $EscA9SecondQueueNumberlabel.Visibility = 'Hidden'
    $EscA9SecondQueueTextBox.Visibility = 'Hidden'
    })
$EscA9MainframeFaxMFRadioButton.Add_Checked({
    $EscA9MainframeDestlabel.Visibility = 'Visible'
    $EscA9MainframeDestTextBox.Visibility = 'Visible'
    $EscA9MainframePrintStatuslabel.Visibility = 'Visible'
    $EscA9MainframePrintStatusTextBox.Visibility = 'Visible'
    $EscA9InboundFaxlabel.Visibility = 'Hidden'
    $EscA9InboundFaxTextBox.Visibility = 'Hidden'
    $EscA9AccuRoutelabel.Visibility = 'Hidden'
    $EscA9AccuRouteTextBox.Visibility = 'Hidden'
    $EscA9FaxNumberlabel.Visibility = 'Hidden'
    $EscA9FaxNumberTextBox.Visibility = 'Hidden'
    })
$EscA9MainframeFaxFaxRadioButton.Add_Checked({
    $EscA9MainframeDestlabel.Visibility = 'Hidden'
    $EscA9MainframeDestTextBox.Visibility = 'Hidden'
    $EscA9MainframePrintStatuslabel.Visibility = 'Hidden'
    $EscA9MainframePrintStatusTextBox.Visibility = 'Hidden'
    $EscA9InboundFaxlabel.Visibility = 'Visible'
    $EscA9InboundFaxTextBox.Visibility = 'Visible'
    $EscA9AccuRoutelabel.Visibility = 'Visible'
    $EscA9AccuRouteTextBox.Visibility = 'Visible'
    $EscA9FaxNumberlabel.Visibility = 'Visible'
    $EscA9FaxNumberTextBox.Visibility = 'Visible'
    })
$EscA9PMainframeFaxNARadioButton.Add_Checked({
    $EscA9MainframeDestlabel.Visibility = 'Hidden'
    $EscA9MainframeDestTextBox.Visibility = 'Hidden'
    $EscA9MainframePrintStatuslabel.Visibility = 'Hidden'
    $EscA9MainframePrintStatusTextBox.Visibility = 'Hidden'
    $EscA9InboundFaxlabel.Visibility = 'Hidden'
    $EscA9InboundFaxTextBox.Visibility = 'Hidden'
    $EscA9AccuRoutelabel.Visibility = 'Hidden'
    $EscA9AccuRouteTextBox.Visibility = 'Hidden'
    $EscA9FaxNumberlabel.Visibility = 'Hidden'
    $EscA9FaxNumberTextBox.Visibility = 'Hidden'
    })
$EscA7SiteTypeBranchRadioButton.Add_Checked({
    $EscA7TrainLabel.Visibility = 'Visible'
    $EscA7TrainStackPanel.Visibility = 'Visible'
    $EscA7BankersLabel.Visibility = 'Visible'
    $EscA7BankersTextBox.Visibility = 'Visible'
    $EscA7TellersLabel.Visibility = 'Visible'
    $EscA7TellersTextBox.Visibility = 'Visible'
    })
$EscA7SiteTypeCorpRadioButton.Add_Checked({
    $EscA7TrainLabel.Visibility = 'Hidden'
    $EscA7TrainStackPanel.Visibility = 'Hidden'
    $EscA7BankersLabel.Visibility = 'Hidden'
    $EscA7BankersTextBox.Visibility = 'Hidden'
    $EscA7TellersLabel.Visibility = 'Hidden'
    $EscA7TellersTextBox.Visibility = 'Hidden'
    })
$EscA7SiteTypeComboRadioButton.Add_Checked({
    $EscA7TrainLabel.Visibility = 'Hidden'
    $EscA7TrainStackPanel.Visibility = 'Hidden'
    $EscA7BankersLabel.Visibility = 'Hidden'
    $EscA7BankersTextBox.Visibility = 'Hidden'
    $EscA7TellersLabel.Visibility = 'Hidden'
    $EscA7TellersTextBox.Visibility = 'Hidden'
    })
$EscB2EastMFRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2WestMainframeRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2OtherRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Visible'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2NotesRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2NovellRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2UnixRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Visible'
    $EscB2UnixPingButton.Visibility = 'Visible'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2USRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2NTRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2InternetRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Hidden'
    })
$EscB2EmerIDRadioButton.Add_Checked({
    $EscB2OtherTextBox.Visibility = 'Hidden'
    $EscB2UnixTextBox.Visibility = 'Hidden'
    $EscB2UnixPingButton.Visibility = 'Hidden'
    $EscB2EmerIDTextBox.Visibility = 'Visible'
    })
$EscB4RebootYesRadioButton.Add_Checked({$EscB4RebootTextBox.Visibility = 'Visible'})
$EscB4RebootNoRadioButton.Add_Checked({$EscB4RebootTextBox.Visibility = 'Hidden'})
$EscB6MainframeYesRadioButton.Add_Checked({$EscB6MainframeTextBox.Visibility = 'Visible'})
$EscB6MainframeNoRadioButton.Add_Checked({$EscB6MainframeTextBox.Visibility = 'Hidden'})
$EscB7ReplaceYesRadioButton.Add_Checked({
    $EscB7ColorLabel.Visibility = 'Visible'
    $EscB7ColorTextBox.Visibility = 'Visible'
    })
$EscB7ReplaceNoRadioButton.Add_Checked({
    $EscB7ColorLabel.Visibility = 'Hidden'
    $EscB7ColorTextBox.Visibility = 'Hidden'
    })
$EscB7CallQualityYesRadioButton.Add_Checked({
    $EscB7QualityIssuelabel.Visibility = 'Visible'
    $EscB7PartWrapPanel.Visibility = 'Visible'
    })
$EscB7CallQualityNoRadioButton.Add_Checked({
    $EscB7QualityIssuelabel.Visibility = 'Hidden'
    $EscB7PartWrapPanel.Visibility = 'Hidden'
    })
$EscB7SwappedYesRadioButton.Add_Checked({
    $EscB7SwapResultLabel.Visibility = 'Visible'
    $EscB7SwapResultTextBox.Visibility = 'Visible'
    })
$EscB7SwappedNoRadioButton.Add_Checked({
    $EscB7SwapResultLabel.Visibility = 'Hidden'
    $EscB7SwapResultTextBox.Visibility = 'Hidden'
    })
$EscB8RecentInstallYesRadioButton.Add_Checked({$EscB8RecentInstallTextBox.Visibility = 'Visible'})
$EscB8RecentInstallNoRadioButton.Add_Checked({$EscB8RecentInstallTextBox.Visibility = 'Hidden'})
$EscB8AccessVMButtonRadioButton.Add_Checked({$EscB8AccessVMTextBox.Visibility = 'Hidden'})
$EscB8AccessVMDialRadioButton.Add_Checked({$EscB8AccessVMTextBox.Visibility = 'Visible'})
$EscB9ETRadioButton.Add_Checked({$EscB9OtherTZTextBox.Visibility = 'Hidden'})
$EscB9CTRadioButton.Add_Checked({$EscB9OtherTZTextBox.Visibility = 'Hidden'})
$EscB9MTRadioButton.Add_Checked({$EscB9OtherTZTextBox.Visibility = 'Hidden'})
$EscB9PTRadioButton.Add_Checked({$EscB9OtherTZTextBox.Visibility = 'Hidden'})
$EscB9ITRadioButton.Add_Checked({$EscB9OtherTZTextBox.Visibility = 'Hidden'})
$EscB9OtherTZRadioButton.Add_Checked({$EscB9OtherTZTextBox.Visibility = 'Visible'})
$EscB9WhoExpHostRadioButton.Add_Checked({
    $EscB9UserIDlabel.Visibility = 'Visible'
    $EscB9UserIDTextbox.Visibility = 'Visible'
    $EscB9DeviceTypelabel.Visibility = 'Visible'
    $EscB9DeviceTypeWrapPanel.Visibility = 'Visible'
    })
$EscB9WhoExpSpecRadioButton.Add_Checked({
    $EscB9UserIDlabel.Visibility = 'Visible'
    $EscB9UserIDTextbox.Visibility = 'Visible'
    $EscB9DeviceTypelabel.Visibility = 'Visible'
    $EscB9DeviceTypeWrapPanel.Visibility = 'Visible'
    })
$EscB9WhoExpAllRadioButton.Add_Checked({
    $EscB9UserIDlabel.Visibility = 'Hidden'
    $EscB9UserIDTextbox.Visibility = 'Hidden'
    $EscB9DeviceTypelabel.Visibility = 'Hidden'
    $EscB9DeviceTypeWrapPanel.Visibility = 'Hidden'
    $EscB9UserIDlabel.Visibility = 'Hidden'
    $EscB9UserIDTextbox.Visibility = 'Hidden'
    $EscB9NumberUsedLabel.Visibility = 'Hidden'
    $EscB9NumberUsedTextBox.Visibility = 'Hidden'
    $EscB9DeviceUsedLabel.Visibility = 'Hidden'
    $EscB9DeviceTextBox.Visibility = 'Hidden'
    $EscB9NumberCalledlabel.Visibility = 'Hidden'
    $EscB9NumberCalledStackPanel.Visibility = 'Hidden'
    $EscB9NumberCalledTolabel.Visibility = 'Hidden'
    $EscB9NumberCalledToTextbox.Visibility = 'Hidden'
    $EscB9SoftphoneWifilabel.Visibility = 'Hidden'
    $EscB9SoftphoneWifiStackPanel.Visibility = 'Hidden'
    $EscB9Callbacklabel.Visibility = 'Hidden'
    $EscB9CallbackStackPanel.Visibility = 'Hidden'
    $EscB9CallbackNumberlabel.Visibility = 'Hidden'
    $EscB9CallbackNumberTextbox.Visibility = 'Hidden'
    $EscB9WearHeadsetlabel.Visibility = 'Hidden'
    $EscB9WearHeadsetStackPanel.Visibility = 'Hidden'
    $EscB9HeadsetTypelabel.Visibility = 'Hidden'
    $EscB9HeadsetTypeStackPanel.Visibility = 'Hidden'
    $EscB9CityCalledFromlabel.Visibility = 'Hidden'
    $EscB9CityCalledFromTextbox.Visibility = 'Hidden'
    $EscB9StateCalledFromlabel.Visibility = 'Hidden'
    $EscB9StateCalledFromTextbox.Visibility = 'Hidden'
    $EscB9MeetingDateCalendar.Visibility = 'Hidden'
    $EscB9DeviceTypeMobileRadioButton.IsChecked = $False
    $EscB9DeviceTypeSoftRadioButton.IsChecked = $False
    $EscB9DeviceTypeLandRadioButton.IsChecked = $False
    $EscB9DeviceTypeOtherRadioButton.IsChecked = $False
    $EscB9NumberCalledYesRadioButton.IsChecked = $False
    $EscB9NumberCalledNoRadioButton.IsChecked = $False
    $EscB9SoftphoneWifiYesRadioButton.IsChecked = $False
    $EscB9SoftphoneWifiNoRadioButton.IsChecked = $False
    $EscB9CallbackYesRadioButton.IsChecked = $False
    $EscB9CallbackNoRadioButton.IsChecked = $False
    $EscB9WearHeadsetYesRadioButton.IsChecked = $False
    $EscB9WearHeadsetNoRadioButton.IsChecked = $False
    $EscB9HeadsetTypeYesRadioButton.IsChecked = $False
    $EscB9HeadsetTypeNoRadioButton.IsChecked = $False
    })
$EscB9DeviceTypeMobileRadioButton.Add_Checked({
    $EscB9NumberUsedLabel.Visibility = 'Visible'
    $EscB9NumberUsedTextBox.Visibility = 'Visible'
    $EscB9NumberCalledlabel.Visibility = 'Visible'
    $EscB9NumberCalledStackPanel.Visibility = 'Visible'
    $EscB9Callbacklabel.Visibility = 'Visible'
    $EscB9CallbackStackPanel.Visibility = 'Visible'
    $EscB9WearHeadsetlabel.Visibility = 'Visible'
    $EscB9WearHeadsetStackPanel.Visibility = 'Visible'
    $EscB9CityCalledFromlabel.Visibility = 'Visible'
    $EscB9CityCalledFromTextbox.Visibility = 'Visible'
    $EscB9StateCalledFromlabel.Visibility = 'Visible'
    $EscB9StateCalledFromTextbox.Visibility = 'Visible'
    $EscB9SoftphoneWifilabel.Visibility = 'Hidden'
    $EscB9SoftphoneWifiStackPanel.Visibility = 'Hidden'
    $EscB9DeviceUsedLabel.Visibility = 'Hidden'
    $EscB9DeviceTextBox.Visibility = 'Hidden'
    })
$EscB9DeviceTypeSoftRadioButton.Add_Checked({
    $EscB9NumberUsedLabel.Visibility = 'Visible'
    $EscB9NumberUsedTextBox.Visibility = 'Visible'
    $EscB9NumberCalledlabel.Visibility = 'Visible'
    $EscB9NumberCalledStackPanel.Visibility = 'Visible'
    $EscB9Callbacklabel.Visibility = 'Visible'
    $EscB9CallbackStackPanel.Visibility = 'Visible'
    $EscB9WearHeadsetlabel.Visibility = 'Visible'
    $EscB9WearHeadsetStackPanel.Visibility = 'Visible'
    $EscB9CityCalledFromlabel.Visibility = 'Visible'
    $EscB9CityCalledFromTextbox.Visibility = 'Visible'
    $EscB9StateCalledFromlabel.Visibility = 'Visible'
    $EscB9StateCalledFromTextbox.Visibility = 'Visible'
    $EscB9SoftphoneWifilabel.Visibility = 'Visible'
    $EscB9SoftphoneWifiStackPanel.Visibility = 'Visible'
    $EscB9DeviceUsedLabel.Visibility = 'Hidden'
    $EscB9DeviceTextBox.Visibility = 'Hidden'
    })
$EscB9DeviceTypeLandRadioButton.Add_Checked({
    $EscB9NumberUsedLabel.Visibility = 'Visible'
    $EscB9NumberUsedTextBox.Visibility = 'Visible'
    $EscB9NumberCalledlabel.Visibility = 'Visible'
    $EscB9NumberCalledStackPanel.Visibility = 'Visible'
    $EscB9Callbacklabel.Visibility = 'Visible'
    $EscB9CallbackStackPanel.Visibility = 'Visible'
    $EscB9WearHeadsetlabel.Visibility = 'Visible'
    $EscB9WearHeadsetStackPanel.Visibility = 'Visible'
    $EscB9CityCalledFromlabel.Visibility = 'Visible'
    $EscB9CityCalledFromTextbox.Visibility = 'Visible'
    $EscB9StateCalledFromlabel.Visibility = 'Visible'
    $EscB9StateCalledFromTextbox.Visibility = 'Visible'
    $EscB9SoftphoneWifilabel.Visibility = 'Hidden'
    $EscB9SoftphoneWifiStackPanel.Visibility = 'Hidden'
    $EscB9DeviceUsedLabel.Visibility = 'Hidden'
    $EscB9DeviceTextBox.Visibility = 'Hidden'
    })
$EscB9DeviceTypeOtherRadioButton.Add_Checked({
    $EscB9DeviceUsedLabel.Visibility = 'Visible'
    $EscB9DeviceTextBox.Visibility = 'Visible'
    $EscB9SoftphoneWifilabel.Visibility = 'Hidden'
    $EscB9SoftphoneWifiStackPanel.Visibility = 'Hidden'
    $EscB9NumberUsedLabel.Visibility = 'Hidden'
    $EscB9NumberUsedTextBox.Visibility = 'Hidden'
    $EscB9NumberCalledlabel.Visibility = 'Hidden'
    $EscB9NumberCalledStackPanel.Visibility = 'Hidden'
    $EscB9Callbacklabel.Visibility = 'Hidden'
    $EscB9CallbackStackPanel.Visibility = 'Hidden'
    $EscB9WearHeadsetlabel.Visibility = 'Hidden'
    $EscB9WearHeadsetStackPanel.Visibility = 'Hidden'
    $EscB9CityCalledFromlabel.Visibility = 'Hidden'
    $EscB9CityCalledFromTextbox.Visibility = 'Hidden'
    $EscB9StateCalledFromlabel.Visibility = 'Hidden'
    $EscB9StateCalledFromTextbox.Visibility = 'Hidden'
    $EscB9NumberCalledTolabel.Visibility = 'Hidden'
    $EscB9NumberCalledToTextbox.Visibility = 'Hidden'
    $EscB9CallbackNumberlabel.Visibility = 'Hidden'
    $EscB9CallbackNumberTextbox.Visibility = 'Hidden'
    $EscB9HeadsetTypelabel.Visibility = 'Hidden'
    $EscB9HeadsetTypeStackPanel.Visibility = 'Hidden'
    })
$EscB9NumberCalledYesRadioButton.Add_Checked({
    $EscB9NumberCalledTolabel.Visibility = 'Hidden'
    $EscB9NumberCalledToTextbox.Visibility = 'Hidden'
    })
$EscB9NumberCalledNoRadioButton.Add_Checked({
    $EscB9NumberCalledTolabel.Visibility = 'Visible'
    $EscB9NumberCalledToTextbox.Visibility = 'Visible'
    })
$EscB9CallbackYesRadioButton.Add_Checked({
    $EscB9CallbackNumberlabel.Visibility = 'Visible'
    $EscB9CallbackNumberTextbox.Visibility = 'Visible'
    })
$EscB9CallbackNoRadioButton.Add_Checked({
    $EscB9CallbackNumberlabel.Visibility = 'Hidden'
    $EscB9CallbackNumberTextbox.Visibility = 'Hidden'
    })
$EscB9WearHeadsetYesRadioButton.Add_Checked({
    $EscB9HeadsetTypelabel.Visibility = 'Visible'
    $EscB9HeadsetTypeStackPanel.Visibility = 'Visible'
    })
$EscB9WearHeadsetNoRadioButton.Add_Checked({
    $EscB9HeadsetTypelabel.Visibility = 'Hidden'
    $EscB9HeadsetTypeStackPanel.Visibility = 'Hidden'
    })
$EscC2IsTurretYesRadioButton.Add_Checked({
    $EscC2TraderIDLabel.Visibility = 'Visible'
    $EscC2TraderIDTextbox.Visibility = 'Visible'
    })
$EscC2IsTurretNoRadioButton.Add_Checked({
    $EscC2TraderIDLabel.Visibility = 'Hidden'
    $EscC2TraderIDTextbox.Visibility = 'Hidden'
    })
$EscC2IsTurretYesRadioButton.Add_Checked({
    $EscC2TraderIDLabel.Visibility = 'Visible'
    $EscC2TraderIDTextbox.Visibility = 'Visible'
    })
$EscC2IsTurretNoRadioButton.Add_Checked({
    $EscC2TraderIDLabel.Visibility = 'Hidden'
    $EscC2TraderIDTextbox.Visibility = 'Hidden'
    })
            
# Textbox Change Events
$Esc01PreferredIDTextBox.Add_TextChanged({
    $Esc01PhoneNamelabel.Visibility = 'Hidden'
    $Esc01PhoneNameTextBox.Visibility = 'Hidden'
    $Esc01PhoneOKButton.Visibility = 'Hidden'
    $Esc01PhoneChangeButton.Visibility = 'Hidden'  
    $Esc01IncCatLabel.Visibility = 'Hidden'
    $Esc01IncCatComboBox.Visibility = 'Hidden'
    $Esc01FormLabel.Visibility = 'Hidden'
    $Esc01FormComboBox.Visibility = 'Hidden'
    $Esc01LoadFormsButton.Visibility = 'Hidden'
    $Esc01PhoneCorrectComboBox.SelectedIndex = 0
    $Esc01GetButton.IsDefault = $True
    $Script:RetrieveInfo = "Full"
    })
$Esc01LastThreeTextBox.Add_TextChanged({$Esc01GetButton.IsDefault = $True})
$Esc01PhoneNameTextBox.Add_TextChanged({$Esc01PhoneOKButton.IsDefault = $True})
$Esc02DateTextBox.Add_TextChanged({$Esc02Calendar.Visibility = 'Hidden'})
$Esc5CompletionTextBox.Add_TextChanged({$Esc5Calendar.Visibility = 'Hidden'})
$Esc8DateSynchedlTextBox.Add_TextChanged({$Esc8DateSynchedCalendar.Visibility = 'Hidden'})
$Esc9DateSynchedTextBox.Add_TextChanged({$Esc9DateSynchedCalendar.Visibility = 'Hidden'})
$EscA9ChangeTonerTextBox.Add_TextChanged({$EscA9Calendar.Visibility = 'Hidden'})
$EscB2LastSignonTextBox.Add_TextChanged({$EscB2LastSignonCalendar.Visibility = 'Hidden'})
$EscB2LastResetTextBox.Add_TextChanged({$EscB2LastResetCalendar.Visibility = 'Hidden'})
$EscB3Date1TextBox.Add_TextChanged({$EscB3Date1Calnedar.Visibility = 'Hidden'})
$EscB3Alt2TextBox.Add_TextChanged({$EscB3Alt2Calendar.Visibility = 'Hidden'})
$EscB3Alt3TextBox.Add_TextChanged({$EscB3Alt3Calendar.Visibility = 'Hidden'})
$EscB3Alt4TextBox.Add_TextChanged({$EscB3Alt4Calendar.Visibility = 'Hidden'})
$EscB9MeetingDateTextBox.Add_TextChanged({$EscB9MeetingDateCalendar.Visibility = 'Hidden'})
$EscC6ReinstallDateTextbox.Add_TextChanged({$EscC6Calendar.Visibility = 'Hidden'})
$EscC2IssueDateTextBox.Add_TextChanged({$EscC2Calendar.Visibility = 'Hidden'})
$Esc02ErrorMessageTextbox.Add_TextChanged({$Esc02ErrorYesRadioButton.IsChecked = $True})

# TextBox Controls
$EscX2ResultTextBox.Add_PreviewMouseDown({If ([System.Windows.Forms.UserControl]::MouseButtons -eq "Left") {If ($Submission) {Set-Clipboard $Submission}}})

# Escalation Forms Button Controls
$Esc01GetButton.Add_Click({If ($Esc01PreferredIDTextBox.Text) {GetInfo -Target $Esc01PreferredIDTextBox.Text}})
$Esc01PhoneChangeButton.Add_Click({
    $Esc01PhoneCorrectComboBox.SelectedIndex = 0
    $Esc01PhoneCorrectComboBox.Visibility = 'Visible'
    $Esc01PhoneCorrectlabel.Visibility = 'Visible'
    $Esc01PhoneChangeButton.Visibility = 'Hidden'
    $Esc01PhoneNamelabel.Visibility = 'Hidden'
    $Esc01PhoneNameTextBox.Visibility = 'Hidden'
    $Esc01PhoneOKButton.Visibility = 'Hidden'
    $Esc01IncCatLabel.Visibility = 'Hidden'
    $Esc01FormLabel.Visibility = 'Hidden'
    $Esc01IncCatComboBox.Visibility = 'Hidden'
    $Esc01FormComboBox.Visibility = 'Hidden'
    $Esc01LoadFormsButton.Visibility = 'Hidden'
    })
$Esc01PhoneOKButton.Add_Click({
    If ($Esc01PhoneNameTextBox.Text) {
        If ($Esc01PhoneNameTextBox.Text -like "*+*") {$Esc01CallerPhoneLabel2.Content = "$($Esc01PhoneNameTextBox.Text)"} Else {$Esc01CallerPhoneLabel2.Content = $(($(($Esc01PhoneNameTextBox.Text) -replace "\D+").Insert(3,'.')).Insert(7,'.'))}
        If ($Esc01PhoneNameTextBox.Text -like "*+*") {$Esc01CallerPhoneLabel2.Tooltip = "$($Esc01PhoneNameTextBox.Text)"} Else {$Esc01CallerPhoneLabel2.Tooltip = $(($(($Esc01PhoneNameTextBox.Text) -replace "\D+").Insert(3,'.')).Insert(7,'.'))}
        $Esc01PhoneNamelabel.Visibility = 'Hidden'
        $Esc01PhoneNameTextBox.Visibility = 'Hidden'
        $Esc01PhoneOKButton.Visibility = 'Hidden'
        $Esc01PhoneCorrectComboBox.Visibility = 'Hidden'
        $Esc01PhoneCorrectlabel.Visibility = 'Hidden'
        $Esc01PhoneChangeButton.Visibility = 'Visible'
        $Esc01IncCatLabel.Visibility = 'Visible'
        $Esc01IncCatComboBox.Visibility = 'Visible'
        If ($Esc01IncCatComboBox.SelectedIndex -eq 0) {$Esc01FormLabel.Visibility = 'Hidden'} Else {$Esc01FormLabel.Visibility = 'Visible'}
        If ($Esc01IncCatComboBox.SelectedIndex -eq 0) {$Esc01FormComboBox.Visibility = 'Hidden'} Else {$Esc01FormComboBox.Visibility = 'Visible'}
        If ($Esc01FormComboBox.SelectedIndex -ne -1) {$Esc01LoadFormsButton.Visibility = 'Visible'} Else {$Esc01LoadFormsButton.Visibility = 'Hidden'}
        If (($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") -and ($Esc01CallerPhoneLabel2.Content -ne "")) {$EscC2PhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
        If (($Esc01CallerNameLabel2.Content -ne "Missing From AD") -and ($Esc01CallerNameLabel2.Content -ne "")) {$EscC3CPrimaryontactTextbox.Text = $Esc01CallerNameLabel2.Content}
        If (($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") -and ($Esc01CallerPhoneLabel2.Content -ne "")) {$EscC3PrimaryPhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
        If (($Esc01CallerNameLabel2.Content -ne "Missing From AD") -and ($Esc01CallerNameLabel2.Content -ne "")) {$EscC5ClientNameTextbox.Text = $Esc01CallerNameLabel2.Content}
        If (($Esc01CallerPhoneLabel2.Content -ne "Missing From AD") -and ($Esc01CallerPhoneLabel2.Content -ne "")) {$EscC5PhoneNumberTextbox.Text = $Esc01CallerPhoneLabel2.Content}
        $Esc01PhoneOKButton.IsDefault = $False
        }  
    })
$Esc02DateBeganButton.Add_Click({If ($Esc02Calendar.Visibility -eq 'Visible') {$Esc02Calendar.Visibility = 'Hidden'} Else {$Esc02Calendar.Visibility = 'Visible'}})
$EscZStartNewButton.Add_Click({
    $Choice = [System.Windows.MessageBox]::Show("Are you sure you want to start a new escalation?`n`nAll Escalation Information will be Reset","Start New",'YesNo','Exclamation')
    If ($Choice -eq "Yes") {
        # Set StartNew
        $Script:StartNew = $True
        EscMain
        }    
    })
$Esc02WSIDPingButton.Add_Click({
    If ($Esc02MachineTextBox.Text) {
        $PingResult = ping $Esc02MachineTextBox.Text | Out-String
        $Esc02TroubleTextBox.Text = $Esc02TroubleTextBox.Text + "Ping results of $($Esc02MachineTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$Esc02IDFPingButton.Add_Click({
    If ($Esc02IDFTextBox.Text) {
        $PingResult = ping $Esc02IDFTextBox.Text | Out-String
        $Esc02TroubleTextBox.Text = $Esc02TroubleTextBox.Text + "Ping results of $($Esc02IDFTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$Esc2ServerNamePingButton.Add_Click({
    If ($Esc2ServerNameTextBox.Text) {
        $PingResult = ping $Esc2ServerNameTextBox.Text | Out-String
        $Esc2PingResultsTextBox.Text = $Esc2PingResultsTextBox.Text + "Ping results of $($Esc2ServerNameTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$Esc2ServerIPPingButton.Add_Click({
    If ($Esc2ServerIPTextBox.Text) {
        $PingResult = ping $Esc2ServerNameTextBox.Text | Out-String
        $Esc2PingResultsTextBox.Text = $Esc2PingResultsTextBox.Text + "Ping results of $($Esc2ServerIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$Esc4ServerIPPingButton.Add_Click({
    If ($Esc4ServerIPTextBox.Text) {
        $PingResult = ping $Esc4ServerIPTextBox.Text | Out-String
        $Esc4ServerTroubleTextBox.Text = $Esc4ServerTroubleTextBox.Text + "Ping results of $($Esc4ServerIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$Esc6MailServerButton.Add_Click({
    If ($Esc6MailServerTextBox.Text) {
        $PingResult = ping $Esc6MailServerTextBox.Text | Out-String
        $Esc6TroubleTextBox.Text = $Esc6TroubleTextBox.Text + "Ping results of $($Esc6MailServerTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$Esc5CompletionButton.Add_Click({If ($Esc5Calendar.Visibility -eq 'Visible') {$Esc5Calendar.Visibility = 'Hidden'} Else {$Esc5Calendar.Visibility = 'Visible'}})
$Esc8DateSynchedButton.Add_Click({If ($Esc8DateSynchedCalendar.Visibility -eq 'Visible') {$Esc8DateSynchedCalendar.Visibility = 'Hidden'} Else {$Esc8DateSynchedCalendar.Visibility = 'Visible'}})
$Esc9DateSynchedButton.Add_Click({If ($Esc9DateSynchedCalendar.Visibility -eq 'Visible') {$Esc9DateSynchedCalendar.Visibility = 'Hidden'} Else {$Esc9DateSynchedCalendar.Visibility = 'Visible'}})
$EscA1ServerNamePingButton.Add_Click({
    If ($EscA1ServerNameTextBox.Text) {
        $PingResult = ping $EscA1ServerNameTextBox.Text | Out-String
        $EscA1ServerTroubleTextBox.Text = $EscA1ServerTroubleTextBox.Text + "Ping results of $($EscA1ServerNameTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscA1ServerIPPingButton.Add_Click({
    If ($EscA1ServerIPTextBox.Text) {
        $PingResult = ping $EscA1ServerIPTextBox.Text | Out-String
        $EscA1ServerTroubleTextBox.Text = $EscA1ServerTroubleTextBox.Text + "Ping results of $($EscA1ServerIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscA1GatewayIPPingButton.Add_Click({
    If ($EscA1GatewayIPTextBox.Text) {
        $PingResult = ping $EscA1GatewayIPTextBox.Text | Out-String
        $EscA1ServerTroubleTextBox.Text = $EscA1ServerTroubleTextBox.Text + "Ping results of $($EscA1GatewayIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscA5ServerNamePingButton.Add_Click({
    If ($EscA5ServerNameTextBox.Text) {
        $PingResult = ping $EscA5ServerNameTextBox.Text | Out-String
        $EscA5TroubleTextBox.Text = $EscA5TroubleTextBox.Text + "Ping results of $($EscA5ServerNameTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscA5ServerIPPingButton.Add_Click({
    If ($EscA5ServerIPTextBox.Text) {
        $PingResult = ping $EscA5ServerIPTextBox.Text | Out-String
        $EscA5TroubleTextBox.Text = $EscA5TroubleTextBox.Text + "Ping results of $($EscA5ServerIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscA5RouterIPPingButton.Add_Click({
    If ($EscA5RouterIPTextBox.Text) {
        $PingResult = ping $EscA5RouterIPTextBox.Text | Out-String
        $EscA5TroubleTextBox.Text = $EscA5TroubleTextBox.Text + "Ping results of $($EscA5RouterIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscA9ChangeTonerCalendarButton.Add_Click({If ($EscA9Calendar.Visibility -eq 'Visible') {$EscA9Calendar.Visibility = 'Hidden'} Else {$EscA9Calendar.Visibility = 'Visible'}})
$EscA4DELLServiceCodeLookupButton.Add_Click({
    If ($EscA4DELLComputerSerialTextbox.Text -ne "") {
        [string]$Base36Num = "$($EscA4DELLComputerSerialTextbox.Text)"
        $Alphabet = "0123456789abcdefghijklmnopqrstuvwxyz"
        $InputArray = $Base36Num.tolower().tochararray()
        [array]::Reverse($InputArray)
        [long]$DecNum = 0
        $POS = 0
        Foreach ($_ in $InputArray) {
            $DecNum += $Alphabet.IndexOf($_) * [long][Math]::Pow(36, $POS)
            $POS++
            }
        $EscA4DELLServiceCodeTextbox.Text = "$DecNum"
        }
    })
$EscB1LastTimeCalendarButton.Add_Click({If ($EscB1Calender.Visibility -eq 'Visible') {$EscB1Calender.Visibility = 'Hidden'} Else {$EscB1Calender.Visibility = 'Visible'}})
$EscB2LastSignonCalendarButton.Add_Click({If ($EscB2LastSignonCalendar.Visibility -eq 'Visible') {$EscB2LastSignonCalendar.Visibility = 'Hidden'} Else {$EscB2LastSignonCalendar.Visibility = 'Visible'}})
$EscB2LastResetCalendarButton.Add_Click({If ($EscB2LastResetCalendar.Visibility -eq 'Visible') {$EscB2LastResetCalendar.Visibility = 'Hidden'} Else {$EscB2LastResetCalendar.Visibility = 'Visible'}})
$EscB2UnixPingButton.Add_Click({
    If ($EscB2UnixTextBox.Text) {
        $PingResult = ping $EscB2UnixTextBox.Text | Out-String
        $EscB2PingResultsTextBox.Text = $EscB2PingResultsTextBox.Text + "Ping results of $($EscB2UnixTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscB3Date1CalendarButton.Add_Click({If ($EscB3Date1Calnedar.Visibility -eq 'Visible') {$EscB3Date1Calnedar.Visibility = 'Hidden'} Else {$EscB3Date1Calnedar.Visibility = 'Visible'}})
$EscB3Alt2CalendarButton.Add_Click({If ($EscB3Alt2Calendar.Visibility -eq 'Visible') {$EscB3Alt2Calendar.Visibility = 'Hidden'} Else {$EscB3Alt2Calendar.Visibility = 'Visible'}})
$EscB3Alt3CalendarButton.Add_Click({If ($EscB3Alt3Calendar.Visibility -eq 'Visible') {$EscB3Alt3Calendar.Visibility = 'Hidden'} Else {$EscB3Alt3Calendar.Visibility = 'Visible'}})
$EscB3Alt4CalendarButton.Add_Click({If ($EscB3Alt4Calendar.Visibility -eq 'Visible') {$EscB3Alt4Calendar.Visibility = 'Hidden'} Else {$EscB3Alt4Calendar.Visibility = 'Visible'}})
$EscB4ServerNamePingButton.Add_Click({
    If ($EscB4ServerNameTextBox.Text) {
        $PingResult = ping $EscB4ServerNameTextBox.Text | Out-String
        $EscB4PingResultsTextBox.Text = $EscB4PingResultsTextBox.Text + "Ping results of $($EscB4ServerNameTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscB4ServerIPPingButton.Add_Click({
    If ($EscB4ServerIPTextBox.Text) {
        $PingResult = ping $EscB4ServerIPTextBox.Text | Out-String
        $EscB4PingResultsTextBox.Text = $EscB4PingResultsTextBox.Text + "Ping results of $($EscB4ServerIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscB4RouterIPPingButton.Add_Click({
    If ($EscB4RouterIPTextBox.Text) {
        $PingResult = ping $EscB4RouterIPTextBox.Text | Out-String
        $EscB4PingResultsTextBox.Text = $EscB4PingResultsTextBox.Text + "Ping results of $($EscB4RouterIPTextBox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscB9MeetingDateCalendarButton.Add_Click({If ($EscB9MeetingDateCalendar.Visibility -eq 'Visible') {$EscB9MeetingDateCalendar.Visibility = 'Hidden'} Else {$EscB9MeetingDateCalendar.Visibility = 'Visible'}})
$EscC2IssueDateCalendarButton.Add_Click({If ($EscC2Calendar.Visibility -eq 'Visible') {$EscC2Calendar.Visibility = 'Hidden'} Else {$EscC2Calendar.Visibility = 'Visible'}})
$EscC6ReinstallDateCalendarButton.Add_Click({If ($EscC6Calendar.Visibility -eq 'Visible') {$EscC6Calendar.Visibility = 'Hidden'} Else {$EscC6Calendar.Visibility = 'Visible'}})
$EscC6MachinePingButton.Add_Click({
    If ($EscC6MachineTextbox.Text) {
        $PingResult = ping $EscC6MachineTextbox.Text | Out-String
        $EscC6AddTextBox.Text = $EscC6AddTextBox.Text + "Ping results of $($EscC6MachineTextbox.Text) on $(Get-Date)`n$($PingResult)" + "`n`n"
        }
    })
$EscZSubmitButton.Add_Click({
    $Result = EscResult
    If ($Result -ne $False) {
        If ($Esc01FormComboBox.SelectedValue -eq "Citrix") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}        
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Database") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}        
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Desktop Application") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Intranet/Internet") {
            $EscX2ResultTextBox.Text = $Submission
            $EscX2ResultTextBox.Visibility = "Visible"
            $RESULTS2_Grid.Visibility = 'Visible'
            $EscXResultTab.Visibility = "Visible"
            $Esc02tabControl.SelectedIndex = 2
            If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Global Learning Lab") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Lotus Notes/USB Mail") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Mainframe Application") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Mobility") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "VPN") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Wizard") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Credit Card Partners") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Computer") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Server Hardware") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Epson-Nexus") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Printer") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "E Pay Customer") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Network") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Drive Mapping-Role") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Info Security Password") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "File Restore") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Server") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Transmission") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "IVR") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Voice") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Voice Mail") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Webex") {
        $EscX2ResultTextBox.Text = $Submission
        $EscX2ResultTextBox.Visibility = "Visible"
        $RESULTS2_Grid.Visibility = 'Visible'
        $EscXResultTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 2
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "IBM PC Replacement") {
        $EscX1ResultTextBox.Text = $Submission
        $EscX1ResultTextBox.Height = "107"
        $EscX1ResultTextBox.Visibility = "Visible"
        $RESULTS1_Grid.Visibility = 'Visible'
        $EscXOtherTab.Header = "Results"
        $EscXOtherTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 1
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Log and Route") {
        $EscX1ResultTextBox.Text = $Submission
        $EscX1ResultTextBox.Height = "221"
        $EscX1ResultTextBox.Visibility = "Visible"
        $RESULTS1_Grid.Visibility = 'Visible'
        $EscXOtherTab.Header = "Results"
        $EscXOtherTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 1
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Natural Disaster") {
        $EscX1ResultTextBox.Text = $Submission
        $EscX1ResultTextBox.Height = "372"
        $EscX1ResultTextBox.Visibility = "Visible"
        $RESULTS1_Grid.Visibility = 'Visible'
        $EscXOtherTab.Header = "Results"
        $EscXOtherTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 1
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Server Patching/Reboot") {
        $EscX1ResultTextBox.Text = $Submission
        $EscX1ResultTextBox.Height = "122"
        $EscX1ResultTextBox.Visibility = "Visible"
        $RESULTS1_Grid.Visibility = 'Visible'
        $EscXOtherTab.Header = "Results"
        $EscXOtherTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 1
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "SM Request") {
        $EscX1ResultTextBox.Text = $Submission
        $EscX1ResultTextBox.Height = "252"
        $EscX1ResultTextBox.Visibility = "Visible"
        $RESULTS1_Grid.Visibility = 'Visible'
        $EscXOtherTab.Header = "Results"
        $EscXOtherTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 1
        If ($Submission) {Set-Clipboard $Submission}
        }
        If ($Esc01FormComboBox.SelectedValue -eq "Software Delete") {
        $EscX1ResultTextBox.Text = $Submission
        $EscX1ResultTextBox.Height = "304"
        $EscX1ResultTextBox.Visibility = "Visible"
        $RESULTS1_Grid.Visibility = 'Visible'
        $EscXOtherTab.Header = "Results"
        $EscXOtherTab.Visibility = "Visible"
        $Esc02tabControl.SelectedIndex = 1
        If ($Submission) {Set-Clipboard $Submission}
        }
        }
    })
$Esc01LoadFormsButton.Add_Click({
    # Hide TabControl
    $Esc02tabControl.visibility = 'Hidden'    
    # Hide Grids
    $RESULTS1_Grid.Visibility = 'Hidden'
    $RESULTS2_Grid.Visibility = 'Hidden'
    $General_Grid.Visibility = 'Hidden'
    $IBMPC_Grid.Visibility = 'Hidden'
    $LOGROUTE_Grid.Visibility = 'Hidden'
    $NATURAL_Grid.Visibility = 'Hidden'
    $SERVERPATCH_Grid.Visibility = 'Hidden'
    $SERVICEMANAGER_Grid.Visibility = 'Hidden'
    $SOFTWAREDELETE_Grid.Visibility = 'Hidden'
    $CITRIX_Grid.Visibility = 'Hidden'
    $DATABASE_Grid.Visibility = 'Hidden'
    $DESKTOP_Grid.Visibility = 'Hidden'
    $INTERNET_Grid.Visibility = 'Hidden'
    $GLL_Grid.Visibility = 'Hidden'
    $LOTUS_Grid.Visibility = 'Hidden'
    $MAINFRAME_Grid.Visibility = 'Hidden'
    $MOBILITY_Grid.Visibility = 'Hidden'
    $VPN_Grid.Visibility = 'Hidden'
    $WIZARD_Grid.Visibility = 'Hidden'
    $CREDITCARD_Grid.Visibility = 'Hidden'
    $EPAY_Grid.Visibility = 'Hidden'
    $COMPUTER_Grid.Visibility = 'Hidden'
    $SERVERHW_Grid.Visibility = 'Hidden'
    $NETWORK_Grid.Visibility = 'Hidden'
    $EPSON_Grid.Visibility = 'Hidden'
    $PRINTER_Grid.Visibility = 'Hidden'
    $MAPPING_Grid.Visibility = 'Hidden'
    $INFOSEC_Grid.Visibility = 'Hidden'
    $FILERESTORE_Grid.Visibility = 'Hidden'
    $SERVER_Grid.Visibility = 'Hidden'
    $TRANSMISSION_Grid.Visibility = 'Hidden'
    $IVR_Grid.Visibility = 'Hidden'
    $VOICE_Grid.Visibility = 'Hidden'
    $VOICEMAIL_Grid.Visibility = 'Hidden'
    $WEBEX_Grid.Visibility = 'Hidden'
    # Hide Tabs
    $Esc02GeneralTab.Visibility = 'Hidden'
    $EscXOtherTab.Visibility = 'Hidden'
    $EscXResultTab.Visibility = 'Hidden'
    # Set Submission
    $Script:Submission = $Null
    $Esc02DateTextBox.Text = (Get-Date -Format "MM/dd/yyyy")
    If ($Esc01FormComboBox.SelectedValue -eq "Citrix") {
        EscGeneral
        EscCitrix
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Database") {
        EscGeneral
        EscDatabase
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Desktop Application") {
        EscGeneral
        EscDesktop
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Intranet/Internet") {
        EscGeneral
        EscInternet
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Global Learning Lab") {
        EscGeneral
        EscLearning
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Lotus Notes/USB Mail") {
        EscGeneral
        EscLotus
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Mainframe Application") {
        EscGeneral
        EscMainframe
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Mobility") {
        EscGeneral
        EscMobility
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "VPN") {
        EscGeneral
        EscVPN
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Wizard") {
        EscGeneral
        EscWizard
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Credit Card Partners") {
        EscGeneral
        EscCCPartners
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Computer") {
        EscGeneral
        EscComputer
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Server Hardware") {
        EscGeneral
        EscServerHardware
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Epson-Nexus") {
        EscGeneral
        EscEpsonNexus
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Printer") {
        EscGeneral
        EscPrinter
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "E Pay Customer") {
        EscGeneral
        EscEpay
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Network") {
        EscGeneral
        EscNetwork
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Drive Mapping-Role") {
        EscGeneral
        EscDriveMappingRole
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Info Security Password") {
        EscGeneral
        EscInfoSecPass
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "File Restore") {
        EscGeneral
        EscFileRestore
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Server") {
        EscGeneral
        EscServer
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Transmission") {
        EscGeneral
        EscTransmission
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "IVR") {
        EscGeneral
        EscIVR
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Voice") {
        EscGeneral
        EscVoice
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Voice Mail") {
        EscGeneral
        EscVoiceMail
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Webex") {
        EscGeneral
        EscWebex
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,738,0,0"
        $EscZStartNewButton.Margin = "253,738,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "537"
        If ($Resize -eq $False) {$Form_Esc.Height = "817"} Else {$Form_Esc.Height = "$AdjustedRes"}
        }
    If ($Esc01FormComboBox.SelectedValue -eq "IBM PC Replacement") {
        EscIBMReplace
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,355,0,0"
        $EscZStartNewButton.Margin = "253,355,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "154"
        $Form_Esc.Height = "434"
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Log and Route") {
        EscLogRoute
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,469,0,0"
        $EscZStartNewButton.Margin = "253,469,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "268"
        $Form_Esc.Height = "548"
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Natural Disaster") {
        EscDisaster
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,619,0,0"
        $EscZStartNewButton.Margin = "253,619,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "418"
        $Form_Esc.Height = "698"
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Server Patching/Reboot") {
        EscReboot
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,370,0,0"
        $EscZStartNewButton.Margin = "253,370,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "169"
        $Form_Esc.Height = "459"
        }
    If ($Esc01FormComboBox.SelectedValue -eq "SM Request") {
        EscSMRequest
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,499,0,0"
        $EscZStartNewButton.Margin = "253,499,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "298"
        $Form_Esc.Height = "578"
        }
    If ($Esc01FormComboBox.SelectedValue -eq "Software Delete") {
        EscDelete
        $EscZSubmitButton.Visibility = "Visible"
        $EscZStartNewButton.Visibility = "Visible"
        $EscZSubmitButton.Margin = "442,550,0,0"
        $EscZStartNewButton.Margin = "253,550,0,0"
        [System.Windows.Forms.Application]::DoEvents()
        $Esc02tabControl.Height = "350"
        $Form_Esc.Height = "630"
        }
    If ($EscXOtherTab.Visibility -eq 'Hidden') {$Esc02tabControl.SelectedIndex = 0}   
    })

# Loading Update
$Form_Load_Textblock2.Text = "Configuring WPF Forms..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")

# Enable or Disable Scrolling of Escalaion Forms
$Monitors = [System.Windows.Forms.Screen]::AllScreens
$LowestRes = [int]($Monitors.Bounds.Height | Measure -Minimum).Minimum
$AdjustedRes = [int]($Monitors.WorkingArea.Height | Measure -Minimum).Minimum
If ($LowestRes -lt 900) {$Resize = $True} Else {$Resize = $False}
If ($Resize -eq $True) {
    $Form_Esc.Width ="858"
    $Form_Esc.MaxWidth ="858"
    $Form_Esc.MinWidth ="858"
    $Form_Esc.ResizeMode = "CanResizeWithGrip"
    $EscScroller.VerticalScrollBarVisibility = "Auto"
    }
Else {
    $Form_Esc.Width ="849"
    $Form_Esc.MaxWidth ="849"
    $Form_Esc.MinWidth ="849"
    $Form_Esc.ResizeMode = "CanMinimize"
    $EscScroller.VerticalScrollBarVisibility = "Disabled"
    }

# Enable Dragging of Main Form by Clicking Background
$Form_Main.Add_MouseLeftButtonDown({$Form_Main.DragMove()})

# Enable Dragging of Info and Mapping Forms by Title Label
$InfoLabel.Add_MouseLeftButtonDown({
    Try {$Form_Info.DragMove()}
    Catch {$Null}
    })
$InfoToolboxVersion.Add_MouseLeftButtonDown({
    Try {$Form_Info.DragMove()}
    Catch {$Null}
    })
$MapTitleLabel.Add_MouseLeftButtonDown({
    Try {$Form_Map.DragMove()}
    Catch {$Null}
    })

# Enable Dragging of Esc Form by Clicking Background
$Esc_Grid.Add_MouseLeftButtonDown({$Form_Esc.DragMove()})

# Enable Dragging of Pic Form by Clicking Background
$Pic_Grid.Add_MouseLeftButtonDown({$Form_Pic.DragMove()})

# Set Form_Main Closing Event to Prompt for Confirmation
$Form_Main.Add_Closing([System.ComponentModel.CancelEventHandler]{ 
    $_.Cancel=$True
    $Choice = [System.Windows.MessageBox]::Show("Are you sure you want to close the Agent Toolbox?","Close Toolbox",'YesNo','Error')
    If ($Choice -eq "Yes") {
        If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Closed Toolbox" $WSID $USERID}
        Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Closed Toolbox" $ComputerName $USERID}
        #Stop-Process -Name "Agent Toolbox Updater" -Force -ErrorAction SilentlyContinue
        Stop-Process -Name "Agent Toolbox EMS" -Force -ErrorAction SilentlyContinue
        Try {Stop-Process $PID -Force -ErrorAction Stop}
        Catch {[Environment]::Exit(0)}
        }
    }) 

# Set Form_Info Closing Event to Allow Window to be Reopened
$Form_Info.Add_Closing([System.ComponentModel.CancelEventHandler]{ 
    $_.Cancel=$True
    $Form_Info.Hide()
    }) 

# Set Form_Map Closing Event to Allow Window to be Reopened
$Form_Map.Add_Closing([System.ComponentModel.CancelEventHandler]{ 
    $_.Cancel=$True
    $Form_Map.Hide()
    }) 

# Set Form_Esc Closing Event to Allow Window to be Reopened
$Form_Esc.Add_Closing([System.ComponentModel.CancelEventHandler]{ 
    $_.Cancel=$True
    $Form_Esc.Hide()
    }) 

# Set Form_Pic Closing Event to Allow Window to be Reopened
$Form_Pic.Add_Closing([System.ComponentModel.CancelEventHandler]{ 
    $_.Cancel=$True
    $Form_Pic.Hide()
    }) 

# Set Form_MSG Closing Event to Prevent Closing
$Form_MSG.Add_Closing([System.ComponentModel.CancelEventHandler]{ 
    $_.Cancel=$True
    If ($MSGButton.IsPressed) {$Form_MSG.Hide()}
    })

# Enable Hiding of Info Form by Right Clicking Background
$Form_Info.Add_MouseRightButtonUp({$Form_Info.Hide()})

# Enable Hiding of Pic Form by Right Clicking Background
$Form_Pic.Add_MouseRightButtonUp({$Form_Pic.Hide()})

# Configure Toolbox
$Form_Load_Textblock2.Text = "Configuring Agent Toolbox..."
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
If (Test-Path $ConfigFile) {
    $Script:Config = Import-Csv $ConfigFile
    If (($Config.Font -eq $Null) -or ($Config.Font -eq "")) {
        Remove-Item -Path $ConfigFile -Force
        SaveConfig -Option "Full"
        GetConfig
        SetConfig
        }
    Else {
        GetConfig
        SetConfig
        }
    }
Else {
    FirstConfig
    SaveConfig -Option "Full"
    GetConfig
    SetConfig
    }

# Hi Mom (Let the developer have her fun please)
If ($LocalUser -eq "clverit") {$Script:StartMenuLabel1.Content = "Hi Mom! <3"}

# Allow input to window for TextBoxes, etc
[System.Windows.Forms.Integration.ElementHost]::EnableModelessKeyboardInterop($Form_Main)
[System.Windows.Forms.Integration.ElementHost]::EnableModelessKeyboardInterop($Form_Esc)
[System.Windows.Forms.Integration.ElementHost]::EnableModelessKeyboardInterop($Form_Pic)
[System.Windows.Forms.Integration.ElementHost]::EnableModelessKeyboardInterop($Form_MSG)

# Set Window to use Software Rendering
[System.Windows.Media.RenderOptions]::ProcessRenderMode = "SoftwareOnly"

# Set Title
$Form_Esc.Title = "Escalation Forms (BETA) - LOOK UP BUTTONS NOT WORKING"

# Create Timer for Cliboard Update
$Timer = New-Object System.Windows.Forms.Timer
$Timer.Interval = 60000
$Timer.add_Tick({UpdateClipboard})
#>

<# Create Watcher for Clipboard Update
$ClipboardWatcher = New-Object IO.FileSystemWatcher $FilesFolder, $(Split-Path $ClipboardFile -leaf) -Property @{ 
    IncludeSubdirectories = $false
    NotifyFilter = [IO.NotifyFilters]'FileName, LastWrite'
}
$onClipboardChanged = Register-ObjectEvent $ClipboardWatcher -EventName Created -SourceIdentifier FileChanged -Action {UpdateClipboard}
#>

# Preload Tabs
EscMain
EscGeneral
EscDesktop
$Esc02tabControl.SelectedIndex = 1

# Show Form, Activate, and Set AppContext
If ((Get-Random -Minimum 1 -Maximum 10) -eq 7) {$Form_Load_Textblock2.Text = "Showtime!"} Else {$Form_Load_Textblock2.Text = "Starting..."}
$Form_Load.Dispatcher.Invoke([action]{$Form_Load_Textblock2},"Render")
StartMenu
$Form_Main.ShowInTaskbar = $True
$Form_Load.Close() | Out-Null
If (Test-Path -Path "$CurrentDir\Agent Toolbox.new" -ErrorAction SilentlyContinue) {$Script:Restart = $True}
If (Test-Path -Path "$FilesFolder\MSTVIEW.NEW" -ErrorAction SilentlyContinue) {$Script:Restart = $True}
If ($Restart -eq $True) {
    If (!$UpdateChoice) {$Script:UpdateChoice = [System.Windows.MessageBox]::Show("There is an update to the Agent Toolbox.`n`nWould you like to update now?",'Update Toolbox','YesNo','Information')}
    If ($UpdateChoice -eq 'Yes') {
        If (Test-Path -Path "$CurrentDir\Agent Toolbox Updater.exe" -ErrorAction SilentlyContinue) {
            Start-Process -FilePath "$CurrentDir\Agent Toolbox Updater.exe" -ErrorAction SilentlyContinue
            exit
            }
        Else {
            [System.Windows.MessageBox]::Show("The Agent Toolbox Updater is missing. Please Reinstall the Agent Toolbox.`n`nPress OK to close this message.",'Update Error','OK','Error') | Out-Null
            } 
        }
    }
If ($WSID) {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Opened Toolbox" $WSID $USERID}
Else {WriteLog $(Get-Date -Format "yyyy/MM/dd HH:mm:ss") $LocalUser "Toolbox" "Opened Toolbox" $ComputerName $USERID}
# Start Clipboard Timer for Cliboard Update
$Timer.Start()
[void]$Form_Main.Show()
$ApplicationContext = New-Object System.Windows.Forms.ApplicationContext
[void][System.Windows.Forms.Application]::Run($ApplicationContext)
